
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbf8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800dd88  0800dd88  0000ed88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e22c  0800e22c  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e22c  0800e22c  0000f22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e234  0800e234  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e234  0800e234  0000f234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e238  0800e238  0000f238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e23c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101d8  2**0
                  CONTENTS
 10 .bss          00000890  200001d8  200001d8  000101d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000a68  20000a68  000101d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa97  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004572  00000000  00000000  0002ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  0002f218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001156  00000000  00000000  000308b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026faa  00000000  00000000  00031a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fcb1  00000000  00000000  000589b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcde6  00000000  00000000  00078669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015544f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070a0  00000000  00000000  00155494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0015c534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd70 	.word	0x0800dd70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800dd70 	.word	0x0800dd70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000eee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ef2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f16:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <MX_ADC1_Init+0xa0>)
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f36:	f002 fb7b 	bl	8003630 <HAL_ADC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f40:	f001 ff58 	bl	8002df4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f56:	f002 fd4d 	bl	80039f4 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f60:	f001 ff48 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200001f4 	.word	0x200001f4
 8000f70:	40012000 	.word	0x40012000
 8000f74:	0f000001 	.word	0x0f000001

08000f78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_ADC_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d127      	bne.n	8000fea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <HAL_ADC_MspInit+0x84>)
 8000fe6:	f003 f809 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000

08001000 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8001008:	2305      	movs	r3, #5
 800100a:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f001 fa3b 	bl	800248c <null_ptr_check>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d133      	bne.n	800108a <bme280_init+0x8a>
    {
        while (try_count)
 8001022:	e028      	b.n	8001076 <bme280_init+0x76>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001024:	f107 010d 	add.w	r1, r7, #13
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	20d0      	movs	r0, #208	@ 0xd0
 800102e:	f000 f832 	bl	8001096 <bme280_get_regs>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d114      	bne.n	8001068 <bme280_init+0x68>
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	2b60      	cmp	r3, #96	@ 0x60
 8001042:	d111      	bne.n	8001068 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8001044:	7b7a      	ldrb	r2, [r7, #13]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f978 	bl	8001340 <bme280_soft_reset>
 8001050:	4603      	mov	r3, r0
 8001052:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d110      	bne.n	800107e <bme280_init+0x7e>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f001 f87d 	bl	800215c <get_calib_data>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001066:	e00a      	b.n	800107e <bme280_init+0x7e>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2001      	movs	r0, #1
 800106e:	4798      	blx	r3
            --try_count;
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	3b01      	subs	r3, #1
 8001074:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1d3      	bne.n	8001024 <bme280_init+0x24>
 800107c:	e000      	b.n	8001080 <bme280_init+0x80>
                break;
 800107e:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <bme280_init+0x8a>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8001086:	23fe      	movs	r3, #254	@ 0xfe
 8001088:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8001096:	b590      	push	{r4, r7, lr}
 8001098:	b087      	sub	sp, #28
 800109a:	af00      	add	r7, sp, #0
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	4613      	mov	r3, r2
 80010a6:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f001 f9ef 	bl	800248c <null_ptr_check>
 80010ae:	4603      	mov	r3, r0
 80010b0:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80010b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d117      	bne.n	80010ea <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	789b      	ldrb	r3, [r3, #2]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d003      	beq.n	80010ca <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010c8:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685c      	ldr	r4, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7858      	ldrb	r0, [r3, #1]
 80010d2:	89bb      	ldrh	r3, [r7, #12]
 80010d4:	7bf9      	ldrb	r1, [r7, #15]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	47a0      	blx	r4
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 80010de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 80010e6:	23fc      	movs	r3, #252	@ 0xfc
 80010e8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80010ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}

080010f6 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80010f6:	b590      	push	{r4, r7, lr}
 80010f8:	b08d      	sub	sp, #52	@ 0x34
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4613      	mov	r3, r2
 8001104:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b0a      	cmp	r3, #10
 800110a:	d901      	bls.n	8001110 <bme280_set_regs+0x1a>
    {
        len = 10;
 800110c:	230a      	movs	r3, #10
 800110e:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001110:	6838      	ldr	r0, [r7, #0]
 8001112:	f001 f9bb 	bl	800248c <null_ptr_check>
 8001116:	4603      	mov	r3, r0
 8001118:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800111c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001120:	2b00      	cmp	r3, #0
 8001122:	d156      	bne.n	80011d2 <bme280_set_regs+0xdc>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d053      	beq.n	80011d2 <bme280_set_regs+0xdc>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d050      	beq.n	80011d2 <bme280_set_regs+0xdc>
    {
        if (len != 0)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d049      	beq.n	80011ca <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	789b      	ldrb	r3, [r3, #2]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d01a      	beq.n	800117a <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001144:	2300      	movs	r3, #0
 8001146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800114a:	e011      	b.n	8001170 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800114c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800115a:	68f9      	ldr	r1, [r7, #12]
 800115c:	440b      	add	r3, r1
 800115e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001166:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800116a:	3301      	adds	r3, #1
 800116c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001170:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	429a      	cmp	r2, r3
 8001178:	d3e8      	bcc.n	800114c <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d90d      	bls.n	800119c <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f107 0114 	add.w	r1, r7, #20
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f001 f82b 	bl	80021e4 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	b29b      	uxth	r3, r3
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	3b01      	subs	r3, #1
 8001198:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800119a:	e001      	b.n	80011a0 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689c      	ldr	r4, [r3, #8]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	7858      	ldrb	r0, [r3, #1]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	7819      	ldrb	r1, [r3, #0]
 80011ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011ae:	f107 0214 	add.w	r2, r7, #20
 80011b2:	47a0      	blx	r4
 80011b4:	4603      	mov	r3, r0
 80011b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 80011ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 80011c2:	23fc      	movs	r3, #252	@ 0xfc
 80011c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 80011c8:	e007      	b.n	80011da <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80011ca:	23fd      	movs	r3, #253	@ 0xfd
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 80011d0:	e003      	b.n	80011da <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80011d2:	23ff      	movs	r3, #255	@ 0xff
 80011d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011d8:	e000      	b.n	80011dc <bme280_set_regs+0xe6>
        if (len != 0)
 80011da:	bf00      	nop
    }

    return rslt;
 80011dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3734      	adds	r7, #52	@ 0x34
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}

080011e8 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f001 f949 	bl	800248c <null_ptr_check>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d13f      	bne.n	8001286 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001206:	f107 030e 	add.w	r3, r7, #14
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f874 	bl	80012fa <bme280_get_sensor_mode>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d107      	bne.n	800122e <bme280_set_sensor_settings+0x46>
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f000 fb79 	bl	800191c <put_device_to_sleep>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d127      	bne.n	8001286 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4619      	mov	r1, r3
 800123a:	2007      	movs	r0, #7
 800123c:	f001 f90a 	bl	8002454 <are_settings_changed>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f9b1 	bl	80015b8 <set_osr_settings>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d111      	bne.n	8001286 <bme280_set_sensor_settings+0x9e>
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4619      	mov	r1, r3
 8001266:	2018      	movs	r0, #24
 8001268:	f001 f8f4 	bl	8002454 <are_settings_changed>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d009      	beq.n	8001286 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fa38 	bl	80016f2 <set_filter_standby_settings>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	6039      	str	r1, [r7, #0]
 800129c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f001 f8f4 	bl	800248c <null_ptr_check>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80012a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d11e      	bne.n	80012ee <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80012b0:	f107 030e 	add.w	r3, r7, #14
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f81f 	bl	80012fa <bme280_get_sensor_mode>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80012c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d107      	bne.n	80012d8 <bme280_set_sensor_mode+0x46>
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f000 fb24 	bl	800191c <put_device_to_sleep>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 80012d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d106      	bne.n	80012ee <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fae6 	bl	80018b6 <write_power_mode>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001304:	6838      	ldr	r0, [r7, #0]
 8001306:	f001 f8c1 	bl	800248c <null_ptr_check>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10e      	bne.n	8001334 <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	2201      	movs	r2, #1
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	20f4      	movs	r0, #244	@ 0xf4
 800131e:	f7ff feba 	bl	8001096 <bme280_get_regs>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	b2da      	uxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001334:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001348:	23e0      	movs	r3, #224	@ 0xe0
 800134a:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8001350:	2305      	movs	r3, #5
 8001352:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001354:	23b6      	movs	r3, #182	@ 0xb6
 8001356:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f001 f897 	bl	800248c <null_ptr_check>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d12f      	bne.n	80013ca <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800136a:	f107 010b 	add.w	r1, r7, #11
 800136e:	f107 000d 	add.w	r0, r7, #13
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f7ff febe 	bl	80010f6 <bme280_set_regs>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d121      	bne.n	80013ca <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2002      	movs	r0, #2
 800138c:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 800138e:	f107 010c 	add.w	r1, r7, #12
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	20f3      	movs	r0, #243	@ 0xf3
 8001398:	f7ff fe7d 	bl	8001096 <bme280_get_regs>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d109      	bne.n	80013bc <bme280_soft_reset+0x7c>
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	1e5a      	subs	r2, r3, #1
 80013ac:	73ba      	strb	r2, [r7, #14]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <bme280_soft_reset+0x7c>
 80013b2:	7b3b      	ldrb	r3, [r7, #12]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1e4      	bne.n	8001386 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 80013bc:	7b3b      	ldrb	r3, [r7, #12]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 80013c6:	23fa      	movs	r3, #250	@ 0xfa
 80013c8:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b08a      	sub	sp, #40	@ 0x28
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = { 0 };
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f001 f846 	bl	800248c <null_ptr_check>
 8001400:	4603      	mov	r3, r0
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8001406:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800140a:	2b00      	cmp	r3, #0
 800140c:	d124      	bne.n	8001458 <bme280_get_sensor_data+0x82>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d021      	beq.n	8001458 <bme280_get_sensor_data+0x82>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001414:	f107 011c 	add.w	r1, r7, #28
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2208      	movs	r2, #8
 800141c:	20f7      	movs	r0, #247	@ 0xf7
 800141e:	f7ff fe3a 	bl	8001096 <bme280_get_regs>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BME280_OK)
 8001428:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800142c:	2b00      	cmp	r3, #0
 800142e:	d116      	bne.n	800145e <bme280_get_sensor_data+0x88>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001430:	f107 0210 	add.w	r2, r7, #16
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f815 	bl	800146a <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3310      	adds	r3, #16
 8001444:	f107 0110 	add.w	r1, r7, #16
 8001448:	7bf8      	ldrb	r0, [r7, #15]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f000 f853 	bl	80014f6 <bme280_compensate_data>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BME280_OK)
 8001456:	e002      	b.n	800145e <bme280_get_sensor_data+0x88>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001458:	23ff      	movs	r3, #255	@ 0xff
 800145a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800145e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001462:	4618      	mov	r0, r3
 8001464:	3728      	adds	r7, #40	@ 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800146a:	b480      	push	{r7}
 800146c:	b087      	sub	sp, #28
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	031b      	lsls	r3, r3, #12
 800147a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3302      	adds	r3, #2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	b2db      	uxtb	r3, r3
 8001490:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	431a      	orrs	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	431a      	orrs	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3303      	adds	r3, #3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	031b      	lsls	r3, r3, #12
 80014a8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3304      	adds	r3, #4
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3305      	adds	r3, #5
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3306      	adds	r3, #6
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3307      	adds	r3, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	609a      	str	r2, [r3, #8]
}
 80014ea:	bf00      	nop
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d04b      	beq.n	80015a8 <bme280_compensate_data+0xb2>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d048      	beq.n	80015a8 <bme280_compensate_data+0xb2>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d045      	beq.n	80015a8 <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00a      	beq.n	8001566 <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	68b8      	ldr	r0, [r7, #8]
 8001554:	f000 fa30 	bl	80019b8 <compensate_temperature>
 8001558:	eeb0 7a40 	vmov.f32	s14, s0
 800155c:	eef0 7a60 	vmov.f32	s15, s1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00a      	beq.n	8001586 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	68b8      	ldr	r0, [r7, #8]
 8001574:	f000 faf4 	bl	8001b60 <compensate_pressure>
 8001578:	eeb0 7a40 	vmov.f32	s14, s0
 800157c:	eef0 7a60 	vmov.f32	s15, s1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00d      	beq.n	80015ac <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f000 fcc2 	bl	8001f1c <compensate_humidity>
 8001598:	eeb0 7a40 	vmov.f32	s14, s0
 800159c:	eef0 7a60 	vmov.f32	s15, s1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 80015a6:	e001      	b.n	80015ac <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80015a8:	23ff      	movs	r3, #255	@ 0xff
 80015aa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	68b8      	ldr	r0, [r7, #8]
 80015d8:	f000 f815 	bl	8001606 <set_osr_humidity_settings>
 80015dc:	4603      	mov	r3, r0
 80015de:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f842 	bl	800167a <set_osr_press_temp_settings>
 80015f6:	4603      	mov	r3, r0
 80015f8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001610:	23f2      	movs	r3, #242	@ 0xf2
 8001612:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	789b      	ldrb	r3, [r3, #2]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	b2db      	uxtb	r3, r3
 800161e:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001620:	f107 010e 	add.w	r1, r7, #14
 8001624:	f107 000c 	add.w	r0, r7, #12
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2201      	movs	r2, #1
 800162c:	f7ff fd63 	bl	80010f6 <bme280_set_regs>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d118      	bne.n	800166e <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800163c:	23f4      	movs	r3, #244	@ 0xf4
 800163e:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001640:	7b38      	ldrb	r0, [r7, #12]
 8001642:	f107 010d 	add.w	r1, r7, #13
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	f7ff fd24 	bl	8001096 <bme280_get_regs>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800165a:	f107 010d 	add.w	r1, r7, #13
 800165e:	f107 000c 	add.w	r0, r7, #12
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2201      	movs	r2, #1
 8001666:	f7ff fd46 	bl	80010f6 <bme280_set_regs>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001688:	23f4      	movs	r3, #244	@ 0xf4
 800168a:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800168c:	7db8      	ldrb	r0, [r7, #22]
 800168e:	f107 0115 	add.w	r1, r7, #21
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f7ff fcfe 	bl	8001096 <bme280_get_regs>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 800169e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d11f      	bne.n	80016e6 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 80016b0:	f107 0315 	add.w	r3, r7, #21
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f890 	bl	80017dc <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 80016c6:	f107 0315 	add.w	r3, r7, #21
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f8a3 	bl	8001818 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80016d2:	f107 0115 	add.w	r1, r7, #21
 80016d6:	f107 0016 	add.w	r0, r7, #22
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f7ff fd0a 	bl	80010f6 <bme280_set_regs>
 80016e2:	4603      	mov	r3, r0
 80016e4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001700:	23f5      	movs	r3, #245	@ 0xf5
 8001702:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001704:	7db8      	ldrb	r0, [r7, #22]
 8001706:	f107 0115 	add.w	r1, r7, #21
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f7ff fcc2 	bl	8001096 <bme280_get_regs>
 8001712:	4603      	mov	r3, r0
 8001714:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8001716:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d11f      	bne.n	800175e <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001728:	f107 0315 	add.w	r3, r7, #21
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f81b 	bl	800176a <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 800173e:	f107 0315 	add.w	r3, r7, #21
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f82e 	bl	80017a6 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800174a:	f107 0115 	add.w	r1, r7, #21
 800174e:	f107 0016 	add.w	r0, r7, #22
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f7ff fcce 	bl	80010f6 <bme280_set_regs>
 800175a:	4603      	mov	r3, r0
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800175e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	f023 031c 	bic.w	r3, r3, #28
 800177e:	b25a      	sxtb	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	78db      	ldrb	r3, [r3, #3]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	f003 031c 	and.w	r3, r3, #28
 800178e:	b25b      	sxtb	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b25b      	sxtb	r3, r3
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	701a      	strb	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	b25a      	sxtb	r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	015b      	lsls	r3, r3, #5
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	701a      	strb	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	f023 031c 	bic.w	r3, r3, #28
 80017f0:	b25a      	sxtb	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	f003 031c 	and.w	r3, r3, #28
 8001800:	b25b      	sxtb	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b25b      	sxtb	r3, r3
 8001806:	b2da      	uxtb	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	701a      	strb	r2, [r3, #0]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b25b      	sxtb	r3, r3
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	b25a      	sxtb	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	785b      	ldrb	r3, [r3, #1]
 8001832:	b25b      	sxtb	r3, r3
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	b25b      	sxtb	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b25b      	sxtb	r3, r3
 800183c:	b2da      	uxtb	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	701a      	strb	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	b2da      	uxtb	r2, r3
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3302      	adds	r3, #2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	109b      	asrs	r3, r3, #2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	b2da      	uxtb	r2, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3302      	adds	r3, #2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	b2da      	uxtb	r2, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3303      	adds	r3, #3
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	109b      	asrs	r3, r3, #2
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	b2da      	uxtb	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3303      	adds	r3, #3
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	711a      	strb	r2, [r3, #4]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	6039      	str	r1, [r7, #0]
 80018c0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80018c2:	23f4      	movs	r3, #244	@ 0xf4
 80018c4:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80018c6:	7bb8      	ldrb	r0, [r7, #14]
 80018c8:	f107 010d 	add.w	r1, r7, #13
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f7ff fbe1 	bl	8001096 <bme280_get_regs>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 80018d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d117      	bne.n	8001910 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80018e0:	7b7b      	ldrb	r3, [r7, #13]
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	f023 0303 	bic.w	r3, r3, #3
 80018e8:	b25a      	sxtb	r2, r3
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80018fc:	f107 010d 	add.w	r1, r7, #13
 8001900:	f107 000e 	add.w	r0, r7, #14
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	f7ff fbf5 	bl	80010f6 <bme280_set_regs>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001924:	f107 0110 	add.w	r1, r7, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2204      	movs	r2, #4
 800192c:	20f2      	movs	r0, #242	@ 0xf2
 800192e:	f7ff fbb2 	bl	8001096 <bme280_get_regs>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8001936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 800193e:	f107 0208 	add.w	r2, r7, #8
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff80 	bl	800184e <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fcf6 	bl	8001340 <bme280_soft_reset>
 8001954:	4603      	mov	r3, r0
 8001956:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 8001958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001960:	f107 0308 	add.w	r3, r7, #8
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f808 	bl	800197c <reload_device_settings>
 800196c:	4603      	mov	r3, r0
 800196e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001970:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	201f      	movs	r0, #31
 800198c:	f7ff fe14 	bl	80015b8 <set_osr_settings>
 8001990:	4603      	mov	r3, r0
 8001992:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8001994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d106      	bne.n	80019aa <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	201f      	movs	r0, #31
 80019a2:	f7ff fea6 	bl	80016f2 <set_filter_standby_settings>
 80019a6:	4603      	mov	r3, r0
 80019a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b08c      	sub	sp, #48	@ 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b44 <compensate_temperature+0x18c>)
 80019c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b48 <compensate_temperature+0x190>)
 80019d2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fd92 	bl	8000504 <__aeabi_ui2d>
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	4b59      	ldr	r3, [pc, #356]	@ (8001b4c <compensate_temperature+0x194>)
 80019e6:	f7fe ff31 	bl	800084c <__aeabi_ddiv>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	461d      	mov	r5, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fd84 	bl	8000504 <__aeabi_ui2d>
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b53      	ldr	r3, [pc, #332]	@ (8001b50 <compensate_temperature+0x198>)
 8001a02:	f7fe ff23 	bl	800084c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fc3b 	bl	8000288 <__aeabi_dsub>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_T2);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd7f 	bl	8000524 <__aeabi_i2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a2e:	f7fe fde3 	bl	80005f8 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd60 	bl	8000504 <__aeabi_ui2d>
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001a4c:	f7fe fefe 	bl	800084c <__aeabi_ddiv>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4614      	mov	r4, r2
 8001a56:	461d      	mov	r5, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd51 	bl	8000504 <__aeabi_ui2d>
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <compensate_temperature+0x19c>)
 8001a68:	f7fe fef0 	bl	800084c <__aeabi_ddiv>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fc08 	bl	8000288 <__aeabi_dsub>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a88:	f7fe fdb6 	bl	80005f8 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4614      	mov	r4, r2
 8001a92:	461d      	mov	r5, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd42 	bl	8000524 <__aeabi_i2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	f7fe fda6 	bl	80005f8 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8001ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ab8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001abc:	f7fe fbe6 	bl	800028c <__adddf3>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f7ff f846 	bl	8000b58 <__aeabi_d2iz>
 8001acc:	4602      	mov	r2, r0
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (var1 + var2) / 5120.0;
 8001ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ad6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ada:	f7fe fbd7 	bl	800028c <__adddf3>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <compensate_temperature+0x1a0>)
 8001aec:	f7fe feae 	bl	800084c <__aeabi_ddiv>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    if (temperature < temperature_min)
 8001af8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001afc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b00:	f7fe ffec 	bl	8000adc <__aeabi_dcmplt>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 8001b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001b12:	e00c      	b.n	8001b2e <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8001b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b1c:	f7fe fffc 	bl	8000b18 <__aeabi_dcmpgt>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8001b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    }

    return temperature;
 8001b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b32:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b36:	eeb0 0a47 	vmov.f32	s0, s14
 8001b3a:	eef0 0a67 	vmov.f32	s1, s15
 8001b3e:	3730      	adds	r7, #48	@ 0x30
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bdb0      	pop	{r4, r5, r7, pc}
 8001b44:	c0440000 	.word	0xc0440000
 8001b48:	40554000 	.word	0x40554000
 8001b4c:	40d00000 	.word	0x40d00000
 8001b50:	40900000 	.word	0x40900000
 8001b54:	40c00000 	.word	0x40c00000
 8001b58:	40b40000 	.word	0x40b40000
 8001b5c:	00000000 	.word	0x00000000

08001b60 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b090      	sub	sp, #64	@ 0x40
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8001b6a:	a3d9      	add	r3, pc, #868	@ (adr r3, 8001ed0 <compensate_pressure+0x370>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double pressure_max = 110000.0;
 8001b74:	a3d8      	add	r3, pc, #864	@ (adr r3, 8001ed8 <compensate_pressure+0x378>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double calib_variable = 0; //moja zmienna by skalibrować wynik z wartościami z internetu
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcc8 	bl	8000524 <__aeabi_i2d>
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b9c:	f7fe fe56 	bl	800084c <__aeabi_ddiv>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4bbe      	ldr	r3, [pc, #760]	@ (8001ea8 <compensate_pressure+0x348>)
 8001bae:	f7fe fb6b 	bl	8000288 <__aeabi_dsub>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bc2:	f7fe fd19 	bl	80005f8 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4614      	mov	r4, r2
 8001bcc:	461d      	mov	r5, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fca5 	bl	8000524 <__aeabi_i2d>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f7fe fd09 	bl	80005f8 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	4bae      	ldr	r3, [pc, #696]	@ (8001eac <compensate_pressure+0x34c>)
 8001bf4:	f7fe fe2a 	bl	800084c <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc8c 	bl	8000524 <__aeabi_i2d>
 8001c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c10:	f7fe fcf2 	bl	80005f8 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	f7fe fb34 	bl	800028c <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c2c:	f7fe fb2e 	bl	800028c <__adddf3>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	4b9c      	ldr	r3, [pc, #624]	@ (8001eb0 <compensate_pressure+0x350>)
 8001c3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c42:	f7fe fe03 	bl	800084c <__aeabi_ddiv>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4614      	mov	r4, r2
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc65 	bl	8000524 <__aeabi_i2d>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b95      	ldr	r3, [pc, #596]	@ (8001eb4 <compensate_pressure+0x354>)
 8001c60:	f7fe fcca 	bl	80005f8 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe fb0e 	bl	800028c <__adddf3>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc50 	bl	8000524 <__aeabi_i2d>
 8001c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c88:	f7fe fcb6 	bl	80005f8 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c98:	f7fe fcae 	bl	80005f8 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b83      	ldr	r3, [pc, #524]	@ (8001eb8 <compensate_pressure+0x358>)
 8001caa:	f7fe fdcf 	bl	800084c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc31 	bl	8000524 <__aeabi_i2d>
 8001cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cd6:	f7fe fad9 	bl	800028c <__adddf3>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b74      	ldr	r3, [pc, #464]	@ (8001eb8 <compensate_pressure+0x358>)
 8001ce8:	f7fe fdb0 	bl	800084c <__aeabi_ddiv>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8001eac <compensate_pressure+0x34c>)
 8001cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cfe:	f7fe fda5 	bl	800084c <__aeabi_ddiv>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b6b      	ldr	r3, [pc, #428]	@ (8001ebc <compensate_pressure+0x35c>)
 8001d10:	f7fe fabc 	bl	800028c <__adddf3>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4614      	mov	r4, r2
 8001d1a:	461d      	mov	r5, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	88db      	ldrh	r3, [r3, #6]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fbef 	bl	8000504 <__aeabi_ui2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	f7fe fc63 	bl	80005f8 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d46:	f7fe febf 	bl	8000ac8 <__aeabi_dcmpeq>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f040 80d5 	bne.w	8001efc <compensate_pressure+0x39c>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbd4 	bl	8000504 <__aeabi_ui2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	f04f 0000 	mov.w	r0, #0
 8001d64:	4956      	ldr	r1, [pc, #344]	@ (8001ec0 <compensate_pressure+0x360>)
 8001d66:	f7fe fa8f 	bl	8000288 <__aeabi_dsub>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	4b53      	ldr	r3, [pc, #332]	@ (8001ec4 <compensate_pressure+0x364>)
 8001d78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d7c:	f7fe fd66 	bl	800084c <__aeabi_ddiv>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001d88:	f7fe fa7e 	bl	8000288 <__aeabi_dsub>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	a342      	add	r3, pc, #264	@ (adr r3, 8001ea0 <compensate_pressure+0x340>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fc2d 	bl	80005f8 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001daa:	f7fe fd4f 	bl	800084c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbb1 	bl	8000524 <__aeabi_i2d>
 8001dc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001dc6:	f7fe fc17 	bl	80005f8 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001dd6:	f7fe fc0f 	bl	80005f8 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b38      	ldr	r3, [pc, #224]	@ (8001ec8 <compensate_pressure+0x368>)
 8001de8:	f7fe fd30 	bl	800084c <__aeabi_ddiv>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb92 	bl	8000524 <__aeabi_i2d>
 8001e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e04:	f7fe fbf8 	bl	80005f8 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	4b25      	ldr	r3, [pc, #148]	@ (8001eac <compensate_pressure+0x34c>)
 8001e16:	f7fe fd19 	bl	800084c <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0 + calib_variable;
 8001e22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e2a:	f7fe fa2f 	bl	800028c <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4614      	mov	r4, r2
 8001e34:	461d      	mov	r5, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb71 	bl	8000524 <__aeabi_i2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fa1f 	bl	800028c <__adddf3>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <compensate_pressure+0x36c>)
 8001e5c:	f7fe fcf6 	bl	800084c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e6c:	f7fe fa0e 	bl	800028c <__adddf3>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e78:	f7fe fa08 	bl	800028c <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        if (pressure < pressure_min)
 8001e84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001e8c:	f7fe fe26 	bl	8000adc <__aeabi_dcmplt>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d024      	beq.n	8001ee0 <compensate_pressure+0x380>
        {
            pressure = pressure_min;
 8001e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e9a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001e9e:	e031      	b.n	8001f04 <compensate_pressure+0x3a4>
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	40b86a00 	.word	0x40b86a00
 8001ea8:	40ef4000 	.word	0x40ef4000
 8001eac:	40e00000 	.word	0x40e00000
 8001eb0:	40100000 	.word	0x40100000
 8001eb4:	40f00000 	.word	0x40f00000
 8001eb8:	41200000 	.word	0x41200000
 8001ebc:	3ff00000 	.word	0x3ff00000
 8001ec0:	41300000 	.word	0x41300000
 8001ec4:	40b00000 	.word	0x40b00000
 8001ec8:	41e00000 	.word	0x41e00000
 8001ecc:	40300000 	.word	0x40300000
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40dd4c00 	.word	0x40dd4c00
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	40fadb00 	.word	0x40fadb00
        }
        else if (pressure > pressure_max)
 8001ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ee4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001ee8:	f7fe fe16 	bl	8000b18 <__aeabi_dcmpgt>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <compensate_pressure+0x3a4>
        {
            pressure = pressure_max;
 8001ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ef6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001efa:	e003      	b.n	8001f04 <compensate_pressure+0x3a4>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8001efc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f00:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }

    return pressure;
 8001f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f08:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f10:	eef0 0a67 	vmov.f32	s1, s15
 8001f14:	3740      	adds	r7, #64	@ 0x40
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1a:	bf00      	nop

08001f1c <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001f1c:	b5b0      	push	{r4, r5, r7, lr}
 8001f1e:	b094      	sub	sp, #80	@ 0x50
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double humidity_max = 100.0;
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	4b81      	ldr	r3, [pc, #516]	@ (800213c <compensate_humidity+0x220>)
 8001f38:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faef 	bl	8000524 <__aeabi_i2d>
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002140 <compensate_humidity+0x224>)
 8001f4c:	f7fe f99c 	bl	8000288 <__aeabi_dsub>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fae0 	bl	8000524 <__aeabi_i2d>
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b76      	ldr	r3, [pc, #472]	@ (8002144 <compensate_humidity+0x228>)
 8001f6a:	f7fe fb45 	bl	80005f8 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4614      	mov	r4, r2
 8001f74:	461d      	mov	r5, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fad1 	bl	8000524 <__aeabi_i2d>
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	4b70      	ldr	r3, [pc, #448]	@ (8002148 <compensate_humidity+0x22c>)
 8001f88:	f7fe fc60 	bl	800084c <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f98:	f7fe fb2e 	bl	80005f8 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	f7fe f972 	bl	800028c <__adddf3>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    var3 = uncomp_data->humidity - var2;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe faa5 	bl	8000504 <__aeabi_ui2d>
 8001fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fbe:	f7fe f963 	bl	8000288 <__aeabi_dsub>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe faa7 	bl	8000524 <__aeabi_i2d>
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b5c      	ldr	r3, [pc, #368]	@ (800214c <compensate_humidity+0x230>)
 8001fdc:	f7fe fc36 	bl	800084c <__aeabi_ddiv>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	7f1b      	ldrb	r3, [r3, #28]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa89 	bl	8000504 <__aeabi_ui2d>
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b56      	ldr	r3, [pc, #344]	@ (8002150 <compensate_humidity+0x234>)
 8001ff8:	f7fe fc28 	bl	800084c <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002008:	f7fe faf6 	bl	80005f8 <__aeabi_dmul>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	4b4e      	ldr	r3, [pc, #312]	@ (8002154 <compensate_humidity+0x238>)
 800201a:	f7fe f937 	bl	800028c <__adddf3>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa79 	bl	8000524 <__aeabi_i2d>
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b46      	ldr	r3, [pc, #280]	@ (8002150 <compensate_humidity+0x234>)
 8002038:	f7fe fc08 	bl	800084c <__aeabi_ddiv>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002048:	f7fe fad6 	bl	80005f8 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002058:	f7fe face 	bl	80005f8 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	4b3a      	ldr	r3, [pc, #232]	@ (8002154 <compensate_humidity+0x238>)
 800206a:	f7fe f90f 	bl	800028c <__adddf3>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8002076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800207a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800207e:	f7fe fabb 	bl	80005f8 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4614      	mov	r4, r2
 8002088:	461d      	mov	r5, r3
 800208a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800208e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002092:	f7fe fab1 	bl	80005f8 <__aeabi_dmul>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4620      	mov	r0, r4
 800209c:	4629      	mov	r1, r5
 800209e:	f7fe faab 	bl	80005f8 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	7e1b      	ldrb	r3, [r3, #24]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa28 	bl	8000504 <__aeabi_ui2d>
 80020b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b8:	f7fe fa9e 	bl	80005f8 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <compensate_humidity+0x23c>)
 80020ca:	f7fe fbbf 	bl	800084c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	f04f 0000 	mov.w	r0, #0
 80020d6:	491f      	ldr	r1, [pc, #124]	@ (8002154 <compensate_humidity+0x238>)
 80020d8:	f7fe f8d6 	bl	8000288 <__aeabi_dsub>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020e4:	f7fe fa88 	bl	80005f8 <__aeabi_dmul>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (humidity > humidity_max)
 80020f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80020f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80020f8:	f7fe fd0e 	bl	8000b18 <__aeabi_dcmpgt>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8002102:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002106:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800210a:	e00c      	b.n	8002126 <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 800210c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002110:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002114:	f7fe fce2 	bl	8000adc <__aeabi_dcmplt>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 800211e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002122:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    }

    return humidity;
 8002126:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800212a:	ec43 2b17 	vmov	d7, r2, r3
}
 800212e:	eeb0 0a47 	vmov.f32	s0, s14
 8002132:	eef0 0a67 	vmov.f32	s1, s15
 8002136:	3750      	adds	r7, #80	@ 0x50
 8002138:	46bd      	mov	sp, r7
 800213a:	bdb0      	pop	{r4, r5, r7, pc}
 800213c:	40590000 	.word	0x40590000
 8002140:	40f2c000 	.word	0x40f2c000
 8002144:	40500000 	.word	0x40500000
 8002148:	40d00000 	.word	0x40d00000
 800214c:	40f00000 	.word	0x40f00000
 8002150:	41900000 	.word	0x41900000
 8002154:	3ff00000 	.word	0x3ff00000
 8002158:	41200000 	.word	0x41200000

0800215c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	@ 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002164:	2388      	movs	r3, #136	@ 0x88
 8002166:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]
 800217a:	615a      	str	r2, [r3, #20]
 800217c:	831a      	strh	r2, [r3, #24]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800217e:	f107 010c 	add.w	r1, r7, #12
 8002182:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	221a      	movs	r2, #26
 800218a:	f7fe ff84 	bl	8001096 <bme280_get_regs>
 800218e:	4603      	mov	r3, r0
 8002190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BME280_OK)
 8002194:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002198:	2b00      	cmp	r3, #0
 800219a:	d11d      	bne.n	80021d8 <get_calib_data+0x7c>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f84a 	bl	800223c <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80021a8:	23e1      	movs	r3, #225	@ 0xe1
 80021aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80021ae:	f107 010c 	add.w	r1, r7, #12
 80021b2:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2207      	movs	r2, #7
 80021ba:	f7fe ff6c 	bl	8001096 <bme280_get_regs>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BME280_OK)
 80021c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <get_calib_data+0x7c>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f8ee 	bl	80023b4 <parse_humidity_calib_data>
        }
    }

    return rslt;
 80021d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3728      	adds	r7, #40	@ 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
 80021f6:	e016      	b.n	8002226 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	441a      	add	r2, r3
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	440b      	add	r3, r1
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	441a      	add	r2, r3
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4619      	mov	r1, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	440b      	add	r3, r1
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	3301      	adds	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
 8002226:	7dfa      	ldrb	r2, [r7, #23]
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	429a      	cmp	r2, r3
 800222c:	d3e4      	bcc.n	80021f8 <interleave_reg_addr+0x14>
    }
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	3310      	adds	r3, #16
 800224a:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3301      	adds	r3, #1
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b21b      	sxth	r3, r3
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b21a      	sxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b21b      	sxth	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	b21b      	sxth	r3, r3
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3303      	adds	r3, #3
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b21b      	sxth	r3, r3
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	b21a      	sxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3302      	adds	r3, #2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21a      	sxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3305      	adds	r3, #5
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b21b      	sxth	r3, r3
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	b21a      	sxth	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b21b      	sxth	r3, r3
 8002298:	4313      	orrs	r3, r2
 800229a:	b21a      	sxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3307      	adds	r3, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3306      	adds	r3, #6
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3309      	adds	r3, #9
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3308      	adds	r3, #8
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	330b      	adds	r3, #11
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	330a      	adds	r3, #10
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b21a      	sxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	330d      	adds	r3, #13
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	b21a      	sxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	330c      	adds	r3, #12
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b21b      	sxth	r3, r3
 800230a:	4313      	orrs	r3, r2
 800230c:	b21a      	sxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	330f      	adds	r3, #15
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b21b      	sxth	r3, r3
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	b21a      	sxth	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	330e      	adds	r3, #14
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b21b      	sxth	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b21a      	sxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3311      	adds	r3, #17
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b21b      	sxth	r3, r3
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	b21a      	sxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3310      	adds	r3, #16
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b21b      	sxth	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b21a      	sxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3313      	adds	r3, #19
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b21b      	sxth	r3, r3
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b21a      	sxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3312      	adds	r3, #18
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b21b      	sxth	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b21a      	sxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3315      	adds	r3, #21
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b21b      	sxth	r3, r3
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	b21a      	sxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3314      	adds	r3, #20
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b21b      	sxth	r3, r3
 800237a:	4313      	orrs	r3, r2
 800237c:	b21a      	sxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3317      	adds	r3, #23
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b21b      	sxth	r3, r3
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3316      	adds	r3, #22
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b21b      	sxth	r3, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	b21a      	sxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3319      	adds	r3, #25
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3310      	adds	r3, #16
 80023c2:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3301      	adds	r3, #1
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21a      	sxth	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3302      	adds	r3, #2
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3303      	adds	r3, #3
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b25b      	sxtb	r3, r3
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	827b      	strh	r3, [r7, #18]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b21b      	sxth	r3, r3
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	823b      	strh	r3, [r7, #16]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8002406:	8a7a      	ldrh	r2, [r7, #18]
 8002408:	8a3b      	ldrh	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	b21a      	sxth	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3305      	adds	r3, #5
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b25b      	sxtb	r3, r3
 800241a:	b29b      	uxth	r3, r3
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	b29b      	uxth	r3, r3
 8002420:	81fb      	strh	r3, [r7, #14]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	b2db      	uxtb	r3, r3
 800242c:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800242e:	89fa      	ldrh	r2, [r7, #14]
 8002430:	89bb      	ldrh	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	b21a      	sxth	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3306      	adds	r3, #6
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b25a      	sxtb	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002448:	bf00      	nop
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	460a      	mov	r2, r1
 800245e:	71fb      	strb	r3, [r7, #7]
 8002460:	4613      	mov	r3, r2
 8002462:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002468:	79fa      	ldrb	r2, [r7, #7]
 800246a:	79bb      	ldrb	r3, [r7, #6]
 800246c:	4013      	ands	r3, r2
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e001      	b.n	800247e <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <null_ptr_check+0x26>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <null_ptr_check+0x26>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <null_ptr_check+0x26>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80024b2:	23ff      	movs	r3, #255	@ 0xff
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e001      	b.n	80024bc <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80024bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <BME280_init>:

static struct bme280_dev bme;
static struct bme280_data comp_data;
static int8_t init_done;

int8_t BME280_init(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
	int8_t rslt = BME280_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	71fb      	strb	r3, [r7, #7]
	uint8_t settings_sel;
	init_done = BME280_E_DEV_NOT_FOUND;
 80024d6:	4b25      	ldr	r3, [pc, #148]	@ (800256c <BME280_init+0xa0>)
 80024d8:	22fe      	movs	r2, #254	@ 0xfe
 80024da:	701a      	strb	r2, [r3, #0]

	bme.dev_id = (BME280_I2C_ADDR_PRIM << 1);
 80024dc:	4b24      	ldr	r3, [pc, #144]	@ (8002570 <BME280_init+0xa4>)
 80024de:	22ec      	movs	r2, #236	@ 0xec
 80024e0:	705a      	strb	r2, [r3, #1]
	bme.intf = BME280_I2C_INTF;
 80024e2:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <BME280_init+0xa4>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	709a      	strb	r2, [r3, #2]
	bme.read = i2c_read;
 80024e8:	4b21      	ldr	r3, [pc, #132]	@ (8002570 <BME280_init+0xa4>)
 80024ea:	4a22      	ldr	r2, [pc, #136]	@ (8002574 <BME280_init+0xa8>)
 80024ec:	605a      	str	r2, [r3, #4]
	bme.write = i2c_write;
 80024ee:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <BME280_init+0xa4>)
 80024f0:	4a21      	ldr	r2, [pc, #132]	@ (8002578 <BME280_init+0xac>)
 80024f2:	609a      	str	r2, [r3, #8]
	bme.delay_ms = delay_ms;
 80024f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002570 <BME280_init+0xa4>)
 80024f6:	4a21      	ldr	r2, [pc, #132]	@ (800257c <BME280_init+0xb0>)
 80024f8:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&bme);
 80024fa:	481d      	ldr	r0, [pc, #116]	@ (8002570 <BME280_init+0xa4>)
 80024fc:	f7fe fd80 	bl	8001000 <bme280_init>
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]

	bme.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <BME280_init+0xa4>)
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	bme.settings.osr_p = BME280_OVERSAMPLING_16X;
 800250c:	4b18      	ldr	r3, [pc, #96]	@ (8002570 <BME280_init+0xa4>)
 800250e:	2205      	movs	r2, #5
 8002510:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	bme.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002514:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <BME280_init+0xa4>)
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	bme.settings.filter = BME280_FILTER_COEFF_16;
 800251c:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <BME280_init+0xa4>)
 800251e:	2204      	movs	r2, #4
 8002520:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	bme.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <BME280_init+0xa4>)
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if (rslt == BME280_OK) {
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d115      	bne.n	8002560 <BME280_init+0x94>
		settings_sel = BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL |
 8002534:	231f      	movs	r3, #31
 8002536:	71bb      	strb	r3, [r7, #6]
		               BME280_OSR_HUM_SEL | BME280_STANDBY_SEL | BME280_FILTER_SEL;

		rslt = bme280_set_sensor_settings(settings_sel, &bme);
 8002538:	79bb      	ldrb	r3, [r7, #6]
 800253a:	490d      	ldr	r1, [pc, #52]	@ (8002570 <BME280_init+0xa4>)
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fe53 	bl	80011e8 <bme280_set_sensor_settings>
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]

		if (rslt == BME280_OK) {
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <BME280_init+0x94>
			rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme);
 800254e:	4908      	ldr	r1, [pc, #32]	@ (8002570 <BME280_init+0xa4>)
 8002550:	2003      	movs	r0, #3
 8002552:	f7fe fe9e 	bl	8001292 <bme280_set_sensor_mode>
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
			init_done = rslt;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <BME280_init+0xa0>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	7013      	strb	r3, [r2, #0]
		}
	}

	return rslt;
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000298 	.word	0x20000298
 8002570:	2000023c 	.word	0x2000023c
 8002574:	08002675 	.word	0x08002675
 8002578:	080026c1 	.word	0x080026c1
 800257c:	0800265d 	.word	0x0800265d

08002580 <BME280_read_data>:

int8_t BME280_read_data(void) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
	int8_t rslt = BME280_E_COMM_FAIL;
 8002586:	23fc      	movs	r3, #252	@ 0xfc
 8002588:	71fb      	strb	r3, [r7, #7]

	if (init_done == BME280_OK) {
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <BME280_read_data+0x48>)
 800258c:	f993 3000 	ldrsb.w	r3, [r3]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d112      	bne.n	80025ba <BME280_read_data+0x3a>
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 8002594:	4a0d      	ldr	r2, [pc, #52]	@ (80025cc <BME280_read_data+0x4c>)
 8002596:	490e      	ldr	r1, [pc, #56]	@ (80025d0 <BME280_read_data+0x50>)
 8002598:	2007      	movs	r0, #7
 800259a:	f7fe ff1c 	bl	80013d6 <bme280_get_sensor_data>
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
		bme.delay_ms(100);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <BME280_read_data+0x4c>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2064      	movs	r0, #100	@ 0x64
 80025a8:	4798      	blx	r3
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80025aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025ae:	4809      	ldr	r0, [pc, #36]	@ (80025d4 <BME280_read_data+0x54>)
 80025b0:	f001 fed9 	bl	8004366 <HAL_GPIO_TogglePin>
		print_sensor_data(&comp_data);
 80025b4:	4806      	ldr	r0, [pc, #24]	@ (80025d0 <BME280_read_data+0x50>)
 80025b6:	f000 f80f 	bl	80025d8 <print_sensor_data>
	}

	return rslt;
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000298 	.word	0x20000298
 80025cc:	2000023c 	.word	0x2000023c
 80025d0:	20000280 	.word	0x20000280
 80025d4:	40020c00 	.word	0x40020c00

080025d8 <print_sensor_data>:

void print_sensor_data(struct bme280_data *comp_data) {
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	b0a9      	sub	sp, #164	@ 0xa4
 80025dc:	af06      	add	r7, sp, #24
 80025de:	6078      	str	r0, [r7, #4]
#ifdef BME280_FLOAT_ENABLE
	char message[128];
	snprintf(message, sizeof(message),
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		"\r\n--- BME280 Sensor Data ---\r\n"
		"Temperature: %.2f °C\r\n"
		"Pressure: %.2f hPa\r\n"
		"Humidity: %.2f %%\r\n",
		comp_data->temperature,
		comp_data->pressure / 100.0f,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	e9d3 0100 	ldrd	r0, r1, [r3]
	snprintf(message, sizeof(message),
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b16      	ldr	r3, [pc, #88]	@ (800264c <print_sensor_data+0x74>)
 80025f2:	f7fe f92b 	bl	800084c <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002604:	f107 0608 	add.w	r6, r7, #8
 8002608:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800260c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002610:	e9cd 4500 	strd	r4, r5, [sp]
 8002614:	4a0e      	ldr	r2, [pc, #56]	@ (8002650 <print_sensor_data+0x78>)
 8002616:	2180      	movs	r1, #128	@ 0x80
 8002618:	4630      	mov	r0, r6
 800261a:	f008 fe99 	bl	800b350 <sniprintf>
		comp_data->humidity);

	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800261e:	f107 0308 	add.w	r3, r7, #8
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd fe24 	bl	8000270 <strlen>
 8002628:	4603      	mov	r3, r0
 800262a:	b29a      	uxth	r2, r3
 800262c:	f107 0108 	add.w	r1, r7, #8
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	4807      	ldr	r0, [pc, #28]	@ (8002654 <print_sensor_data+0x7c>)
 8002636:	f005 fa7c 	bl	8007b32 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800263a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800263e:	4806      	ldr	r0, [pc, #24]	@ (8002658 <print_sensor_data+0x80>)
 8002640:	f001 fe91 	bl	8004366 <HAL_GPIO_TogglePin>
#else
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nTemperature:\r\n", 16, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nPressure:\r\n", 14, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nHumidity:\r\n", 14, HAL_MAX_DELAY);
#endif
}
 8002644:	bf00      	nop
 8002646:	378c      	adds	r7, #140	@ 0x8c
 8002648:	46bd      	mov	sp, r7
 800264a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800264c:	40590000 	.word	0x40590000
 8002650:	0800dd88 	.word	0x0800dd88
 8002654:	200003e8 	.word	0x200003e8
 8002658:	40020c00 	.word	0x40020c00

0800265c <delay_ms>:

void delay_ms(uint32_t period) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 ffbf 	bl	80035e8 <HAL_Delay>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <i2c_read>:

int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af04      	add	r7, sp, #16
 800267a:	603a      	str	r2, [r7, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
 8002682:	460b      	mov	r3, r1
 8002684:	71bb      	strb	r3, [r7, #6]
 8002686:	4613      	mov	r3, r2
 8002688:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c3, dev_id, reg_addr, 1, reg_data, len, 100) == HAL_OK ? 0 : -1;
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	b299      	uxth	r1, r3
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	b29a      	uxth	r2, r3
 8002692:	2364      	movs	r3, #100	@ 0x64
 8002694:	9302      	str	r3, [sp, #8]
 8002696:	88bb      	ldrh	r3, [r7, #4]
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2301      	movs	r3, #1
 80026a0:	4806      	ldr	r0, [pc, #24]	@ (80026bc <i2c_read+0x48>)
 80026a2:	f002 f8b9 	bl	8004818 <HAL_I2C_Mem_Read>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <i2c_read+0x3c>
 80026ac:	2300      	movs	r3, #0
 80026ae:	e001      	b.n	80026b4 <i2c_read+0x40>
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200002f0 	.word	0x200002f0

080026c0 <i2c_write>:

int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af04      	add	r7, sp, #16
 80026c6:	603a      	str	r2, [r7, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	460b      	mov	r3, r1
 80026d0:	71bb      	strb	r3, [r7, #6]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c3, dev_id, reg_addr, 1, reg_data, len, 100) == HAL_OK ? 0 : -1;
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	b299      	uxth	r1, r3
 80026da:	79bb      	ldrb	r3, [r7, #6]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	2364      	movs	r3, #100	@ 0x64
 80026e0:	9302      	str	r3, [sp, #8]
 80026e2:	88bb      	ldrh	r3, [r7, #4]
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2301      	movs	r3, #1
 80026ec:	4806      	ldr	r0, [pc, #24]	@ (8002708 <i2c_write+0x48>)
 80026ee:	f001 ff99 	bl	8004624 <HAL_I2C_Mem_Write>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <i2c_write+0x3c>
 80026f8:	2300      	movs	r3, #0
 80026fa:	e001      	b.n	8002700 <i2c_write+0x40>
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200002f0 	.word	0x200002f0

0800270c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	@ 0x30
 8002710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	4b72      	ldr	r3, [pc, #456]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4a71      	ldr	r2, [pc, #452]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 800272c:	f043 0310 	orr.w	r3, r3, #16
 8002730:	6313      	str	r3, [r2, #48]	@ 0x30
 8002732:	4b6f      	ldr	r3, [pc, #444]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	4b6b      	ldr	r3, [pc, #428]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a6a      	ldr	r2, [pc, #424]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b68      	ldr	r3, [pc, #416]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b64      	ldr	r3, [pc, #400]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4a63      	ldr	r2, [pc, #396]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4b61      	ldr	r3, [pc, #388]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b5d      	ldr	r3, [pc, #372]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a5c      	ldr	r2, [pc, #368]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b5a      	ldr	r3, [pc, #360]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b56      	ldr	r3, [pc, #344]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	4a55      	ldr	r2, [pc, #340]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a2:	4b53      	ldr	r3, [pc, #332]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	4b4f      	ldr	r3, [pc, #316]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	4a4e      	ldr	r2, [pc, #312]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027be:	4b4c      	ldr	r3, [pc, #304]	@ (80028f0 <MX_GPIO_Init+0x1e4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2108      	movs	r1, #8
 80027ce:	4849      	ldr	r0, [pc, #292]	@ (80028f4 <MX_GPIO_Init+0x1e8>)
 80027d0:	f001 fdb0 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80027d4:	2201      	movs	r2, #1
 80027d6:	2101      	movs	r1, #1
 80027d8:	4847      	ldr	r0, [pc, #284]	@ (80028f8 <MX_GPIO_Init+0x1ec>)
 80027da:	f001 fdab 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80027de:	2200      	movs	r2, #0
 80027e0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80027e4:	4845      	ldr	r0, [pc, #276]	@ (80028fc <MX_GPIO_Init+0x1f0>)
 80027e6:	f001 fda5 	bl	8004334 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80027ea:	2308      	movs	r3, #8
 80027ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	4619      	mov	r1, r3
 8002800:	483c      	ldr	r0, [pc, #240]	@ (80028f4 <MX_GPIO_Init+0x1e8>)
 8002802:	f001 fbfb 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002806:	2301      	movs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280a:	2301      	movs	r3, #1
 800280c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002816:	f107 031c 	add.w	r3, r7, #28
 800281a:	4619      	mov	r1, r3
 800281c:	4836      	ldr	r0, [pc, #216]	@ (80028f8 <MX_GPIO_Init+0x1ec>)
 800281e:	f001 fbed 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002822:	2308      	movs	r3, #8
 8002824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002832:	2305      	movs	r3, #5
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002836:	f107 031c 	add.w	r3, r7, #28
 800283a:	4619      	mov	r1, r3
 800283c:	482e      	ldr	r0, [pc, #184]	@ (80028f8 <MX_GPIO_Init+0x1ec>)
 800283e:	f001 fbdd 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002842:	2301      	movs	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002846:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800284a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	482a      	ldr	r0, [pc, #168]	@ (8002900 <MX_GPIO_Init+0x1f4>)
 8002858:	f001 fbd0 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800285c:	2304      	movs	r3, #4
 800285e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	4825      	ldr	r0, [pc, #148]	@ (8002904 <MX_GPIO_Init+0x1f8>)
 8002870:	f001 fbc4 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002886:	2305      	movs	r3, #5
 8002888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4619      	mov	r1, r3
 8002890:	481c      	ldr	r0, [pc, #112]	@ (8002904 <MX_GPIO_Init+0x1f8>)
 8002892:	f001 fbb3 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002896:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800289a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289c:	2301      	movs	r3, #1
 800289e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	4619      	mov	r1, r3
 80028ae:	4813      	ldr	r0, [pc, #76]	@ (80028fc <MX_GPIO_Init+0x1f0>)
 80028b0:	f001 fba4 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80028b4:	2320      	movs	r3, #32
 80028b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	480d      	ldr	r0, [pc, #52]	@ (80028fc <MX_GPIO_Init+0x1f0>)
 80028c8:	f001 fb98 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80028cc:	2302      	movs	r3, #2
 80028ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80028d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	4804      	ldr	r0, [pc, #16]	@ (80028f4 <MX_GPIO_Init+0x1e8>)
 80028e2:	f001 fb8b 	bl	8003ffc <HAL_GPIO_Init>

}
 80028e6:	bf00      	nop
 80028e8:	3730      	adds	r7, #48	@ 0x30
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400

08002908 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800290c:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <MX_I2C1_Init+0x50>)
 800290e:	4a13      	ldr	r2, [pc, #76]	@ (800295c <MX_I2C1_Init+0x54>)
 8002910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002912:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002914:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <MX_I2C1_Init+0x58>)
 8002916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002918:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <MX_I2C1_Init+0x50>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800291e:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002924:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002926:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800292a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <MX_I2C1_Init+0x50>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002932:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002938:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <MX_I2C1_Init+0x50>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002944:	4804      	ldr	r0, [pc, #16]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002946:	f001 fd29 	bl	800439c <HAL_I2C_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002950:	f000 fa50 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	2000029c 	.word	0x2000029c
 800295c:	40005400 	.word	0x40005400
 8002960:	000186a0 	.word	0x000186a0

08002964 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002968:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <MX_I2C3_Init+0x50>)
 800296a:	4a13      	ldr	r2, [pc, #76]	@ (80029b8 <MX_I2C3_Init+0x54>)
 800296c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800296e:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <MX_I2C3_Init+0x50>)
 8002970:	4a12      	ldr	r2, [pc, #72]	@ (80029bc <MX_I2C3_Init+0x58>)
 8002972:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002974:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <MX_I2C3_Init+0x50>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800297a:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <MX_I2C3_Init+0x50>)
 800297c:	2200      	movs	r2, #0
 800297e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <MX_I2C3_Init+0x50>)
 8002982:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002986:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002988:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <MX_I2C3_Init+0x50>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <MX_I2C3_Init+0x50>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002994:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <MX_I2C3_Init+0x50>)
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <MX_I2C3_Init+0x50>)
 800299c:	2200      	movs	r2, #0
 800299e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029a0:	4804      	ldr	r0, [pc, #16]	@ (80029b4 <MX_I2C3_Init+0x50>)
 80029a2:	f001 fcfb 	bl	800439c <HAL_I2C_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80029ac:	f000 fa22 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200002f0 	.word	0x200002f0
 80029b8:	40005c00 	.word	0x40005c00
 80029bc:	000186a0 	.word	0x000186a0

080029c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	@ 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a42      	ldr	r2, [pc, #264]	@ (8002ae8 <HAL_I2C_MspInit+0x128>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d12d      	bne.n	8002a3e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a40      	ldr	r2, [pc, #256]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80029fe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a04:	2312      	movs	r3, #18
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a10:	2304      	movs	r3, #4
 8002a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4835      	ldr	r0, [pc, #212]	@ (8002af0 <HAL_I2C_MspInit+0x130>)
 8002a1c:	f001 faee 	bl	8003ffc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	4b31      	ldr	r3, [pc, #196]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	4a30      	ldr	r2, [pc, #192]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002a2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a30:	4b2e      	ldr	r3, [pc, #184]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002a3c:	e050      	b.n	8002ae0 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2c      	ldr	r2, [pc, #176]	@ (8002af4 <HAL_I2C_MspInit+0x134>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d14b      	bne.n	8002ae0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	4a26      	ldr	r2, [pc, #152]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a58:	4b24      	ldr	r3, [pc, #144]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	4b20      	ldr	r3, [pc, #128]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a74:	4b1d      	ldr	r3, [pc, #116]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a86:	2312      	movs	r3, #18
 8002a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a92:	2304      	movs	r3, #4
 8002a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4816      	ldr	r0, [pc, #88]	@ (8002af8 <HAL_I2C_MspInit+0x138>)
 8002a9e:	f001 faad 	bl	8003ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002aa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa8:	2312      	movs	r3, #18
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	480f      	ldr	r0, [pc, #60]	@ (8002afc <HAL_I2C_MspInit+0x13c>)
 8002ac0:	f001 fa9c 	bl	8003ffc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	4a07      	ldr	r2, [pc, #28]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002ace:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_I2C_MspInit+0x12c>)
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3730      	adds	r7, #48	@ 0x30
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40005400 	.word	0x40005400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40005c00 	.word	0x40005c00
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020000 	.word	0x40020000

08002b00 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002b04:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b06:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <MX_I2S3_Init+0x58>)
 8002b08:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b10:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b24:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b28:	4a0c      	ldr	r2, [pc, #48]	@ (8002b5c <MX_I2S3_Init+0x5c>)
 8002b2a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002b32:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002b3e:	4805      	ldr	r0, [pc, #20]	@ (8002b54 <MX_I2S3_Init+0x54>)
 8002b40:	f002 fc50 	bl	80053e4 <HAL_I2S_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002b4a:	f000 f953 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000344 	.word	0x20000344
 8002b58:	40003c00 	.word	0x40003c00
 8002b5c:	00017700 	.word	0x00017700

08002b60 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08e      	sub	sp, #56	@ 0x38
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a31      	ldr	r2, [pc, #196]	@ (8002c50 <HAL_I2S_MspInit+0xf0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d15a      	bne.n	8002c46 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002b90:	2301      	movs	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002b94:	23c0      	movs	r3, #192	@ 0xc0
 8002b96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 fdab 	bl	80076fc <HAL_RCCEx_PeriphCLKConfig>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002bac:	f000 f922 	bl	8002df4 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <HAL_I2S_MspInit+0xf4>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	4a26      	ldr	r2, [pc, #152]	@ (8002c54 <HAL_I2S_MspInit+0xf4>)
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc0:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <HAL_I2S_MspInit+0xf4>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <HAL_I2S_MspInit+0xf4>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_I2S_MspInit+0xf4>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c54 <HAL_I2S_MspInit+0xf4>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_I2S_MspInit+0xf4>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf0:	4a18      	ldr	r2, [pc, #96]	@ (8002c54 <HAL_I2S_MspInit+0xf4>)
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf8:	4b16      	ldr	r3, [pc, #88]	@ (8002c54 <HAL_I2S_MspInit+0xf4>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002c04:	2310      	movs	r3, #16
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c14:	2306      	movs	r3, #6
 8002c16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	480e      	ldr	r0, [pc, #56]	@ (8002c58 <HAL_I2S_MspInit+0xf8>)
 8002c20:	f001 f9ec 	bl	8003ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002c24:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c36:	2306      	movs	r3, #6
 8002c38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4806      	ldr	r0, [pc, #24]	@ (8002c5c <HAL_I2S_MspInit+0xfc>)
 8002c42:	f001 f9db 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002c46:	bf00      	nop
 8002c48:	3738      	adds	r7, #56	@ 0x38
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40003c00 	.word	0x40003c00
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020800 	.word	0x40020800

08002c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b08c      	sub	sp, #48	@ 0x30
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c66:	f000 fc4d 	bl	8003504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c6a:	f000 f859 	bl	8002d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c6e:	f7ff fd4d 	bl	800270c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c72:	f7ff fe49 	bl	8002908 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002c76:	f7ff ff43 	bl	8002b00 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002c7a:	f000 f9ef 	bl	800305c <MX_SPI1_Init>
  MX_I2C3_Init();
 8002c7e:	f7ff fe71 	bl	8002964 <MX_I2C3_Init>
  MX_ADC1_Init();
 8002c82:	f7fe f927 	bl	8000ed4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002c86:	f000 fba1 	bl	80033cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 // inicjalizacja czujnika BME280
  if(BME280_init() != BME280_OK) {
 8002c8a:	f7ff fc1f 	bl	80024cc <BME280_init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d018      	beq.n	8002cc6 <main+0x66>
	  char err1[] = "Blad inicjalizacji!\r\n";
 8002c94:	4b1f      	ldr	r3, [pc, #124]	@ (8002d14 <main+0xb4>)
 8002c96:	f107 0418 	add.w	r4, r7, #24
 8002c9a:	461d      	mov	r5, r3
 8002c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ca4:	6020      	str	r0, [r4, #0]
 8002ca6:	3404      	adds	r4, #4
 8002ca8:	8021      	strh	r1, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)err1, strlen(err1), HAL_MAX_DELAY);
 8002caa:	f107 0318 	add.w	r3, r7, #24
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fade 	bl	8000270 <strlen>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	f107 0118 	add.w	r1, r7, #24
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	4815      	ldr	r0, [pc, #84]	@ (8002d18 <main+0xb8>)
 8002cc2:	f004 ff36 	bl	8007b32 <HAL_UART_Transmit>
  }
  MQ9_calbration();
 8002cc6:	f000 f89b 	bl	8002e00 <MQ9_calbration>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //odczyt danych z czujnika (można zaobserowować przez putty)
	  if(BME280_read_data() != BME280_OK) {
 8002cca:	f7ff fc59 	bl	8002580 <BME280_read_data>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d018      	beq.n	8002d06 <main+0xa6>
		  char err2[] = "Blad odczytu BME280!\r\n";
 8002cd4:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <main+0xbc>)
 8002cd6:	463c      	mov	r4, r7
 8002cd8:	461d      	mov	r5, r3
 8002cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ce2:	6020      	str	r0, [r4, #0]
 8002ce4:	3404      	adds	r4, #4
 8002ce6:	8021      	strh	r1, [r4, #0]
 8002ce8:	3402      	adds	r4, #2
 8002cea:	0c0b      	lsrs	r3, r1, #16
 8002cec:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)err2, strlen(err2), HAL_MAX_DELAY);
 8002cee:	463b      	mov	r3, r7
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fabd 	bl	8000270 <strlen>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4639      	mov	r1, r7
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	4805      	ldr	r0, [pc, #20]	@ (8002d18 <main+0xb8>)
 8002d02:	f004 ff16 	bl	8007b32 <HAL_UART_Transmit>
	  }
	  MQ9_read_data();
 8002d06:	f000 f917 	bl	8002f38 <MQ9_read_data>
	  HAL_Delay(4000);
 8002d0a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002d0e:	f000 fc6b 	bl	80035e8 <HAL_Delay>
	  if(BME280_read_data() != BME280_OK) {
 8002d12:	e7da      	b.n	8002cca <main+0x6a>
 8002d14:	0800dde8 	.word	0x0800dde8
 8002d18:	200003e8 	.word	0x200003e8
 8002d1c:	0800de00 	.word	0x0800de00

08002d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b094      	sub	sp, #80	@ 0x50
 8002d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d26:	f107 0320 	add.w	r3, r7, #32
 8002d2a:	2230      	movs	r2, #48	@ 0x30
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f008 fb87 	bl	800b442 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <SystemClock_Config+0xcc>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	4a27      	ldr	r2, [pc, #156]	@ (8002dec <SystemClock_Config+0xcc>)
 8002d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d54:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <SystemClock_Config+0xcc>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <SystemClock_Config+0xd0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a21      	ldr	r2, [pc, #132]	@ (8002df0 <SystemClock_Config+0xd0>)
 8002d6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <SystemClock_Config+0xd0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d86:	2302      	movs	r3, #2
 8002d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d90:	2308      	movs	r3, #8
 8002d92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d94:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002d98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d9e:	2307      	movs	r3, #7
 8002da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da2:	f107 0320 	add.w	r3, r7, #32
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 f810 	bl	8006dcc <HAL_RCC_OscConfig>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002db2:	f000 f81f 	bl	8002df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db6:	230f      	movs	r3, #15
 8002db8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dc2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	2105      	movs	r1, #5
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f004 fa71 	bl	80072bc <HAL_RCC_ClockConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002de0:	f000 f808 	bl	8002df4 <Error_Handler>
  }
}
 8002de4:	bf00      	nop
 8002de6:	3750      	adds	r7, #80	@ 0x50
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000

08002df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df8:	b672      	cpsid	i
}
 8002dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dfc:	bf00      	nop
 8002dfe:	e7fd      	b.n	8002dfc <Error_Handler+0x8>

08002e00 <MQ9_calbration>:

extern ADC_HandleTypeDef hadc1;

static float R0 = 1.0f;

int8_t MQ9_calbration(void) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b096      	sub	sp, #88	@ 0x58
 8002e04:	af00      	add	r7, sp, #0
    float sensorValue = 0.0f;
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	657b      	str	r3, [r7, #84]	@ 0x54
    int currentValue;
    char buffer[64];

    HAL_ADC_Start(&hadc1);
 8002e0c:	4843      	ldr	r0, [pc, #268]	@ (8002f1c <MQ9_calbration+0x11c>)
 8002e0e:	f000 fc53 	bl	80036b8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 30);
 8002e12:	211e      	movs	r1, #30
 8002e14:	4841      	ldr	r0, [pc, #260]	@ (8002f1c <MQ9_calbration+0x11c>)
 8002e16:	f000 fd54 	bl	80038c2 <HAL_ADC_PollForConversion>

    for (int x = 0; x < 10; x++) {
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e1e:	e02b      	b.n	8002e78 <MQ9_calbration+0x78>
        HAL_ADC_Start(&hadc1);
 8002e20:	483e      	ldr	r0, [pc, #248]	@ (8002f1c <MQ9_calbration+0x11c>)
 8002e22:	f000 fc49 	bl	80036b8 <HAL_ADC_Start>
        currentValue = HAL_ADC_GetValue(&hadc1);
 8002e26:	483d      	ldr	r0, [pc, #244]	@ (8002f1c <MQ9_calbration+0x11c>)
 8002e28:	f000 fdd6 	bl	80039d8 <HAL_ADC_GetValue>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        sensorValue += currentValue;
 8002e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e42:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

        snprintf(buffer, sizeof(buffer), "\r\nMQ-9 calibration: %d", currentValue);
 8002e46:	1d38      	adds	r0, r7, #4
 8002e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e4a:	4a35      	ldr	r2, [pc, #212]	@ (8002f20 <MQ9_calbration+0x120>)
 8002e4c:	2140      	movs	r1, #64	@ 0x40
 8002e4e:	f008 fa7f 	bl	800b350 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fa0b 	bl	8000270 <strlen>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	1d39      	adds	r1, r7, #4
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
 8002e64:	482f      	ldr	r0, [pc, #188]	@ (8002f24 <MQ9_calbration+0x124>)
 8002e66:	f004 fe64 	bl	8007b32 <HAL_UART_Transmit>
        HAL_Delay(1000);
 8002e6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e6e:	f000 fbbb 	bl	80035e8 <HAL_Delay>
    for (int x = 0; x < 10; x++) {
 8002e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e74:	3301      	adds	r3, #1
 8002e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e7a:	2b09      	cmp	r3, #9
 8002e7c:	ddd0      	ble.n	8002e20 <MQ9_calbration+0x20>
    }

    sensorValue /= 10.0;
 8002e7e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002e82:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e8a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    currentValue = sensorValue;
 8002e8e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e96:	ee17 3a90 	vmov	r3, s15
 8002e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    snprintf(buffer, sizeof(buffer), "\r\nMQ-9 after calibration: %d", currentValue);
 8002e9c:	1d38      	adds	r0, r7, #4
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ea0:	4a21      	ldr	r2, [pc, #132]	@ (8002f28 <MQ9_calbration+0x128>)
 8002ea2:	2140      	movs	r1, #64	@ 0x40
 8002ea4:	f008 fa54 	bl	800b350 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd f9e0 	bl	8000270 <strlen>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	1d39      	adds	r1, r7, #4
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	481a      	ldr	r0, [pc, #104]	@ (8002f24 <MQ9_calbration+0x124>)
 8002ebc:	f004 fe39 	bl	8007b32 <HAL_UART_Transmit>

    HAL_ADC_Stop(&hadc1);
 8002ec0:	4816      	ldr	r0, [pc, #88]	@ (8002f1c <MQ9_calbration+0x11c>)
 8002ec2:	f000 fccb 	bl	800385c <HAL_ADC_Stop>

    float voltage = (sensorValue * VREF) / ADC_RES;
 8002ec6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002eca:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002f2c <MQ9_calbration+0x12c>
 8002ece:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ed2:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002f30 <MQ9_calbration+0x130>
 8002ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eda:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float rs = RL * (VREF - voltage) / voltage;
 8002ede:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002f2c <MQ9_calbration+0x12c>
 8002ee2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002eee:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ef2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002efa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    R0 = rs / 10.0f;
 8002efe:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002f02:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <MQ9_calbration+0x134>)
 8002f0c:	edc3 7a00 	vstr	s15, [r3]

    return 0;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3758      	adds	r7, #88	@ 0x58
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200001f4 	.word	0x200001f4
 8002f20:	0800de18 	.word	0x0800de18
 8002f24:	200003e8 	.word	0x200003e8
 8002f28:	0800de30 	.word	0x0800de30
 8002f2c:	40533333 	.word	0x40533333
 8002f30:	457ff000 	.word	0x457ff000
 8002f34:	20000000 	.word	0x20000000

08002f38 <MQ9_read_data>:

int8_t MQ9_read_data(void) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002f3e:	4828      	ldr	r0, [pc, #160]	@ (8002fe0 <MQ9_read_data+0xa8>)
 8002f40:	f000 fbba 	bl	80036b8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 30);
 8002f44:	211e      	movs	r1, #30
 8002f46:	4826      	ldr	r0, [pc, #152]	@ (8002fe0 <MQ9_read_data+0xa8>)
 8002f48:	f000 fcbb 	bl	80038c2 <HAL_ADC_PollForConversion>
    float sensorValue = HAL_ADC_GetValue(&hadc1);
 8002f4c:	4824      	ldr	r0, [pc, #144]	@ (8002fe0 <MQ9_read_data+0xa8>)
 8002f4e:	f000 fd43 	bl	80039d8 <HAL_ADC_GetValue>
 8002f52:	ee07 0a90 	vmov	s15, r0
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	edc7 7a05 	vstr	s15, [r7, #20]
    HAL_ADC_Stop(&hadc1);
 8002f5e:	4820      	ldr	r0, [pc, #128]	@ (8002fe0 <MQ9_read_data+0xa8>)
 8002f60:	f000 fc7c 	bl	800385c <HAL_ADC_Stop>

    float voltage = (sensorValue * VREF) / ADC_RES;
 8002f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f68:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002fe4 <MQ9_read_data+0xac>
 8002f6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f70:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002fe8 <MQ9_read_data+0xb0>
 8002f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f78:	edc7 7a04 	vstr	s15, [r7, #16]
    float rs = RL * (VREF - voltage) / voltage;
 8002f7c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002fe4 <MQ9_read_data+0xac>
 8002f80:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f88:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002f8c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f90:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f98:	edc7 7a03 	vstr	s15, [r7, #12]
    float ratio = rs / R0;
 8002f9c:	4b13      	ldr	r3, [pc, #76]	@ (8002fec <MQ9_read_data+0xb4>)
 8002f9e:	ed93 7a00 	vldr	s14, [r3]
 8002fa2:	edd7 6a03 	vldr	s13, [r7, #12]
 8002fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002faa:	edc7 7a02 	vstr	s15, [r7, #8]

    float ppm = 1000 * powf(ratio, -1.8f);
 8002fae:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002ff0 <MQ9_read_data+0xb8>
 8002fb2:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fb6:	f00a fb13 	bl	800d5e0 <powf>
 8002fba:	eef0 7a40 	vmov.f32	s15, s0
 8002fbe:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002ff4 <MQ9_read_data+0xbc>
 8002fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc6:	edc7 7a01 	vstr	s15, [r7, #4]
    MQ9_print_sensor_data(ppm, ratio);
 8002fca:	edd7 0a02 	vldr	s1, [r7, #8]
 8002fce:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fd2:	f000 f811 	bl	8002ff8 <MQ9_print_sensor_data>
    return 0;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	200001f4 	.word	0x200001f4
 8002fe4:	40533333 	.word	0x40533333
 8002fe8:	457ff000 	.word	0x457ff000
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	bfe66666 	.word	0xbfe66666
 8002ff4:	447a0000 	.word	0x447a0000

08002ff8 <MQ9_print_sensor_data>:

void MQ9_print_sensor_data(float ppm_val, float ratio_val) {
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b096      	sub	sp, #88	@ 0x58
 8002ffc:	af04      	add	r7, sp, #16
 8002ffe:	ed87 0a01 	vstr	s0, [r7, #4]
 8003002:	edc7 0a00 	vstr	s1, [r7]
    char buffer[64];

    snprintf(buffer, sizeof(buffer), "\r\nThe estimated value based on Rs/R0=%.2f is: %.2f ppm", ratio_val, ppm_val);
 8003006:	6838      	ldr	r0, [r7, #0]
 8003008:	f7fd fa9e 	bl	8000548 <__aeabi_f2d>
 800300c:	4604      	mov	r4, r0
 800300e:	460d      	mov	r5, r1
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fd fa99 	bl	8000548 <__aeabi_f2d>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	f107 0008 	add.w	r0, r7, #8
 800301e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003022:	e9cd 4500 	strd	r4, r5, [sp]
 8003026:	4a0b      	ldr	r2, [pc, #44]	@ (8003054 <MQ9_print_sensor_data+0x5c>)
 8003028:	2140      	movs	r1, #64	@ 0x40
 800302a:	f008 f991 	bl	800b350 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd f91c 	bl	8000270 <strlen>
 8003038:	4603      	mov	r3, r0
 800303a:	b29a      	uxth	r2, r3
 800303c:	f107 0108 	add.w	r1, r7, #8
 8003040:	f04f 33ff 	mov.w	r3, #4294967295
 8003044:	4804      	ldr	r0, [pc, #16]	@ (8003058 <MQ9_print_sensor_data+0x60>)
 8003046:	f004 fd74 	bl	8007b32 <HAL_UART_Transmit>
}
 800304a:	bf00      	nop
 800304c:	3748      	adds	r7, #72	@ 0x48
 800304e:	46bd      	mov	sp, r7
 8003050:	bdb0      	pop	{r4, r5, r7, pc}
 8003052:	bf00      	nop
 8003054:	0800de50 	.word	0x0800de50
 8003058:	200003e8 	.word	0x200003e8

0800305c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003060:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <MX_SPI1_Init+0x64>)
 8003062:	4a18      	ldr	r2, [pc, #96]	@ (80030c4 <MX_SPI1_Init+0x68>)
 8003064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003066:	4b16      	ldr	r3, [pc, #88]	@ (80030c0 <MX_SPI1_Init+0x64>)
 8003068:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800306c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800306e:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <MX_SPI1_Init+0x64>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003074:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <MX_SPI1_Init+0x64>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800307a:	4b11      	ldr	r3, [pc, #68]	@ (80030c0 <MX_SPI1_Init+0x64>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003080:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <MX_SPI1_Init+0x64>)
 8003082:	2200      	movs	r2, #0
 8003084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003086:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <MX_SPI1_Init+0x64>)
 8003088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800308c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800308e:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <MX_SPI1_Init+0x64>)
 8003090:	2200      	movs	r2, #0
 8003092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003094:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <MX_SPI1_Init+0x64>)
 8003096:	2200      	movs	r2, #0
 8003098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800309a:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <MX_SPI1_Init+0x64>)
 800309c:	2200      	movs	r2, #0
 800309e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a0:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <MX_SPI1_Init+0x64>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030a6:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <MX_SPI1_Init+0x64>)
 80030a8:	220a      	movs	r2, #10
 80030aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030ac:	4804      	ldr	r0, [pc, #16]	@ (80030c0 <MX_SPI1_Init+0x64>)
 80030ae:	f004 fc67 	bl	8007980 <HAL_SPI_Init>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030b8:	f7ff fe9c 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2000038c 	.word	0x2000038c
 80030c4:	40013000 	.word	0x40013000

080030c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	@ 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	@ (800314c <HAL_SPI_MspInit+0x84>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d12b      	bne.n	8003142 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	4b18      	ldr	r3, [pc, #96]	@ (8003150 <HAL_SPI_MspInit+0x88>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <HAL_SPI_MspInit+0x88>)
 80030f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fa:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <HAL_SPI_MspInit+0x88>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <HAL_SPI_MspInit+0x88>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	4a10      	ldr	r2, [pc, #64]	@ (8003150 <HAL_SPI_MspInit+0x88>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6313      	str	r3, [r2, #48]	@ 0x30
 8003116:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <HAL_SPI_MspInit+0x88>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003122:	23e0      	movs	r3, #224	@ 0xe0
 8003124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003132:	2305      	movs	r3, #5
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	4805      	ldr	r0, [pc, #20]	@ (8003154 <HAL_SPI_MspInit+0x8c>)
 800313e:	f000 ff5d 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003142:	bf00      	nop
 8003144:	3728      	adds	r7, #40	@ 0x28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40013000 	.word	0x40013000
 8003150:	40023800 	.word	0x40023800
 8003154:	40020000 	.word	0x40020000

08003158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <HAL_MspInit+0x4c>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	4a0f      	ldr	r2, [pc, #60]	@ (80031a4 <HAL_MspInit+0x4c>)
 8003168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800316c:	6453      	str	r3, [r2, #68]	@ 0x44
 800316e:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <HAL_MspInit+0x4c>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <HAL_MspInit+0x4c>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	4a08      	ldr	r2, [pc, #32]	@ (80031a4 <HAL_MspInit+0x4c>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	@ 0x40
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <HAL_MspInit+0x4c>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003196:	2007      	movs	r0, #7
 8003198:	f000 fefc 	bl	8003f94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800

080031a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <NMI_Handler+0x4>

080031b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <HardFault_Handler+0x4>

080031b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <MemManage_Handler+0x4>

080031c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <BusFault_Handler+0x4>

080031c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <UsageFault_Handler+0x4>

080031d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fe:	f000 f9d3 	bl	80035a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800320c:	4802      	ldr	r0, [pc, #8]	@ (8003218 <OTG_FS_IRQHandler+0x10>)
 800320e:	f002 fd89 	bl	8005d24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000438 	.word	0x20000438

0800321c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return 1;
 8003220:	2301      	movs	r3, #1
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <_kill>:

int _kill(int pid, int sig)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003236:	f008 f957 	bl	800b4e8 <__errno>
 800323a:	4603      	mov	r3, r0
 800323c:	2216      	movs	r2, #22
 800323e:	601a      	str	r2, [r3, #0]
  return -1;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_exit>:

void _exit (int status)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003254:	f04f 31ff 	mov.w	r1, #4294967295
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ffe7 	bl	800322c <_kill>
  while (1) {}    /* Make sure we hang here */
 800325e:	bf00      	nop
 8003260:	e7fd      	b.n	800325e <_exit+0x12>

08003262 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e00a      	b.n	800328a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003274:	f3af 8000 	nop.w
 8003278:	4601      	mov	r1, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	60ba      	str	r2, [r7, #8]
 8003280:	b2ca      	uxtb	r2, r1
 8003282:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	429a      	cmp	r2, r3
 8003290:	dbf0      	blt.n	8003274 <_read+0x12>
  }

  return len;
 8003292:	687b      	ldr	r3, [r7, #4]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	e009      	b.n	80032c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	60ba      	str	r2, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	dbf1      	blt.n	80032ae <_write+0x12>
  }
  return len;
 80032ca:	687b      	ldr	r3, [r7, #4]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_close>:

int _close(int file)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032fc:	605a      	str	r2, [r3, #4]
  return 0;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <_isatty>:

int _isatty(int file)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003314:	2301      	movs	r3, #1
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003344:	4a14      	ldr	r2, [pc, #80]	@ (8003398 <_sbrk+0x5c>)
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <_sbrk+0x60>)
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003350:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <_sbrk+0x64>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003358:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <_sbrk+0x64>)
 800335a:	4a12      	ldr	r2, [pc, #72]	@ (80033a4 <_sbrk+0x68>)
 800335c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <_sbrk+0x64>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	429a      	cmp	r2, r3
 800336a:	d207      	bcs.n	800337c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800336c:	f008 f8bc 	bl	800b4e8 <__errno>
 8003370:	4603      	mov	r3, r0
 8003372:	220c      	movs	r2, #12
 8003374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
 800337a:	e009      	b.n	8003390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800337c:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <_sbrk+0x64>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003382:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <_sbrk+0x64>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	4a05      	ldr	r2, [pc, #20]	@ (80033a0 <_sbrk+0x64>)
 800338c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800338e:	68fb      	ldr	r3, [r7, #12]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20020000 	.word	0x20020000
 800339c:	00000400 	.word	0x00000400
 80033a0:	200003e4 	.word	0x200003e4
 80033a4:	20000a68 	.word	0x20000a68

080033a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033ac:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <SystemInit+0x20>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	4a05      	ldr	r2, [pc, #20]	@ (80033c8 <SystemInit+0x20>)
 80033b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033d0:	4b11      	ldr	r3, [pc, #68]	@ (8003418 <MX_USART2_UART_Init+0x4c>)
 80033d2:	4a12      	ldr	r2, [pc, #72]	@ (800341c <MX_USART2_UART_Init+0x50>)
 80033d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80033d6:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <MX_USART2_UART_Init+0x4c>)
 80033d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80033dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033de:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <MX_USART2_UART_Init+0x4c>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <MX_USART2_UART_Init+0x4c>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <MX_USART2_UART_Init+0x4c>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033f0:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <MX_USART2_UART_Init+0x4c>)
 80033f2:	220c      	movs	r2, #12
 80033f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033f6:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <MX_USART2_UART_Init+0x4c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <MX_USART2_UART_Init+0x4c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003402:	4805      	ldr	r0, [pc, #20]	@ (8003418 <MX_USART2_UART_Init+0x4c>)
 8003404:	f004 fb45 	bl	8007a92 <HAL_UART_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800340e:	f7ff fcf1 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200003e8 	.word	0x200003e8
 800341c:	40004400 	.word	0x40004400

08003420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	@ 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a19      	ldr	r2, [pc, #100]	@ (80034a4 <HAL_UART_MspInit+0x84>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d12b      	bne.n	800349a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <HAL_UART_MspInit+0x88>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <HAL_UART_MspInit+0x88>)
 800344c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003450:	6413      	str	r3, [r2, #64]	@ 0x40
 8003452:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <HAL_UART_MspInit+0x88>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <HAL_UART_MspInit+0x88>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	4a10      	ldr	r2, [pc, #64]	@ (80034a8 <HAL_UART_MspInit+0x88>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6313      	str	r3, [r2, #48]	@ 0x30
 800346e:	4b0e      	ldr	r3, [pc, #56]	@ (80034a8 <HAL_UART_MspInit+0x88>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800347a:	230c      	movs	r3, #12
 800347c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003486:	2303      	movs	r3, #3
 8003488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800348a:	2307      	movs	r3, #7
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4619      	mov	r1, r3
 8003494:	4805      	ldr	r0, [pc, #20]	@ (80034ac <HAL_UART_MspInit+0x8c>)
 8003496:	f000 fdb1 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800349a:	bf00      	nop
 800349c:	3728      	adds	r7, #40	@ 0x28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40004400 	.word	0x40004400
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40020000 	.word	0x40020000

080034b0 <Reset_Handler>:
 80034b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034e8 <LoopFillZerobss+0xe>
 80034b4:	f7ff ff78 	bl	80033a8 <SystemInit>
 80034b8:	480c      	ldr	r0, [pc, #48]	@ (80034ec <LoopFillZerobss+0x12>)
 80034ba:	490d      	ldr	r1, [pc, #52]	@ (80034f0 <LoopFillZerobss+0x16>)
 80034bc:	4a0d      	ldr	r2, [pc, #52]	@ (80034f4 <LoopFillZerobss+0x1a>)
 80034be:	2300      	movs	r3, #0
 80034c0:	e002      	b.n	80034c8 <LoopCopyDataInit>

080034c2 <CopyDataInit>:
 80034c2:	58d4      	ldr	r4, [r2, r3]
 80034c4:	50c4      	str	r4, [r0, r3]
 80034c6:	3304      	adds	r3, #4

080034c8 <LoopCopyDataInit>:
 80034c8:	18c4      	adds	r4, r0, r3
 80034ca:	428c      	cmp	r4, r1
 80034cc:	d3f9      	bcc.n	80034c2 <CopyDataInit>
 80034ce:	4a0a      	ldr	r2, [pc, #40]	@ (80034f8 <LoopFillZerobss+0x1e>)
 80034d0:	4c0a      	ldr	r4, [pc, #40]	@ (80034fc <LoopFillZerobss+0x22>)
 80034d2:	2300      	movs	r3, #0
 80034d4:	e001      	b.n	80034da <LoopFillZerobss>

080034d6 <FillZerobss>:
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	3204      	adds	r2, #4

080034da <LoopFillZerobss>:
 80034da:	42a2      	cmp	r2, r4
 80034dc:	d3fb      	bcc.n	80034d6 <FillZerobss>
 80034de:	f008 f809 	bl	800b4f4 <__libc_init_array>
 80034e2:	f7ff fbbd 	bl	8002c60 <main>
 80034e6:	4770      	bx	lr
 80034e8:	20020000 	.word	0x20020000
 80034ec:	20000000 	.word	0x20000000
 80034f0:	200001d8 	.word	0x200001d8
 80034f4:	0800e23c 	.word	0x0800e23c
 80034f8:	200001d8 	.word	0x200001d8
 80034fc:	20000a68 	.word	0x20000a68

08003500 <ADC_IRQHandler>:
 8003500:	e7fe      	b.n	8003500 <ADC_IRQHandler>
	...

08003504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003508:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_Init+0x40>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0d      	ldr	r2, [pc, #52]	@ (8003544 <HAL_Init+0x40>)
 800350e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003514:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <HAL_Init+0x40>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <HAL_Init+0x40>)
 800351a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800351e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003520:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <HAL_Init+0x40>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a07      	ldr	r2, [pc, #28]	@ (8003544 <HAL_Init+0x40>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800352c:	2003      	movs	r0, #3
 800352e:	f000 fd31 	bl	8003f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003532:	2000      	movs	r0, #0
 8003534:	f000 f808 	bl	8003548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003538:	f7ff fe0e 	bl	8003158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023c00 	.word	0x40023c00

08003548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003550:	4b12      	ldr	r3, [pc, #72]	@ (800359c <HAL_InitTick+0x54>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b12      	ldr	r3, [pc, #72]	@ (80035a0 <HAL_InitTick+0x58>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800355e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fd3b 	bl	8003fe2 <HAL_SYSTICK_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00e      	b.n	8003594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0f      	cmp	r3, #15
 800357a:	d80a      	bhi.n	8003592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800357c:	2200      	movs	r2, #0
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	f000 fd11 	bl	8003faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003588:	4a06      	ldr	r2, [pc, #24]	@ (80035a4 <HAL_InitTick+0x5c>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000004 	.word	0x20000004
 80035a0:	2000000c 	.word	0x2000000c
 80035a4:	20000008 	.word	0x20000008

080035a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_IncTick+0x20>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_IncTick+0x24>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4a04      	ldr	r2, [pc, #16]	@ (80035cc <HAL_IncTick+0x24>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	2000000c 	.word	0x2000000c
 80035cc:	20000430 	.word	0x20000430

080035d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return uwTick;
 80035d4:	4b03      	ldr	r3, [pc, #12]	@ (80035e4 <HAL_GetTick+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000430 	.word	0x20000430

080035e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7ff ffee 	bl	80035d0 <HAL_GetTick>
 80035f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d005      	beq.n	800360e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003602:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <HAL_Delay+0x44>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800360e:	bf00      	nop
 8003610:	f7ff ffde 	bl	80035d0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	429a      	cmp	r2, r3
 800361e:	d8f7      	bhi.n	8003610 <HAL_Delay+0x28>
  {
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	2000000c 	.word	0x2000000c

08003630 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e033      	b.n	80036ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fc92 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003676:	f023 0302 	bic.w	r3, r3, #2
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fad8 	bl	8003c38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	f043 0201 	orr.w	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40
 800369e:	e001      	b.n	80036a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_Start+0x1a>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e0b2      	b.n	8003838 <HAL_ADC_Start+0x180>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d018      	beq.n	800371a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036f8:	4b52      	ldr	r3, [pc, #328]	@ (8003844 <HAL_ADC_Start+0x18c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a52      	ldr	r2, [pc, #328]	@ (8003848 <HAL_ADC_Start+0x190>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	0c9a      	lsrs	r2, r3, #18
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800370c:	e002      	b.n	8003714 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3b01      	subs	r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f9      	bne.n	800370e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d17a      	bne.n	800381e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003752:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003766:	d106      	bne.n	8003776 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376c:	f023 0206 	bic.w	r2, r3, #6
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44
 8003774:	e002      	b.n	800377c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003784:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_ADC_Start+0x194>)
 8003786:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003790:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	2b00      	cmp	r3, #0
 800379c:	d12a      	bne.n	80037f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003850 <HAL_ADC_Start+0x198>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d015      	beq.n	80037d4 <HAL_ADC_Start+0x11c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a29      	ldr	r2, [pc, #164]	@ (8003854 <HAL_ADC_Start+0x19c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d105      	bne.n	80037be <HAL_ADC_Start+0x106>
 80037b2:	4b26      	ldr	r3, [pc, #152]	@ (800384c <HAL_ADC_Start+0x194>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a25      	ldr	r2, [pc, #148]	@ (8003858 <HAL_ADC_Start+0x1a0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d136      	bne.n	8003836 <HAL_ADC_Start+0x17e>
 80037c8:	4b20      	ldr	r3, [pc, #128]	@ (800384c <HAL_ADC_Start+0x194>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d130      	bne.n	8003836 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d129      	bne.n	8003836 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	e020      	b.n	8003836 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <HAL_ADC_Start+0x198>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d11b      	bne.n	8003836 <HAL_ADC_Start+0x17e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d114      	bne.n	8003836 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	e00b      	b.n	8003836 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f043 0210 	orr.w	r2, r3, #16
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	20000004 	.word	0x20000004
 8003848:	431bde83 	.word	0x431bde83
 800384c:	40012300 	.word	0x40012300
 8003850:	40012000 	.word	0x40012000
 8003854:	40012100 	.word	0x40012100
 8003858:	40012200 	.word	0x40012200

0800385c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_ADC_Stop+0x16>
 800386e:	2302      	movs	r3, #2
 8003870:	e021      	b.n	80038b6 <HAL_ADC_Stop+0x5a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038de:	d113      	bne.n	8003908 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80038ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ee:	d10b      	bne.n	8003908 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e063      	b.n	80039d0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003908:	f7ff fe62 	bl	80035d0 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800390e:	e021      	b.n	8003954 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d01d      	beq.n	8003954 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_ADC_PollForConversion+0x6c>
 800391e:	f7ff fe57 	bl	80035d0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d212      	bcs.n	8003954 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b02      	cmp	r3, #2
 800393a:	d00b      	beq.n	8003954 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	f043 0204 	orr.w	r2, r3, #4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e03d      	b.n	80039d0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d1d6      	bne.n	8003910 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0212 	mvn.w	r2, #18
 800396a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d123      	bne.n	80039ce <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800398a:	2b00      	cmp	r3, #0
 800398c:	d11f      	bne.n	80039ce <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003994:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003998:	2b00      	cmp	r3, #0
 800399a:	d006      	beq.n	80039aa <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d111      	bne.n	80039ce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d105      	bne.n	80039ce <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x1c>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e105      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x228>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b09      	cmp	r3, #9
 8003a1e:	d925      	bls.n	8003a6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68d9      	ldr	r1, [r3, #12]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	3b1e      	subs	r3, #30
 8003a36:	2207      	movs	r2, #7
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	400a      	ands	r2, r1
 8003a44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68d9      	ldr	r1, [r3, #12]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	4618      	mov	r0, r3
 8003a58:	4603      	mov	r3, r0
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4403      	add	r3, r0
 8003a5e:	3b1e      	subs	r3, #30
 8003a60:	409a      	lsls	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e022      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6919      	ldr	r1, [r3, #16]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	2207      	movs	r2, #7
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6919      	ldr	r1, [r3, #16]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4403      	add	r3, r0
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d824      	bhi.n	8003b04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	3b05      	subs	r3, #5
 8003acc:	221f      	movs	r2, #31
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	400a      	ands	r2, r1
 8003ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	3b05      	subs	r3, #5
 8003af6:	fa00 f203 	lsl.w	r2, r0, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b02:	e04c      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d824      	bhi.n	8003b56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3b23      	subs	r3, #35	@ 0x23
 8003b1e:	221f      	movs	r2, #31
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43da      	mvns	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	400a      	ands	r2, r1
 8003b2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	3b23      	subs	r3, #35	@ 0x23
 8003b48:	fa00 f203 	lsl.w	r2, r0, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b54:	e023      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	3b41      	subs	r3, #65	@ 0x41
 8003b68:	221f      	movs	r2, #31
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	400a      	ands	r2, r1
 8003b76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	4618      	mov	r0, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	3b41      	subs	r3, #65	@ 0x41
 8003b92:	fa00 f203 	lsl.w	r2, r0, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	@ (8003c28 <HAL_ADC_ConfigChannel+0x234>)
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a21      	ldr	r2, [pc, #132]	@ (8003c2c <HAL_ADC_ConfigChannel+0x238>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d109      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x1cc>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b12      	cmp	r3, #18
 8003bb2:	d105      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a19      	ldr	r2, [pc, #100]	@ (8003c2c <HAL_ADC_ConfigChannel+0x238>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d123      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x21e>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d003      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x1e6>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b11      	cmp	r3, #17
 8003bd8:	d11b      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d111      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bee:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <HAL_ADC_ConfigChannel+0x23c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a10      	ldr	r2, [pc, #64]	@ (8003c34 <HAL_ADC_ConfigChannel+0x240>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	0c9a      	lsrs	r2, r3, #18
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c04:	e002      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f9      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40012300 	.word	0x40012300
 8003c2c:	40012000 	.word	0x40012000
 8003c30:	20000004 	.word	0x20000004
 8003c34:	431bde83 	.word	0x431bde83

08003c38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c40:	4b79      	ldr	r3, [pc, #484]	@ (8003e28 <ADC_Init+0x1f0>)
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	021a      	lsls	r2, r3, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	4a58      	ldr	r2, [pc, #352]	@ (8003e2c <ADC_Init+0x1f4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003cde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6899      	ldr	r1, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e00f      	b.n	8003d36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0202 	bic.w	r2, r2, #2
 8003d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6899      	ldr	r1, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	7e1b      	ldrb	r3, [r3, #24]
 8003d50:	005a      	lsls	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01b      	beq.n	8003d9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003d82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	035a      	lsls	r2, r3, #13
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	e007      	b.n	8003dac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	051a      	lsls	r2, r3, #20
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003dee:	025a      	lsls	r2, r3, #9
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6899      	ldr	r1, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	029a      	lsls	r2, r3, #10
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40012300 	.word	0x40012300
 8003e2c:	0f000001 	.word	0x0f000001

08003e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e40:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <__NVIC_SetPriorityGrouping+0x44>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e62:	4a04      	ldr	r2, [pc, #16]	@ (8003e74 <__NVIC_SetPriorityGrouping+0x44>)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	60d3      	str	r3, [r2, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e7c:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <__NVIC_GetPriorityGrouping+0x18>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	f003 0307 	and.w	r3, r3, #7
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	6039      	str	r1, [r7, #0]
 8003e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	db0a      	blt.n	8003ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	490c      	ldr	r1, [pc, #48]	@ (8003ee0 <__NVIC_SetPriority+0x4c>)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	0112      	lsls	r2, r2, #4
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ebc:	e00a      	b.n	8003ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4908      	ldr	r1, [pc, #32]	@ (8003ee4 <__NVIC_SetPriority+0x50>)
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	3b04      	subs	r3, #4
 8003ecc:	0112      	lsls	r2, r2, #4
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	761a      	strb	r2, [r3, #24]
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000e100 	.word	0xe000e100
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b089      	sub	sp, #36	@ 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f1c3 0307 	rsb	r3, r3, #7
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	bf28      	it	cs
 8003f06:	2304      	movcs	r3, #4
 8003f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2b06      	cmp	r3, #6
 8003f10:	d902      	bls.n	8003f18 <NVIC_EncodePriority+0x30>
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3b03      	subs	r3, #3
 8003f16:	e000      	b.n	8003f1a <NVIC_EncodePriority+0x32>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43da      	mvns	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f30:	f04f 31ff 	mov.w	r1, #4294967295
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3a:	43d9      	mvns	r1, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f40:	4313      	orrs	r3, r2
         );
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3724      	adds	r7, #36	@ 0x24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f60:	d301      	bcc.n	8003f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f62:	2301      	movs	r3, #1
 8003f64:	e00f      	b.n	8003f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f66:	4a0a      	ldr	r2, [pc, #40]	@ (8003f90 <SysTick_Config+0x40>)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f6e:	210f      	movs	r1, #15
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	f7ff ff8e 	bl	8003e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <SysTick_Config+0x40>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f7e:	4b04      	ldr	r3, [pc, #16]	@ (8003f90 <SysTick_Config+0x40>)
 8003f80:	2207      	movs	r2, #7
 8003f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	e000e010 	.word	0xe000e010

08003f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff47 	bl	8003e30 <__NVIC_SetPriorityGrouping>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fbc:	f7ff ff5c 	bl	8003e78 <__NVIC_GetPriorityGrouping>
 8003fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	6978      	ldr	r0, [r7, #20]
 8003fc8:	f7ff ff8e 	bl	8003ee8 <NVIC_EncodePriority>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff5d 	bl	8003e94 <__NVIC_SetPriority>
}
 8003fda:	bf00      	nop
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ffb0 	bl	8003f50 <SysTick_Config>
 8003ff0:	4603      	mov	r3, r0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	@ 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e16b      	b.n	80042f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	429a      	cmp	r2, r3
 8004032:	f040 815a 	bne.w	80042ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d005      	beq.n	800404e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800404a:	2b02      	cmp	r3, #2
 800404c:	d130      	bne.n	80040b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	2203      	movs	r2, #3
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 0201 	and.w	r2, r3, #1
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d017      	beq.n	80040ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	2203      	movs	r2, #3
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d123      	bne.n	8004140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	08da      	lsrs	r2, r3, #3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3208      	adds	r2, #8
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	220f      	movs	r2, #15
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	08da      	lsrs	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3208      	adds	r2, #8
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2203      	movs	r2, #3
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0203 	and.w	r2, r3, #3
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80b4 	beq.w	80042ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b60      	ldr	r3, [pc, #384]	@ (8004308 <HAL_GPIO_Init+0x30c>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	4a5f      	ldr	r2, [pc, #380]	@ (8004308 <HAL_GPIO_Init+0x30c>)
 800418c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004190:	6453      	str	r3, [r2, #68]	@ 0x44
 8004192:	4b5d      	ldr	r3, [pc, #372]	@ (8004308 <HAL_GPIO_Init+0x30c>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419e:	4a5b      	ldr	r2, [pc, #364]	@ (800430c <HAL_GPIO_Init+0x310>)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	3302      	adds	r3, #2
 80041a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	220f      	movs	r2, #15
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a52      	ldr	r2, [pc, #328]	@ (8004310 <HAL_GPIO_Init+0x314>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02b      	beq.n	8004222 <HAL_GPIO_Init+0x226>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a51      	ldr	r2, [pc, #324]	@ (8004314 <HAL_GPIO_Init+0x318>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d025      	beq.n	800421e <HAL_GPIO_Init+0x222>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a50      	ldr	r2, [pc, #320]	@ (8004318 <HAL_GPIO_Init+0x31c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <HAL_GPIO_Init+0x21e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a4f      	ldr	r2, [pc, #316]	@ (800431c <HAL_GPIO_Init+0x320>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d019      	beq.n	8004216 <HAL_GPIO_Init+0x21a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004320 <HAL_GPIO_Init+0x324>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_GPIO_Init+0x216>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004324 <HAL_GPIO_Init+0x328>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00d      	beq.n	800420e <HAL_GPIO_Init+0x212>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004328 <HAL_GPIO_Init+0x32c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <HAL_GPIO_Init+0x20e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a4b      	ldr	r2, [pc, #300]	@ (800432c <HAL_GPIO_Init+0x330>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_GPIO_Init+0x20a>
 8004202:	2307      	movs	r3, #7
 8004204:	e00e      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004206:	2308      	movs	r3, #8
 8004208:	e00c      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800420a:	2306      	movs	r3, #6
 800420c:	e00a      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800420e:	2305      	movs	r3, #5
 8004210:	e008      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004212:	2304      	movs	r3, #4
 8004214:	e006      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004216:	2303      	movs	r3, #3
 8004218:	e004      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800421a:	2302      	movs	r3, #2
 800421c:	e002      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004222:	2300      	movs	r3, #0
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f002 0203 	and.w	r2, r2, #3
 800422a:	0092      	lsls	r2, r2, #2
 800422c:	4093      	lsls	r3, r2
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004234:	4935      	ldr	r1, [pc, #212]	@ (800430c <HAL_GPIO_Init+0x310>)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3302      	adds	r3, #2
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004242:	4b3b      	ldr	r3, [pc, #236]	@ (8004330 <HAL_GPIO_Init+0x334>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004266:	4a32      	ldr	r2, [pc, #200]	@ (8004330 <HAL_GPIO_Init+0x334>)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800426c:	4b30      	ldr	r3, [pc, #192]	@ (8004330 <HAL_GPIO_Init+0x334>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004290:	4a27      	ldr	r2, [pc, #156]	@ (8004330 <HAL_GPIO_Init+0x334>)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004296:	4b26      	ldr	r3, [pc, #152]	@ (8004330 <HAL_GPIO_Init+0x334>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004330 <HAL_GPIO_Init+0x334>)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004330 <HAL_GPIO_Init+0x334>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e4:	4a12      	ldr	r2, [pc, #72]	@ (8004330 <HAL_GPIO_Init+0x334>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3301      	adds	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b0f      	cmp	r3, #15
 80042f4:	f67f ae90 	bls.w	8004018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3724      	adds	r7, #36	@ 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	40013800 	.word	0x40013800
 8004310:	40020000 	.word	0x40020000
 8004314:	40020400 	.word	0x40020400
 8004318:	40020800 	.word	0x40020800
 800431c:	40020c00 	.word	0x40020c00
 8004320:	40021000 	.word	0x40021000
 8004324:	40021400 	.word	0x40021400
 8004328:	40021800 	.word	0x40021800
 800432c:	40021c00 	.word	0x40021c00
 8004330:	40013c00 	.word	0x40013c00

08004334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
 8004340:	4613      	mov	r3, r2
 8004342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004350:	e003      	b.n	800435a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	041a      	lsls	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	619a      	str	r2, [r3, #24]
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004378:	887a      	ldrh	r2, [r7, #2]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4013      	ands	r3, r2
 800437e:	041a      	lsls	r2, r3, #16
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	43d9      	mvns	r1, r3
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	400b      	ands	r3, r1
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	619a      	str	r2, [r3, #24]
}
 800438e:	bf00      	nop
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e12b      	b.n	8004606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fe fafc 	bl	80029c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	@ 0x24
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004400:	f003 f954 	bl	80076ac <HAL_RCC_GetPCLK1Freq>
 8004404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4a81      	ldr	r2, [pc, #516]	@ (8004610 <HAL_I2C_Init+0x274>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d807      	bhi.n	8004420 <HAL_I2C_Init+0x84>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a80      	ldr	r2, [pc, #512]	@ (8004614 <HAL_I2C_Init+0x278>)
 8004414:	4293      	cmp	r3, r2
 8004416:	bf94      	ite	ls
 8004418:	2301      	movls	r3, #1
 800441a:	2300      	movhi	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e006      	b.n	800442e <HAL_I2C_Init+0x92>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a7d      	ldr	r2, [pc, #500]	@ (8004618 <HAL_I2C_Init+0x27c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	bf94      	ite	ls
 8004428:	2301      	movls	r3, #1
 800442a:	2300      	movhi	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e0e7      	b.n	8004606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a78      	ldr	r2, [pc, #480]	@ (800461c <HAL_I2C_Init+0x280>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	0c9b      	lsrs	r3, r3, #18
 8004440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a6a      	ldr	r2, [pc, #424]	@ (8004610 <HAL_I2C_Init+0x274>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d802      	bhi.n	8004470 <HAL_I2C_Init+0xd4>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3301      	adds	r3, #1
 800446e:	e009      	b.n	8004484 <HAL_I2C_Init+0xe8>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	4a69      	ldr	r2, [pc, #420]	@ (8004620 <HAL_I2C_Init+0x284>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	3301      	adds	r3, #1
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	430b      	orrs	r3, r1
 800448a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004496:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	495c      	ldr	r1, [pc, #368]	@ (8004610 <HAL_I2C_Init+0x274>)
 80044a0:	428b      	cmp	r3, r1
 80044a2:	d819      	bhi.n	80044d8 <HAL_I2C_Init+0x13c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1e59      	subs	r1, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b2:	1c59      	adds	r1, r3, #1
 80044b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80044b8:	400b      	ands	r3, r1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_I2C_Init+0x138>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1e59      	subs	r1, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d2:	e051      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 80044d4:	2304      	movs	r3, #4
 80044d6:	e04f      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d111      	bne.n	8004504 <HAL_I2C_Init+0x168>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1e58      	subs	r0, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	440b      	add	r3, r1
 80044ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e012      	b.n	800452a <HAL_I2C_Init+0x18e>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1e58      	subs	r0, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	0099      	lsls	r1, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Init+0x196>
 800452e:	2301      	movs	r3, #1
 8004530:	e022      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10e      	bne.n	8004558 <HAL_I2C_Init+0x1bc>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1e58      	subs	r0, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6859      	ldr	r1, [r3, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	440b      	add	r3, r1
 8004548:	fbb0 f3f3 	udiv	r3, r0, r3
 800454c:	3301      	adds	r3, #1
 800454e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004556:	e00f      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1e58      	subs	r0, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	0099      	lsls	r1, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	fbb0 f3f3 	udiv	r3, r0, r3
 800456e:	3301      	adds	r3, #1
 8004570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	6809      	ldr	r1, [r1, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80045a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6911      	ldr	r1, [r2, #16]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68d2      	ldr	r2, [r2, #12]
 80045b2:	4311      	orrs	r1, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	000186a0 	.word	0x000186a0
 8004614:	001e847f 	.word	0x001e847f
 8004618:	003d08ff 	.word	0x003d08ff
 800461c:	431bde83 	.word	0x431bde83
 8004620:	10624dd3 	.word	0x10624dd3

08004624 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	4608      	mov	r0, r1
 800462e:	4611      	mov	r1, r2
 8004630:	461a      	mov	r2, r3
 8004632:	4603      	mov	r3, r0
 8004634:	817b      	strh	r3, [r7, #10]
 8004636:	460b      	mov	r3, r1
 8004638:	813b      	strh	r3, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800463e:	f7fe ffc7 	bl	80035d0 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b20      	cmp	r3, #32
 800464e:	f040 80d9 	bne.w	8004804 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2319      	movs	r3, #25
 8004658:	2201      	movs	r2, #1
 800465a:	496d      	ldr	r1, [pc, #436]	@ (8004810 <HAL_I2C_Mem_Write+0x1ec>)
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fc8b 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
 800466a:	e0cc      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_I2C_Mem_Write+0x56>
 8004676:	2302      	movs	r3, #2
 8004678:	e0c5      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d007      	beq.n	80046a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2221      	movs	r2, #33	@ 0x21
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2240      	movs	r2, #64	@ 0x40
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a3a      	ldr	r2, [r7, #32]
 80046ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a4d      	ldr	r2, [pc, #308]	@ (8004814 <HAL_I2C_Mem_Write+0x1f0>)
 80046e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046e2:	88f8      	ldrh	r0, [r7, #6]
 80046e4:	893a      	ldrh	r2, [r7, #8]
 80046e6:	8979      	ldrh	r1, [r7, #10]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4603      	mov	r3, r0
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fac2 	bl	8004c7c <I2C_RequestMemoryWrite>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d052      	beq.n	80047a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e081      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fd50 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	2b04      	cmp	r3, #4
 8004718:	d107      	bne.n	800472a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e06b      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b04      	cmp	r3, #4
 800476a:	d11b      	bne.n	80047a4 <HAL_I2C_Mem_Write+0x180>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d017      	beq.n	80047a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1aa      	bne.n	8004702 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fd43 	bl	800523c <I2C_WaitOnBTFFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d107      	bne.n	80047d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e016      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	00100002 	.word	0x00100002
 8004814:	ffff0000 	.word	0xffff0000

08004818 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08c      	sub	sp, #48	@ 0x30
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	461a      	mov	r2, r3
 8004826:	4603      	mov	r3, r0
 8004828:	817b      	strh	r3, [r7, #10]
 800482a:	460b      	mov	r3, r1
 800482c:	813b      	strh	r3, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004832:	f7fe fecd 	bl	80035d0 <HAL_GetTick>
 8004836:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b20      	cmp	r3, #32
 8004842:	f040 8214 	bne.w	8004c6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2319      	movs	r3, #25
 800484c:	2201      	movs	r2, #1
 800484e:	497b      	ldr	r1, [pc, #492]	@ (8004a3c <HAL_I2C_Mem_Read+0x224>)
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fb91 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
 800485e:	e207      	b.n	8004c70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_I2C_Mem_Read+0x56>
 800486a:	2302      	movs	r3, #2
 800486c:	e200      	b.n	8004c70 <HAL_I2C_Mem_Read+0x458>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d007      	beq.n	8004894 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2222      	movs	r2, #34	@ 0x22
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2240      	movs	r2, #64	@ 0x40
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80048c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a40 <HAL_I2C_Mem_Read+0x228>)
 80048d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048d6:	88f8      	ldrh	r0, [r7, #6]
 80048d8:	893a      	ldrh	r2, [r7, #8]
 80048da:	8979      	ldrh	r1, [r7, #10]
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4603      	mov	r3, r0
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fa5e 	bl	8004da8 <I2C_RequestMemoryRead>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e1bc      	b.n	8004c70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d113      	bne.n	8004926 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	623b      	str	r3, [r7, #32]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	e190      	b.n	8004c48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492a:	2b01      	cmp	r3, #1
 800492c:	d11b      	bne.n	8004966 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800493c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e170      	b.n	8004c48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800496a:	2b02      	cmp	r3, #2
 800496c:	d11b      	bne.n	80049a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800497c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800498c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498e:	2300      	movs	r3, #0
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	e150      	b.n	8004c48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049bc:	e144      	b.n	8004c48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	f200 80f1 	bhi.w	8004baa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d123      	bne.n	8004a18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fc79 	bl	80052cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e145      	b.n	8004c70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a16:	e117      	b.n	8004c48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d14e      	bne.n	8004abe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a26:	2200      	movs	r2, #0
 8004a28:	4906      	ldr	r1, [pc, #24]	@ (8004a44 <HAL_I2C_Mem_Read+0x22c>)
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 faa4 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e11a      	b.n	8004c70 <HAL_I2C_Mem_Read+0x458>
 8004a3a:	bf00      	nop
 8004a3c:	00100002 	.word	0x00100002
 8004a40:	ffff0000 	.word	0xffff0000
 8004a44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004abc:	e0c4      	b.n	8004c48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	496c      	ldr	r1, [pc, #432]	@ (8004c78 <HAL_I2C_Mem_Read+0x460>)
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fa55 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0cb      	b.n	8004c70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	2200      	movs	r2, #0
 8004b22:	4955      	ldr	r1, [pc, #340]	@ (8004c78 <HAL_I2C_Mem_Read+0x460>)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fa27 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e09d      	b.n	8004c70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ba8:	e04e      	b.n	8004c48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fb8c 	bl	80052cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e058      	b.n	8004c70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d124      	bne.n	8004c48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d107      	bne.n	8004c16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f47f aeb6 	bne.w	80049be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e000      	b.n	8004c70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
  }
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3728      	adds	r7, #40	@ 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	00010004 	.word	0x00010004

08004c7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	4608      	mov	r0, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	817b      	strh	r3, [r7, #10]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	813b      	strh	r3, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f960 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00d      	beq.n	8004cda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ccc:	d103      	bne.n	8004cd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e05f      	b.n	8004d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cda:	897b      	ldrh	r3, [r7, #10]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ce8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	6a3a      	ldr	r2, [r7, #32]
 8004cee:	492d      	ldr	r1, [pc, #180]	@ (8004da4 <I2C_RequestMemoryWrite+0x128>)
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f9bb 	bl	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e04c      	b.n	8004d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d18:	6a39      	ldr	r1, [r7, #32]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fa46 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d107      	bne.n	8004d3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e02b      	b.n	8004d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	611a      	str	r2, [r3, #16]
 8004d52:	e021      	b.n	8004d98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d54:	893b      	ldrh	r3, [r7, #8]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d64:	6a39      	ldr	r1, [r7, #32]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa20 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00d      	beq.n	8004d8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d107      	bne.n	8004d8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e005      	b.n	8004d9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d8e:	893b      	ldrh	r3, [r7, #8]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	00010002 	.word	0x00010002

08004da8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	461a      	mov	r2, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	817b      	strh	r3, [r7, #10]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	813b      	strh	r3, [r7, #8]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004dd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f8c2 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00d      	beq.n	8004e16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e08:	d103      	bne.n	8004e12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e0aa      	b.n	8004f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e16:	897b      	ldrh	r3, [r7, #10]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	6a3a      	ldr	r2, [r7, #32]
 8004e2a:	4952      	ldr	r1, [pc, #328]	@ (8004f74 <I2C_RequestMemoryRead+0x1cc>)
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f91d 	bl	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e097      	b.n	8004f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e54:	6a39      	ldr	r1, [r7, #32]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f9a8 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d107      	bne.n	8004e7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e076      	b.n	8004f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d105      	bne.n	8004e90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e84:	893b      	ldrh	r3, [r7, #8]
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	611a      	str	r2, [r3, #16]
 8004e8e:	e021      	b.n	8004ed4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e90:	893b      	ldrh	r3, [r7, #8]
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea0:	6a39      	ldr	r1, [r7, #32]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f982 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d107      	bne.n	8004ec6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e050      	b.n	8004f6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eca:	893b      	ldrh	r3, [r7, #8]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed6:	6a39      	ldr	r1, [r7, #32]
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f967 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00d      	beq.n	8004f00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d107      	bne.n	8004efc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004efa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e035      	b.n	8004f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f82b 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00d      	beq.n	8004f44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f36:	d103      	bne.n	8004f40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e013      	b.n	8004f6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f44:	897b      	ldrh	r3, [r7, #10]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	6a3a      	ldr	r2, [r7, #32]
 8004f58:	4906      	ldr	r1, [pc, #24]	@ (8004f74 <I2C_RequestMemoryRead+0x1cc>)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f886 	bl	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	00010002 	.word	0x00010002

08004f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	4613      	mov	r3, r2
 8004f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f88:	e048      	b.n	800501c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d044      	beq.n	800501c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f92:	f7fe fb1d 	bl	80035d0 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d139      	bne.n	800501c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	0c1b      	lsrs	r3, r3, #16
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10d      	bne.n	8004fce <I2C_WaitOnFlagUntilTimeout+0x56>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	43da      	mvns	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	e00c      	b.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	43da      	mvns	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d116      	bne.n	800501c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e023      	b.n	8005064 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	0c1b      	lsrs	r3, r3, #16
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b01      	cmp	r3, #1
 8005024:	d10d      	bne.n	8005042 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	43da      	mvns	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	4013      	ands	r3, r2
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	e00c      	b.n	800505c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	43da      	mvns	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	429a      	cmp	r2, r3
 8005060:	d093      	beq.n	8004f8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800507a:	e071      	b.n	8005160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508a:	d123      	bne.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800509a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	f043 0204 	orr.w	r2, r3, #4
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e067      	b.n	80051a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d041      	beq.n	8005160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050dc:	f7fe fa78 	bl	80035d0 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d302      	bcc.n	80050f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d136      	bne.n	8005160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d10c      	bne.n	8005116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	43da      	mvns	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf14      	ite	ne
 800510e:	2301      	movne	r3, #1
 8005110:	2300      	moveq	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	e00b      	b.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	43da      	mvns	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4013      	ands	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d016      	beq.n	8005160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514c:	f043 0220 	orr.w	r2, r3, #32
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e021      	b.n	80051a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d10c      	bne.n	8005184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	43da      	mvns	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4013      	ands	r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2300      	moveq	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	e00b      	b.n	800519c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	43da      	mvns	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4013      	ands	r3, r2
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	bf14      	ite	ne
 8005196:	2301      	movne	r3, #1
 8005198:	2300      	moveq	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	f47f af6d 	bne.w	800507c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051b8:	e034      	b.n	8005224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f8e3 	bl	8005386 <I2C_IsAcknowledgeFailed>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e034      	b.n	8005234 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d028      	beq.n	8005224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fe f9fd 	bl	80035d0 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d11d      	bne.n	8005224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f2:	2b80      	cmp	r3, #128	@ 0x80
 80051f4:	d016      	beq.n	8005224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e007      	b.n	8005234 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522e:	2b80      	cmp	r3, #128	@ 0x80
 8005230:	d1c3      	bne.n	80051ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005248:	e034      	b.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f89b 	bl	8005386 <I2C_IsAcknowledgeFailed>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e034      	b.n	80052c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d028      	beq.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fe f9b5 	bl	80035d0 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11d      	bne.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b04      	cmp	r3, #4
 8005284:	d016      	beq.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e007      	b.n	80052c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d1c3      	bne.n	800524a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052d8:	e049      	b.n	800536e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d119      	bne.n	800531c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0210 	mvn.w	r2, #16
 80052f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e030      	b.n	800537e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531c:	f7fe f958 	bl	80035d0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	d302      	bcc.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d11d      	bne.n	800536e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533c:	2b40      	cmp	r3, #64	@ 0x40
 800533e:	d016      	beq.n	800536e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e007      	b.n	800537e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005378:	2b40      	cmp	r3, #64	@ 0x40
 800537a:	d1ae      	bne.n	80052da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539c:	d11b      	bne.n	80053d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	f043 0204 	orr.w	r2, r3, #4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e128      	b.n	8005648 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a90      	ldr	r2, [pc, #576]	@ (8005650 <HAL_I2S_Init+0x26c>)
 800540e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fd fba5 	bl	8002b60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800542c:	f023 030f 	bic.w	r3, r3, #15
 8005430:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2202      	movs	r2, #2
 8005438:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d060      	beq.n	8005504 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800544a:	2310      	movs	r3, #16
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e001      	b.n	8005454 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005450:	2320      	movs	r3, #32
 8005452:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b20      	cmp	r3, #32
 800545a:	d802      	bhi.n	8005462 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005462:	2001      	movs	r0, #1
 8005464:	f002 fa2c 	bl	80078c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005468:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005472:	d125      	bne.n	80054c0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d010      	beq.n	800549e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	fbb2 f2f3 	udiv	r2, r2, r3
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	461a      	mov	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	3305      	adds	r3, #5
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	e01f      	b.n	80054de <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	461a      	mov	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ba:	3305      	adds	r3, #5
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e00e      	b.n	80054de <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	461a      	mov	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054da:	3305      	adds	r3, #5
 80054dc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4a5c      	ldr	r2, [pc, #368]	@ (8005654 <HAL_I2S_Init+0x270>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	08db      	lsrs	r3, r3, #3
 80054e8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	085b      	lsrs	r3, r3, #1
 80054fa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e003      	b.n	800550c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005504:	2302      	movs	r3, #2
 8005506:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d902      	bls.n	8005518 <HAL_I2S_Init+0x134>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2bff      	cmp	r3, #255	@ 0xff
 8005516:	d907      	bls.n	8005528 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551c:	f043 0210 	orr.w	r2, r3, #16
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e08f      	b.n	8005648 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	ea42 0103 	orr.w	r1, r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	430a      	orrs	r2, r1
 800553a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005546:	f023 030f 	bic.w	r3, r3, #15
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6851      	ldr	r1, [r2, #4]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6892      	ldr	r2, [r2, #8]
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68d2      	ldr	r2, [r2, #12]
 8005558:	4311      	orrs	r1, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6992      	ldr	r2, [r2, #24]
 800555e:	430a      	orrs	r2, r1
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d161      	bne.n	8005638 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a38      	ldr	r2, [pc, #224]	@ (8005658 <HAL_I2S_Init+0x274>)
 8005578:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a37      	ldr	r2, [pc, #220]	@ (800565c <HAL_I2S_Init+0x278>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_I2S_Init+0x1a4>
 8005584:	4b36      	ldr	r3, [pc, #216]	@ (8005660 <HAL_I2S_Init+0x27c>)
 8005586:	e001      	b.n	800558c <HAL_I2S_Init+0x1a8>
 8005588:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	4932      	ldr	r1, [pc, #200]	@ (800565c <HAL_I2S_Init+0x278>)
 8005594:	428a      	cmp	r2, r1
 8005596:	d101      	bne.n	800559c <HAL_I2S_Init+0x1b8>
 8005598:	4a31      	ldr	r2, [pc, #196]	@ (8005660 <HAL_I2S_Init+0x27c>)
 800559a:	e001      	b.n	80055a0 <HAL_I2S_Init+0x1bc>
 800559c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80055a0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80055a4:	f023 030f 	bic.w	r3, r3, #15
 80055a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2b      	ldr	r2, [pc, #172]	@ (800565c <HAL_I2S_Init+0x278>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d101      	bne.n	80055b8 <HAL_I2S_Init+0x1d4>
 80055b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005660 <HAL_I2S_Init+0x27c>)
 80055b6:	e001      	b.n	80055bc <HAL_I2S_Init+0x1d8>
 80055b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055bc:	2202      	movs	r2, #2
 80055be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a25      	ldr	r2, [pc, #148]	@ (800565c <HAL_I2S_Init+0x278>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d101      	bne.n	80055ce <HAL_I2S_Init+0x1ea>
 80055ca:	4b25      	ldr	r3, [pc, #148]	@ (8005660 <HAL_I2S_Init+0x27c>)
 80055cc:	e001      	b.n	80055d2 <HAL_I2S_Init+0x1ee>
 80055ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055de:	d003      	beq.n	80055e8 <HAL_I2S_Init+0x204>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d103      	bne.n	80055f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80055e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	e001      	b.n	80055f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80055fe:	4313      	orrs	r3, r2
 8005600:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005608:	4313      	orrs	r3, r2
 800560a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005612:	4313      	orrs	r3, r2
 8005614:	b29a      	uxth	r2, r3
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	4313      	orrs	r3, r2
 800561a:	b29b      	uxth	r3, r3
 800561c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005620:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a0d      	ldr	r2, [pc, #52]	@ (800565c <HAL_I2S_Init+0x278>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <HAL_I2S_Init+0x24c>
 800562c:	4b0c      	ldr	r3, [pc, #48]	@ (8005660 <HAL_I2S_Init+0x27c>)
 800562e:	e001      	b.n	8005634 <HAL_I2S_Init+0x250>
 8005630:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005634:	897a      	ldrh	r2, [r7, #10]
 8005636:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3720      	adds	r7, #32
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	0800575b 	.word	0x0800575b
 8005654:	cccccccd 	.word	0xcccccccd
 8005658:	08005871 	.word	0x08005871
 800565c:	40003800 	.word	0x40003800
 8005660:	40003400 	.word	0x40003400

08005664 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	881a      	ldrh	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	1c9a      	adds	r2, r3, #2
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10e      	bne.n	80056f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80056e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff ffb8 	bl	8005664 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056f4:	bf00      	nop
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	b292      	uxth	r2, r2
 8005710:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005716:	1c9a      	adds	r2, r3, #2
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005720:	b29b      	uxth	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10e      	bne.n	8005752 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005742:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff93 	bl	8005678 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b086      	sub	sp, #24
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b04      	cmp	r3, #4
 8005774:	d13a      	bne.n	80057ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d109      	bne.n	8005794 <I2S_IRQHandler+0x3a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578a:	2b40      	cmp	r3, #64	@ 0x40
 800578c:	d102      	bne.n	8005794 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff ffb4 	bl	80056fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579a:	2b40      	cmp	r3, #64	@ 0x40
 800579c:	d126      	bne.n	80057ec <I2S_IRQHandler+0x92>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d11f      	bne.n	80057ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80057bc:	2300      	movs	r3, #0
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	f043 0202 	orr.w	r2, r3, #2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff ff50 	bl	800568c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d136      	bne.n	8005866 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d109      	bne.n	8005816 <I2S_IRQHandler+0xbc>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580c:	2b80      	cmp	r3, #128	@ 0x80
 800580e:	d102      	bne.n	8005816 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff ff45 	bl	80056a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d122      	bne.n	8005866 <I2S_IRQHandler+0x10c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	d11b      	bne.n	8005866 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800583c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005858:	f043 0204 	orr.w	r2, r3, #4
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ff13 	bl	800568c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005866:	bf00      	nop
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a92      	ldr	r2, [pc, #584]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800588a:	4b92      	ldr	r3, [pc, #584]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800588c:	e001      	b.n	8005892 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800588e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a8b      	ldr	r2, [pc, #556]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d101      	bne.n	80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80058a8:	4b8a      	ldr	r3, [pc, #552]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058aa:	e001      	b.n	80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80058ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058bc:	d004      	beq.n	80058c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 8099 	bne.w	80059fa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d107      	bne.n	80058e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f925 	bl	8005b2c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d107      	bne.n	80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9c8 	bl	8005c8c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005902:	2b40      	cmp	r3, #64	@ 0x40
 8005904:	d13a      	bne.n	800597c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d035      	beq.n	800597c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a6e      	ldr	r2, [pc, #440]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d101      	bne.n	800591e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800591a:	4b6e      	ldr	r3, [pc, #440]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800591c:	e001      	b.n	8005922 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800591e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4969      	ldr	r1, [pc, #420]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800592a:	428b      	cmp	r3, r1
 800592c:	d101      	bne.n	8005932 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800592e:	4b69      	ldr	r3, [pc, #420]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005930:	e001      	b.n	8005936 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005932:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005936:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800593a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800594a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	f043 0202 	orr.w	r2, r3, #2
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fe88 	bl	800568c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b08      	cmp	r3, #8
 8005984:	f040 80c3 	bne.w	8005b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 80bd 	beq.w	8005b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a49      	ldr	r2, [pc, #292]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80059ae:	4b49      	ldr	r3, [pc, #292]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059b0:	e001      	b.n	80059b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80059b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4944      	ldr	r1, [pc, #272]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059be:	428b      	cmp	r3, r1
 80059c0:	d101      	bne.n	80059c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80059c2:	4b44      	ldr	r3, [pc, #272]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059c4:	e001      	b.n	80059ca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80059c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059ce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80059d0:	2300      	movs	r3, #0
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ea:	f043 0204 	orr.w	r2, r3, #4
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fe4a 	bl	800568c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059f8:	e089      	b.n	8005b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d107      	bne.n	8005a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8be 	bl	8005b90 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d107      	bne.n	8005a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8fd 	bl	8005c28 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a34:	2b40      	cmp	r3, #64	@ 0x40
 8005a36:	d12f      	bne.n	8005a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d02a      	beq.n	8005a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a50:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a5e:	e001      	b.n	8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005a60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4919      	ldr	r1, [pc, #100]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	d101      	bne.n	8005a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005a70:	4b18      	ldr	r3, [pc, #96]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a72:	e001      	b.n	8005a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005a74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8a:	f043 0202 	orr.w	r2, r3, #2
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fdfa 	bl	800568c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d136      	bne.n	8005b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d031      	beq.n	8005b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a07      	ldr	r2, [pc, #28]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d101      	bne.n	8005aba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005ab6:	4b07      	ldr	r3, [pc, #28]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ab8:	e001      	b.n	8005abe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005aba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4902      	ldr	r1, [pc, #8]	@ (8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ac6:	428b      	cmp	r3, r1
 8005ac8:	d106      	bne.n	8005ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005aca:	4b02      	ldr	r3, [pc, #8]	@ (8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005acc:	e006      	b.n	8005adc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005ace:	bf00      	nop
 8005ad0:	40003800 	.word	0x40003800
 8005ad4:	40003400 	.word	0x40003400
 8005ad8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005adc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ae0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005af0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	f043 0204 	orr.w	r2, r3, #4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fdc0 	bl	800568c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b0c:	e000      	b.n	8005b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b0e:	bf00      	nop
}
 8005b10:	bf00      	nop
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	1c99      	adds	r1, r3, #2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6251      	str	r1, [r2, #36]	@ 0x24
 8005b3e:	881a      	ldrh	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d113      	bne.n	8005b86 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff ffc9 	bl	8005b18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	1c99      	adds	r1, r3, #2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6251      	str	r1, [r2, #36]	@ 0x24
 8005ba2:	8819      	ldrh	r1, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c20 <I2SEx_TxISR_I2SExt+0x90>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d101      	bne.n	8005bb2 <I2SEx_TxISR_I2SExt+0x22>
 8005bae:	4b1d      	ldr	r3, [pc, #116]	@ (8005c24 <I2SEx_TxISR_I2SExt+0x94>)
 8005bb0:	e001      	b.n	8005bb6 <I2SEx_TxISR_I2SExt+0x26>
 8005bb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d121      	bne.n	8005c16 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a12      	ldr	r2, [pc, #72]	@ (8005c20 <I2SEx_TxISR_I2SExt+0x90>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d101      	bne.n	8005be0 <I2SEx_TxISR_I2SExt+0x50>
 8005bdc:	4b11      	ldr	r3, [pc, #68]	@ (8005c24 <I2SEx_TxISR_I2SExt+0x94>)
 8005bde:	e001      	b.n	8005be4 <I2SEx_TxISR_I2SExt+0x54>
 8005be0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	490d      	ldr	r1, [pc, #52]	@ (8005c20 <I2SEx_TxISR_I2SExt+0x90>)
 8005bec:	428b      	cmp	r3, r1
 8005bee:	d101      	bne.n	8005bf4 <I2SEx_TxISR_I2SExt+0x64>
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c24 <I2SEx_TxISR_I2SExt+0x94>)
 8005bf2:	e001      	b.n	8005bf8 <I2SEx_TxISR_I2SExt+0x68>
 8005bf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bf8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005bfc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d106      	bne.n	8005c16 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff ff81 	bl	8005b18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	40003800 	.word	0x40003800
 8005c24:	40003400 	.word	0x40003400

08005c28 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68d8      	ldr	r0, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3a:	1c99      	adds	r1, r3, #2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005c40:	b282      	uxth	r2, r0
 8005c42:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d113      	bne.n	8005c84 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c6a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff ff4a 	bl	8005b18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c84:	bf00      	nop
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a20      	ldr	r2, [pc, #128]	@ (8005d1c <I2SEx_RxISR_I2SExt+0x90>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d101      	bne.n	8005ca2 <I2SEx_RxISR_I2SExt+0x16>
 8005c9e:	4b20      	ldr	r3, [pc, #128]	@ (8005d20 <I2SEx_RxISR_I2SExt+0x94>)
 8005ca0:	e001      	b.n	8005ca6 <I2SEx_RxISR_I2SExt+0x1a>
 8005ca2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ca6:	68d8      	ldr	r0, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	1c99      	adds	r1, r3, #2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005cb2:	b282      	uxth	r2, r0
 8005cb4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d121      	bne.n	8005d12 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a12      	ldr	r2, [pc, #72]	@ (8005d1c <I2SEx_RxISR_I2SExt+0x90>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <I2SEx_RxISR_I2SExt+0x50>
 8005cd8:	4b11      	ldr	r3, [pc, #68]	@ (8005d20 <I2SEx_RxISR_I2SExt+0x94>)
 8005cda:	e001      	b.n	8005ce0 <I2SEx_RxISR_I2SExt+0x54>
 8005cdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	490d      	ldr	r1, [pc, #52]	@ (8005d1c <I2SEx_RxISR_I2SExt+0x90>)
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	d101      	bne.n	8005cf0 <I2SEx_RxISR_I2SExt+0x64>
 8005cec:	4b0c      	ldr	r3, [pc, #48]	@ (8005d20 <I2SEx_RxISR_I2SExt+0x94>)
 8005cee:	e001      	b.n	8005cf4 <I2SEx_RxISR_I2SExt+0x68>
 8005cf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cf4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005cf8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ff03 	bl	8005b18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d12:	bf00      	nop
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40003800 	.word	0x40003800
 8005d20:	40003400 	.word	0x40003400

08005d24 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b08d      	sub	sp, #52	@ 0x34
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f003 f99f 	bl	800907e <USB_GetMode>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 848c 	bne.w	8006660 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f003 f903 	bl	8008f58 <USB_ReadInterrupts>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 8482 	beq.w	800665e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f003 f8f0 	bl	8008f58 <USB_ReadInterrupts>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d107      	bne.n	8005d92 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695a      	ldr	r2, [r3, #20]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f002 0202 	and.w	r2, r2, #2
 8005d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f003 f8de 	bl	8008f58 <USB_ReadInterrupts>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d161      	bne.n	8005e6a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699a      	ldr	r2, [r3, #24]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0210 	bic.w	r2, r2, #16
 8005db4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f003 020f 	and.w	r2, r3, #15
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005ddc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005de0:	d124      	bne.n	8005e2c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d035      	beq.n	8005e5a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005df8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6a38      	ldr	r0, [r7, #32]
 8005e02:	f002 ff57 	bl	8008cb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	091b      	lsrs	r3, r3, #4
 8005e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e12:	441a      	add	r2, r3
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	091b      	lsrs	r3, r3, #4
 8005e20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e24:	441a      	add	r2, r3
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	615a      	str	r2, [r3, #20]
 8005e2a:	e016      	b.n	8005e5a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005e32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e36:	d110      	bne.n	8005e5a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e3e:	2208      	movs	r2, #8
 8005e40:	4619      	mov	r1, r3
 8005e42:	6a38      	ldr	r0, [r7, #32]
 8005e44:	f002 ff36 	bl	8008cb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	695a      	ldr	r2, [r3, #20]
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	091b      	lsrs	r3, r3, #4
 8005e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e54:	441a      	add	r2, r3
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0210 	orr.w	r2, r2, #16
 8005e68:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f003 f872 	bl	8008f58 <USB_ReadInterrupts>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e7e:	f040 80a7 	bne.w	8005fd0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f003 f877 	bl	8008f7e <USB_ReadDevAllOutEpInterrupt>
 8005e90:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005e92:	e099      	b.n	8005fc8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 808e 	beq.w	8005fbc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f003 f89b 	bl	8008fe6 <USB_ReadDevOutEPInterrupt>
 8005eb0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00c      	beq.n	8005ed6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2301      	movs	r3, #1
 8005ecc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005ece:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fe41 	bl	8006b58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00c      	beq.n	8005efa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eec:	461a      	mov	r2, r3
 8005eee:	2308      	movs	r3, #8
 8005ef0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 ff17 	bl	8006d28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f10:	461a      	mov	r2, r3
 8005f12:	2310      	movs	r3, #16
 8005f14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d030      	beq.n	8005f82 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f28:	2b80      	cmp	r3, #128	@ 0x80
 8005f2a:	d109      	bne.n	8005f40 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f3e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f42:	4613      	mov	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4413      	add	r3, r2
 8005f52:	3304      	adds	r3, #4
 8005f54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	78db      	ldrb	r3, [r3, #3]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d108      	bne.n	8005f70 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2200      	movs	r2, #0
 8005f62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f004 fb7a 	bl	800a664 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2302      	movs	r3, #2
 8005f80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d008      	beq.n	8005f9e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2320      	movs	r3, #32
 8005f9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f47f af62 	bne.w	8005e94 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f002 ffbf 	bl	8008f58 <USB_ReadInterrupts>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fe0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fe4:	f040 80db 	bne.w	800619e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f002 ffe0 	bl	8008fb2 <USB_ReadDevAllInEpInterrupt>
 8005ff2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005ff8:	e0cd      	b.n	8006196 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80c2 	beq.w	800618a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f003 f806 	bl	8009022 <USB_ReadDevInEPInterrupt>
 8006016:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d057      	beq.n	80060d2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	2201      	movs	r2, #1
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	43db      	mvns	r3, r3
 800603c:	69f9      	ldr	r1, [r7, #28]
 800603e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006042:	4013      	ands	r3, r2
 8006044:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006052:	461a      	mov	r2, r3
 8006054:	2301      	movs	r3, #1
 8006056:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	799b      	ldrb	r3, [r3, #6]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d132      	bne.n	80060c6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006064:	4613      	mov	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	3320      	adds	r3, #32
 8006070:	6819      	ldr	r1, [r3, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006076:	4613      	mov	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4403      	add	r3, r0
 8006080:	331c      	adds	r3, #28
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4419      	add	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4403      	add	r3, r0
 8006094:	3320      	adds	r3, #32
 8006096:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	d113      	bne.n	80060c6 <HAL_PCD_IRQHandler+0x3a2>
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	3324      	adds	r3, #36	@ 0x24
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d108      	bne.n	80060c6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060be:	461a      	mov	r2, r3
 80060c0:	2101      	movs	r1, #1
 80060c2:	f003 f80d 	bl	80090e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f004 fa45 	bl	800a55c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e8:	461a      	mov	r2, r3
 80060ea:	2308      	movs	r3, #8
 80060ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006104:	461a      	mov	r2, r3
 8006106:	2310      	movs	r3, #16
 8006108:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006120:	461a      	mov	r2, r3
 8006122:	2340      	movs	r3, #64	@ 0x40
 8006124:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d023      	beq.n	8006178 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006130:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006132:	6a38      	ldr	r0, [r7, #32]
 8006134:	f002 f95a 	bl	80083ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800613a:	4613      	mov	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	3310      	adds	r3, #16
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	3304      	adds	r3, #4
 800614a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	78db      	ldrb	r3, [r3, #3]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d108      	bne.n	8006166 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2200      	movs	r2, #0
 8006158:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	b2db      	uxtb	r3, r3
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f004 fa91 	bl	800a688 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006172:	461a      	mov	r2, r3
 8006174:	2302      	movs	r3, #2
 8006176:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006182:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fc5b 	bl	8006a40 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	3301      	adds	r3, #1
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	f47f af2e 	bne.w	8005ffa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f002 fed8 	bl	8008f58 <USB_ReadInterrupts>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061b2:	d122      	bne.n	80061fa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d108      	bne.n	80061e4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80061da:	2100      	movs	r1, #0
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fde9 	bl	8006db4 <HAL_PCDEx_LPM_Callback>
 80061e2:	e002      	b.n	80061ea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f004 fa2f 	bl	800a648 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695a      	ldr	r2, [r3, #20]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80061f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f002 feaa 	bl	8008f58 <USB_ReadInterrupts>
 8006204:	4603      	mov	r3, r0
 8006206:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800620a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800620e:	d112      	bne.n	8006236 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b01      	cmp	r3, #1
 800621e:	d102      	bne.n	8006226 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f004 f9eb 	bl	800a5fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006234:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f002 fe8c 	bl	8008f58 <USB_ReadInterrupts>
 8006240:	4603      	mov	r3, r0
 8006242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800624a:	f040 80b7 	bne.w	80063bc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2110      	movs	r1, #16
 8006268:	4618      	mov	r0, r3
 800626a:	f002 f8bf 	bl	80083ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006272:	e046      	b.n	8006302 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006280:	461a      	mov	r2, r3
 8006282:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006286:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80062a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b4:	461a      	mov	r2, r3
 80062b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	3301      	adds	r3, #1
 8006300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	461a      	mov	r2, r3
 8006308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630a:	4293      	cmp	r3, r2
 800630c:	d3b2      	bcc.n	8006274 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800631c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006320:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	7bdb      	ldrb	r3, [r3, #15]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d016      	beq.n	8006358 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800633a:	f043 030b 	orr.w	r3, r3, #11
 800633e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006350:	f043 030b 	orr.w	r3, r3, #11
 8006354:	6453      	str	r3, [r2, #68]	@ 0x44
 8006356:	e015      	b.n	8006384 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006366:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800636a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800636e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800637e:	f043 030b 	orr.w	r3, r3, #11
 8006382:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006392:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006396:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80063a6:	461a      	mov	r2, r3
 80063a8:	f002 fe9a 	bl	80090e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695a      	ldr	r2, [r3, #20]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80063ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f002 fdc9 	bl	8008f58 <USB_ReadInterrupts>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063d0:	d123      	bne.n	800641a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f002 fe5f 	bl	800909a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f002 f835 	bl	8008450 <USB_GetDevSpeed>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681c      	ldr	r4, [r3, #0]
 80063f2:	f001 f94f 	bl	8007694 <HAL_RCC_GetHCLKFreq>
 80063f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063fc:	461a      	mov	r2, r3
 80063fe:	4620      	mov	r0, r4
 8006400:	f001 ff52 	bl	80082a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f004 f8d1 	bl	800a5ac <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006418:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f002 fd9a 	bl	8008f58 <USB_ReadInterrupts>
 8006424:	4603      	mov	r3, r0
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b08      	cmp	r3, #8
 800642c:	d10a      	bne.n	8006444 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f004 f8ae 	bl	800a590 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f002 0208 	and.w	r2, r2, #8
 8006442:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f002 fd85 	bl	8008f58 <USB_ReadInterrupts>
 800644e:	4603      	mov	r3, r0
 8006450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006454:	2b80      	cmp	r3, #128	@ 0x80
 8006456:	d123      	bne.n	80064a0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006464:	2301      	movs	r3, #1
 8006466:	627b      	str	r3, [r7, #36]	@ 0x24
 8006468:	e014      	b.n	8006494 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800646e:	4613      	mov	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d105      	bne.n	800648e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	b2db      	uxtb	r3, r3
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 faa8 	bl	80069de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	3301      	adds	r3, #1
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	791b      	ldrb	r3, [r3, #4]
 8006498:	461a      	mov	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	4293      	cmp	r3, r2
 800649e:	d3e4      	bcc.n	800646a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f002 fd57 	bl	8008f58 <USB_ReadInterrupts>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b4:	d13c      	bne.n	8006530 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064b6:	2301      	movs	r3, #1
 80064b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ba:	e02b      	b.n	8006514 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d0:	4613      	mov	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	3318      	adds	r3, #24
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d115      	bne.n	800650e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80064e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	da12      	bge.n	800650e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ec:	4613      	mov	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	3317      	adds	r3, #23
 80064f8:	2201      	movs	r2, #1
 80064fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006504:	b2db      	uxtb	r3, r3
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fa68 	bl	80069de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	3301      	adds	r3, #1
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	791b      	ldrb	r3, [r3, #4]
 8006518:	461a      	mov	r2, r3
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	4293      	cmp	r3, r2
 800651e:	d3cd      	bcc.n	80064bc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695a      	ldr	r2, [r3, #20]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800652e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f002 fd0f 	bl	8008f58 <USB_ReadInterrupts>
 800653a:	4603      	mov	r3, r0
 800653c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006544:	d156      	bne.n	80065f4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006546:	2301      	movs	r3, #1
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24
 800654a:	e045      	b.n	80065d8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006560:	4613      	mov	r3, r2
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d12e      	bne.n	80065d2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006574:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006576:	2b00      	cmp	r3, #0
 8006578:	da2b      	bge.n	80065d2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006586:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800658a:	429a      	cmp	r2, r3
 800658c:	d121      	bne.n	80065d2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006592:	4613      	mov	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80065a0:	2201      	movs	r2, #1
 80065a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065ce:	6053      	str	r3, [r2, #4]
            break;
 80065d0:	e008      	b.n	80065e4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	3301      	adds	r3, #1
 80065d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	791b      	ldrb	r3, [r3, #4]
 80065dc:	461a      	mov	r2, r3
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d3b3      	bcc.n	800654c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80065f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f002 fcad 	bl	8008f58 <USB_ReadInterrupts>
 80065fe:	4603      	mov	r3, r0
 8006600:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006608:	d10a      	bne.n	8006620 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f004 f84e 	bl	800a6ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695a      	ldr	r2, [r3, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800661e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f002 fc97 	bl	8008f58 <USB_ReadInterrupts>
 800662a:	4603      	mov	r3, r0
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d115      	bne.n	8006660 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f004 f83e 	bl	800a6c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6859      	ldr	r1, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	430a      	orrs	r2, r1
 800665a:	605a      	str	r2, [r3, #4]
 800665c:	e000      	b.n	8006660 <HAL_PCD_IRQHandler+0x93c>
      return;
 800665e:	bf00      	nop
    }
  }
}
 8006660:	3734      	adds	r7, #52	@ 0x34
 8006662:	46bd      	mov	sp, r7
 8006664:	bd90      	pop	{r4, r7, pc}

08006666 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_PCD_SetAddress+0x1a>
 800667c:	2302      	movs	r3, #2
 800667e:	e012      	b.n	80066a6 <HAL_PCD_SetAddress+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	78fa      	ldrb	r2, [r7, #3]
 800668c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f002 fc38 	bl	8008f0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	4608      	mov	r0, r1
 80066b8:	4611      	mov	r1, r2
 80066ba:	461a      	mov	r2, r3
 80066bc:	4603      	mov	r3, r0
 80066be:	70fb      	strb	r3, [r7, #3]
 80066c0:	460b      	mov	r3, r1
 80066c2:	803b      	strh	r3, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	da0f      	bge.n	80066f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	f003 020f 	and.w	r2, r3, #15
 80066da:	4613      	mov	r3, r2
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	3310      	adds	r3, #16
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	4413      	add	r3, r2
 80066e8:	3304      	adds	r3, #4
 80066ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2201      	movs	r2, #1
 80066f0:	705a      	strb	r2, [r3, #1]
 80066f2:	e00f      	b.n	8006714 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	4613      	mov	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	4413      	add	r3, r2
 800670a:	3304      	adds	r3, #4
 800670c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	b2da      	uxtb	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006720:	883b      	ldrh	r3, [r7, #0]
 8006722:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	78ba      	ldrb	r2, [r7, #2]
 800672e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006742:	78bb      	ldrb	r3, [r7, #2]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d102      	bne.n	800674e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_PCD_EP_Open+0xae>
 8006758:	2302      	movs	r3, #2
 800675a:	e00e      	b.n	800677a <HAL_PCD_EP_Open+0xcc>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68f9      	ldr	r1, [r7, #12]
 800676a:	4618      	mov	r0, r3
 800676c:	f001 fe95 	bl	800849a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006778:	7afb      	ldrb	r3, [r7, #11]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b086      	sub	sp, #24
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	460b      	mov	r3, r1
 8006790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	4613      	mov	r3, r2
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	3304      	adds	r3, #4
 80067aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2200      	movs	r2, #0
 80067bc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2200      	movs	r2, #0
 80067c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	799b      	ldrb	r3, [r3, #6]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d102      	bne.n	80067de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	799b      	ldrb	r3, [r3, #6]
 80067e6:	461a      	mov	r2, r3
 80067e8:	6979      	ldr	r1, [r7, #20]
 80067ea:	f001 fedd 	bl	80085a8 <USB_EPStartXfer>

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	460b      	mov	r3, r1
 8006806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	f003 020f 	and.w	r2, r3, #15
 800680e:	4613      	mov	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	3310      	adds	r3, #16
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	3304      	adds	r3, #4
 800681e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2200      	movs	r2, #0
 8006830:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2201      	movs	r2, #1
 8006836:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006838:	7afb      	ldrb	r3, [r7, #11]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	b2da      	uxtb	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	799b      	ldrb	r3, [r3, #6]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d102      	bne.n	8006852 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	799b      	ldrb	r3, [r3, #6]
 800685a:	461a      	mov	r2, r3
 800685c:	6979      	ldr	r1, [r7, #20]
 800685e:	f001 fea3 	bl	80085a8 <USB_EPStartXfer>

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	7912      	ldrb	r2, [r2, #4]
 8006882:	4293      	cmp	r3, r2
 8006884:	d901      	bls.n	800688a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e04f      	b.n	800692a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800688a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800688e:	2b00      	cmp	r3, #0
 8006890:	da0f      	bge.n	80068b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	f003 020f 	and.w	r2, r3, #15
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	3310      	adds	r3, #16
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	3304      	adds	r3, #4
 80068a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	705a      	strb	r2, [r3, #1]
 80068b0:	e00d      	b.n	80068ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068b2:	78fa      	ldrb	r2, [r7, #3]
 80068b4:	4613      	mov	r3, r2
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	4413      	add	r3, r2
 80068c4:	3304      	adds	r3, #4
 80068c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_PCD_EP_SetStall+0x82>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e01d      	b.n	800692a <HAL_PCD_EP_SetStall+0xbe>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f002 fa31 	bl	8008d64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	2b00      	cmp	r3, #0
 800690a:	d109      	bne.n	8006920 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	7999      	ldrb	r1, [r3, #6]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800691a:	461a      	mov	r2, r3
 800691c:	f002 fbe0 	bl	80090e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	460b      	mov	r3, r1
 800693c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	7912      	ldrb	r2, [r2, #4]
 8006948:	4293      	cmp	r3, r2
 800694a:	d901      	bls.n	8006950 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e042      	b.n	80069d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006954:	2b00      	cmp	r3, #0
 8006956:	da0f      	bge.n	8006978 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	f003 020f 	and.w	r2, r3, #15
 800695e:	4613      	mov	r3, r2
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	3310      	adds	r3, #16
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4413      	add	r3, r2
 800696c:	3304      	adds	r3, #4
 800696e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	705a      	strb	r2, [r3, #1]
 8006976:	e00f      	b.n	8006998 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	f003 020f 	and.w	r2, r3, #15
 800697e:	4613      	mov	r3, r2
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	3304      	adds	r3, #4
 8006990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_PCD_EP_ClrStall+0x86>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e00e      	b.n	80069d6 <HAL_PCD_EP_ClrStall+0xa4>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68f9      	ldr	r1, [r7, #12]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f002 fa3a 	bl	8008e40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	460b      	mov	r3, r1
 80069e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80069ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	da0c      	bge.n	8006a0c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	f003 020f 	and.w	r2, r3, #15
 80069f8:	4613      	mov	r3, r2
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4413      	add	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	3310      	adds	r3, #16
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	4413      	add	r3, r2
 8006a06:	3304      	adds	r3, #4
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e00c      	b.n	8006a26 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	f003 020f 	and.w	r2, r3, #15
 8006a12:	4613      	mov	r3, r2
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	3304      	adds	r3, #4
 8006a24:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f002 f859 	bl	8008ae4 <USB_EPStopXfer>
 8006a32:	4603      	mov	r3, r0
 8006a34:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006a36:	7afb      	ldrb	r3, [r7, #11]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	@ 0x28
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	4613      	mov	r3, r2
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	3310      	adds	r3, #16
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	4413      	add	r3, r2
 8006a64:	3304      	adds	r3, #4
 8006a66:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d901      	bls.n	8006a78 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e06b      	b.n	8006b50 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d902      	bls.n	8006a94 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3303      	adds	r3, #3
 8006a98:	089b      	lsrs	r3, r3, #2
 8006a9a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a9c:	e02a      	b.n	8006af4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	691a      	ldr	r2, [r3, #16]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d902      	bls.n	8006aba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	3303      	adds	r3, #3
 8006abe:	089b      	lsrs	r3, r3, #2
 8006ac0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68d9      	ldr	r1, [r3, #12]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	6978      	ldr	r0, [r7, #20]
 8006ad8:	f002 f8ae 	bl	8008c38 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	441a      	add	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	441a      	add	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d809      	bhi.n	8006b1e <PCD_WriteEmptyTxFifo+0xde>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d203      	bcs.n	8006b1e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1bf      	bne.n	8006a9e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d811      	bhi.n	8006b4e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	2201      	movs	r2, #1
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	43db      	mvns	r3, r3
 8006b44:	6939      	ldr	r1, [r7, #16]
 8006b46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	333c      	adds	r3, #60	@ 0x3c
 8006b70:	3304      	adds	r3, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	799b      	ldrb	r3, [r3, #6]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d17b      	bne.n	8006c86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d015      	beq.n	8006bc4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	4a61      	ldr	r2, [pc, #388]	@ (8006d20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	f240 80b9 	bls.w	8006d14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80b3 	beq.w	8006d14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bc0:	6093      	str	r3, [r2, #8]
 8006bc2:	e0a7      	b.n	8006d14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2320      	movs	r3, #32
 8006bde:	6093      	str	r3, [r2, #8]
 8006be0:	e098      	b.n	8006d14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 8093 	bne.w	8006d14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8006d20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d90f      	bls.n	8006c16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c12:	6093      	str	r3, [r2, #8]
 8006c14:	e07e      	b.n	8006d14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4413      	add	r3, r2
 8006c28:	3304      	adds	r3, #4
 8006c2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1a      	ldr	r2, [r3, #32]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	0159      	lsls	r1, r3, #5
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	440b      	add	r3, r1
 8006c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d114      	bne.n	8006c78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c60:	461a      	mov	r2, r3
 8006c62:	2101      	movs	r1, #1
 8006c64:	f002 fa3c 	bl	80090e0 <USB_EP0_OutStart>
 8006c68:	e006      	b.n	8006c78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	441a      	add	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f003 fc51 	bl	800a526 <HAL_PCD_DataOutStageCallback>
 8006c84:	e046      	b.n	8006d14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	4a26      	ldr	r2, [pc, #152]	@ (8006d24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d124      	bne.n	8006cd8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006caa:	6093      	str	r3, [r2, #8]
 8006cac:	e032      	b.n	8006d14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	2320      	movs	r3, #32
 8006cc8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f003 fc28 	bl	800a526 <HAL_PCD_DataOutStageCallback>
 8006cd6:	e01d      	b.n	8006d14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d114      	bne.n	8006d08 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d108      	bne.n	8006d08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d00:	461a      	mov	r2, r3
 8006d02:	2100      	movs	r1, #0
 8006d04:	f002 f9ec 	bl	80090e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f003 fc09 	bl	800a526 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	4f54300a 	.word	0x4f54300a
 8006d24:	4f54310a 	.word	0x4f54310a

08006d28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	333c      	adds	r3, #60	@ 0x3c
 8006d40:	3304      	adds	r3, #4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d90e      	bls.n	8006d7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d74:	461a      	mov	r2, r3
 8006d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f003 fbc0 	bl	800a502 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4a0a      	ldr	r2, [pc, #40]	@ (8006db0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d90c      	bls.n	8006da4 <PCD_EP_OutSetupPacket_int+0x7c>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	799b      	ldrb	r3, [r3, #6]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d108      	bne.n	8006da4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	2101      	movs	r1, #1
 8006da0:	f002 f99e 	bl	80090e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	4f54300a 	.word	0x4f54300a

08006db4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e267      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d075      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dea:	4b88      	ldr	r3, [pc, #544]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 030c 	and.w	r3, r3, #12
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d00c      	beq.n	8006e10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006df6:	4b85      	ldr	r3, [pc, #532]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d112      	bne.n	8006e28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e02:	4b82      	ldr	r3, [pc, #520]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e0e:	d10b      	bne.n	8006e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e10:	4b7e      	ldr	r3, [pc, #504]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d05b      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x108>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d157      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e242      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e30:	d106      	bne.n	8006e40 <HAL_RCC_OscConfig+0x74>
 8006e32:	4b76      	ldr	r3, [pc, #472]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a75      	ldr	r2, [pc, #468]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	e01d      	b.n	8006e7c <HAL_RCC_OscConfig+0xb0>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e48:	d10c      	bne.n	8006e64 <HAL_RCC_OscConfig+0x98>
 8006e4a:	4b70      	ldr	r3, [pc, #448]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	4b6d      	ldr	r3, [pc, #436]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a6c      	ldr	r2, [pc, #432]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	e00b      	b.n	8006e7c <HAL_RCC_OscConfig+0xb0>
 8006e64:	4b69      	ldr	r3, [pc, #420]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a68      	ldr	r2, [pc, #416]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	4b66      	ldr	r3, [pc, #408]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a65      	ldr	r2, [pc, #404]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d013      	beq.n	8006eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e84:	f7fc fba4 	bl	80035d0 <HAL_GetTick>
 8006e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e8c:	f7fc fba0 	bl	80035d0 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b64      	cmp	r3, #100	@ 0x64
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e207      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0xc0>
 8006eaa:	e014      	b.n	8006ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eac:	f7fc fb90 	bl	80035d0 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eb4:	f7fc fb8c 	bl	80035d0 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b64      	cmp	r3, #100	@ 0x64
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e1f3      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ec6:	4b51      	ldr	r3, [pc, #324]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f0      	bne.n	8006eb4 <HAL_RCC_OscConfig+0xe8>
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d063      	beq.n	8006faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eee:	4b47      	ldr	r3, [pc, #284]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d11c      	bne.n	8006f34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006efa:	4b44      	ldr	r3, [pc, #272]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d116      	bne.n	8006f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f06:	4b41      	ldr	r3, [pc, #260]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_RCC_OscConfig+0x152>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d001      	beq.n	8006f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e1c7      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4937      	ldr	r1, [pc, #220]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f32:	e03a      	b.n	8006faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d020      	beq.n	8006f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f3c:	4b34      	ldr	r3, [pc, #208]	@ (8007010 <HAL_RCC_OscConfig+0x244>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f42:	f7fc fb45 	bl	80035d0 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f4a:	f7fc fb41 	bl	80035d0 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e1a8      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f0      	beq.n	8006f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f68:	4b28      	ldr	r3, [pc, #160]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	4925      	ldr	r1, [pc, #148]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	600b      	str	r3, [r1, #0]
 8006f7c:	e015      	b.n	8006faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f7e:	4b24      	ldr	r3, [pc, #144]	@ (8007010 <HAL_RCC_OscConfig+0x244>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fc fb24 	bl	80035d0 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f8c:	f7fc fb20 	bl	80035d0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e187      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d036      	beq.n	8007024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d016      	beq.n	8006fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fbe:	4b15      	ldr	r3, [pc, #84]	@ (8007014 <HAL_RCC_OscConfig+0x248>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc4:	f7fc fb04 	bl	80035d0 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fcc:	f7fc fb00 	bl	80035d0 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e167      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fde:	4b0b      	ldr	r3, [pc, #44]	@ (800700c <HAL_RCC_OscConfig+0x240>)
 8006fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0f0      	beq.n	8006fcc <HAL_RCC_OscConfig+0x200>
 8006fea:	e01b      	b.n	8007024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fec:	4b09      	ldr	r3, [pc, #36]	@ (8007014 <HAL_RCC_OscConfig+0x248>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff2:	f7fc faed 	bl	80035d0 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ff8:	e00e      	b.n	8007018 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ffa:	f7fc fae9 	bl	80035d0 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d907      	bls.n	8007018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e150      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
 800700c:	40023800 	.word	0x40023800
 8007010:	42470000 	.word	0x42470000
 8007014:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007018:	4b88      	ldr	r3, [pc, #544]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 800701a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1ea      	bne.n	8006ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8097 	beq.w	8007160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007036:	4b81      	ldr	r3, [pc, #516]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 8007038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10f      	bne.n	8007062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007042:	2300      	movs	r3, #0
 8007044:	60bb      	str	r3, [r7, #8]
 8007046:	4b7d      	ldr	r3, [pc, #500]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	4a7c      	ldr	r2, [pc, #496]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 800704c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007050:	6413      	str	r3, [r2, #64]	@ 0x40
 8007052:	4b7a      	ldr	r3, [pc, #488]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800705a:	60bb      	str	r3, [r7, #8]
 800705c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800705e:	2301      	movs	r3, #1
 8007060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007062:	4b77      	ldr	r3, [pc, #476]	@ (8007240 <HAL_RCC_OscConfig+0x474>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800706a:	2b00      	cmp	r3, #0
 800706c:	d118      	bne.n	80070a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800706e:	4b74      	ldr	r3, [pc, #464]	@ (8007240 <HAL_RCC_OscConfig+0x474>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a73      	ldr	r2, [pc, #460]	@ (8007240 <HAL_RCC_OscConfig+0x474>)
 8007074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800707a:	f7fc faa9 	bl	80035d0 <HAL_GetTick>
 800707e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007080:	e008      	b.n	8007094 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007082:	f7fc faa5 	bl	80035d0 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e10c      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007094:	4b6a      	ldr	r3, [pc, #424]	@ (8007240 <HAL_RCC_OscConfig+0x474>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f0      	beq.n	8007082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d106      	bne.n	80070b6 <HAL_RCC_OscConfig+0x2ea>
 80070a8:	4b64      	ldr	r3, [pc, #400]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ac:	4a63      	ldr	r2, [pc, #396]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80070b4:	e01c      	b.n	80070f0 <HAL_RCC_OscConfig+0x324>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b05      	cmp	r3, #5
 80070bc:	d10c      	bne.n	80070d8 <HAL_RCC_OscConfig+0x30c>
 80070be:	4b5f      	ldr	r3, [pc, #380]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c2:	4a5e      	ldr	r2, [pc, #376]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070c4:	f043 0304 	orr.w	r3, r3, #4
 80070c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80070ca:	4b5c      	ldr	r3, [pc, #368]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ce:	4a5b      	ldr	r2, [pc, #364]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070d0:	f043 0301 	orr.w	r3, r3, #1
 80070d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80070d6:	e00b      	b.n	80070f0 <HAL_RCC_OscConfig+0x324>
 80070d8:	4b58      	ldr	r3, [pc, #352]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070dc:	4a57      	ldr	r2, [pc, #348]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070de:	f023 0301 	bic.w	r3, r3, #1
 80070e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80070e4:	4b55      	ldr	r3, [pc, #340]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e8:	4a54      	ldr	r2, [pc, #336]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80070ea:	f023 0304 	bic.w	r3, r3, #4
 80070ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d015      	beq.n	8007124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f8:	f7fc fa6a 	bl	80035d0 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fe:	e00a      	b.n	8007116 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007100:	f7fc fa66 	bl	80035d0 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800710e:	4293      	cmp	r3, r2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e0cb      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007116:	4b49      	ldr	r3, [pc, #292]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0ee      	beq.n	8007100 <HAL_RCC_OscConfig+0x334>
 8007122:	e014      	b.n	800714e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007124:	f7fc fa54 	bl	80035d0 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800712a:	e00a      	b.n	8007142 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800712c:	f7fc fa50 	bl	80035d0 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800713a:	4293      	cmp	r3, r2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e0b5      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007142:	4b3e      	ldr	r3, [pc, #248]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1ee      	bne.n	800712c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800714e:	7dfb      	ldrb	r3, [r7, #23]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d105      	bne.n	8007160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007154:	4b39      	ldr	r3, [pc, #228]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 8007156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007158:	4a38      	ldr	r2, [pc, #224]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 800715a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800715e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80a1 	beq.w	80072ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800716a:	4b34      	ldr	r3, [pc, #208]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 030c 	and.w	r3, r3, #12
 8007172:	2b08      	cmp	r3, #8
 8007174:	d05c      	beq.n	8007230 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d141      	bne.n	8007202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800717e:	4b31      	ldr	r3, [pc, #196]	@ (8007244 <HAL_RCC_OscConfig+0x478>)
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007184:	f7fc fa24 	bl	80035d0 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800718c:	f7fc fa20 	bl	80035d0 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e087      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800719e:	4b27      	ldr	r3, [pc, #156]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	69da      	ldr	r2, [r3, #28]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b8:	019b      	lsls	r3, r3, #6
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	085b      	lsrs	r3, r3, #1
 80071c2:	3b01      	subs	r3, #1
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071cc:	061b      	lsls	r3, r3, #24
 80071ce:	491b      	ldr	r1, [pc, #108]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007244 <HAL_RCC_OscConfig+0x478>)
 80071d6:	2201      	movs	r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071da:	f7fc f9f9 	bl	80035d0 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071e2:	f7fc f9f5 	bl	80035d0 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e05c      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071f4:	4b11      	ldr	r3, [pc, #68]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x416>
 8007200:	e054      	b.n	80072ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007202:	4b10      	ldr	r3, [pc, #64]	@ (8007244 <HAL_RCC_OscConfig+0x478>)
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007208:	f7fc f9e2 	bl	80035d0 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007210:	f7fc f9de 	bl	80035d0 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e045      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007222:	4b06      	ldr	r3, [pc, #24]	@ (800723c <HAL_RCC_OscConfig+0x470>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f0      	bne.n	8007210 <HAL_RCC_OscConfig+0x444>
 800722e:	e03d      	b.n	80072ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d107      	bne.n	8007248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e038      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
 800723c:	40023800 	.word	0x40023800
 8007240:	40007000 	.word	0x40007000
 8007244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007248:	4b1b      	ldr	r3, [pc, #108]	@ (80072b8 <HAL_RCC_OscConfig+0x4ec>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d028      	beq.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007260:	429a      	cmp	r2, r3
 8007262:	d121      	bne.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800726e:	429a      	cmp	r2, r3
 8007270:	d11a      	bne.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007278:	4013      	ands	r3, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800727e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007280:	4293      	cmp	r3, r2
 8007282:	d111      	bne.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728e:	085b      	lsrs	r3, r3, #1
 8007290:	3b01      	subs	r3, #1
 8007292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007294:	429a      	cmp	r2, r3
 8007296:	d107      	bne.n	80072a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d001      	beq.n	80072ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e000      	b.n	80072ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40023800 	.word	0x40023800

080072bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0cc      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072d0:	4b68      	ldr	r3, [pc, #416]	@ (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d90c      	bls.n	80072f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072de:	4b65      	ldr	r3, [pc, #404]	@ (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e6:	4b63      	ldr	r3, [pc, #396]	@ (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0b8      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d020      	beq.n	8007346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007310:	4b59      	ldr	r3, [pc, #356]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	4a58      	ldr	r2, [pc, #352]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800731a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007328:	4b53      	ldr	r3, [pc, #332]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	4a52      	ldr	r2, [pc, #328]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007334:	4b50      	ldr	r3, [pc, #320]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	494d      	ldr	r1, [pc, #308]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007342:	4313      	orrs	r3, r2
 8007344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d044      	beq.n	80073dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d107      	bne.n	800736a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735a:	4b47      	ldr	r3, [pc, #284]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d119      	bne.n	800739a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e07f      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d003      	beq.n	800737a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007376:	2b03      	cmp	r3, #3
 8007378:	d107      	bne.n	800738a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737a:	4b3f      	ldr	r3, [pc, #252]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e06f      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800738a:	4b3b      	ldr	r3, [pc, #236]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e067      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800739a:	4b37      	ldr	r3, [pc, #220]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f023 0203 	bic.w	r2, r3, #3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4934      	ldr	r1, [pc, #208]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073ac:	f7fc f910 	bl	80035d0 <HAL_GetTick>
 80073b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b2:	e00a      	b.n	80073ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073b4:	f7fc f90c 	bl	80035d0 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e04f      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ca:	4b2b      	ldr	r3, [pc, #172]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 020c 	and.w	r2, r3, #12
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	429a      	cmp	r2, r3
 80073da:	d1eb      	bne.n	80073b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073dc:	4b25      	ldr	r3, [pc, #148]	@ (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d20c      	bcs.n	8007404 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ea:	4b22      	ldr	r3, [pc, #136]	@ (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	b2d2      	uxtb	r2, r2
 80073f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f2:	4b20      	ldr	r3, [pc, #128]	@ (8007474 <HAL_RCC_ClockConfig+0x1b8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d001      	beq.n	8007404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e032      	b.n	800746a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007410:	4b19      	ldr	r3, [pc, #100]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4916      	ldr	r1, [pc, #88]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800741e:	4313      	orrs	r3, r2
 8007420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d009      	beq.n	8007442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800742e:	4b12      	ldr	r3, [pc, #72]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	490e      	ldr	r1, [pc, #56]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800743e:	4313      	orrs	r3, r2
 8007440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007442:	f000 f821 	bl	8007488 <HAL_RCC_GetSysClockFreq>
 8007446:	4602      	mov	r2, r0
 8007448:	4b0b      	ldr	r3, [pc, #44]	@ (8007478 <HAL_RCC_ClockConfig+0x1bc>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	091b      	lsrs	r3, r3, #4
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	490a      	ldr	r1, [pc, #40]	@ (800747c <HAL_RCC_ClockConfig+0x1c0>)
 8007454:	5ccb      	ldrb	r3, [r1, r3]
 8007456:	fa22 f303 	lsr.w	r3, r2, r3
 800745a:	4a09      	ldr	r2, [pc, #36]	@ (8007480 <HAL_RCC_ClockConfig+0x1c4>)
 800745c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800745e:	4b09      	ldr	r3, [pc, #36]	@ (8007484 <HAL_RCC_ClockConfig+0x1c8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f7fc f870 	bl	8003548 <HAL_InitTick>

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40023c00 	.word	0x40023c00
 8007478:	40023800 	.word	0x40023800
 800747c:	0800de88 	.word	0x0800de88
 8007480:	20000004 	.word	0x20000004
 8007484:	20000008 	.word	0x20000008

08007488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800748c:	b094      	sub	sp, #80	@ 0x50
 800748e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074a0:	4b79      	ldr	r3, [pc, #484]	@ (8007688 <HAL_RCC_GetSysClockFreq+0x200>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 030c 	and.w	r3, r3, #12
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d00d      	beq.n	80074c8 <HAL_RCC_GetSysClockFreq+0x40>
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	f200 80e1 	bhi.w	8007674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <HAL_RCC_GetSysClockFreq+0x34>
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d003      	beq.n	80074c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80074ba:	e0db      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074bc:	4b73      	ldr	r3, [pc, #460]	@ (800768c <HAL_RCC_GetSysClockFreq+0x204>)
 80074be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074c0:	e0db      	b.n	800767a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074c2:	4b73      	ldr	r3, [pc, #460]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x208>)
 80074c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074c6:	e0d8      	b.n	800767a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007688 <HAL_RCC_GetSysClockFreq+0x200>)
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074d2:	4b6d      	ldr	r3, [pc, #436]	@ (8007688 <HAL_RCC_GetSysClockFreq+0x200>)
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d063      	beq.n	80075a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074de:	4b6a      	ldr	r3, [pc, #424]	@ (8007688 <HAL_RCC_GetSysClockFreq+0x200>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	099b      	lsrs	r3, r3, #6
 80074e4:	2200      	movs	r2, #0
 80074e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80074ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074f2:	2300      	movs	r3, #0
 80074f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80074fa:	4622      	mov	r2, r4
 80074fc:	462b      	mov	r3, r5
 80074fe:	f04f 0000 	mov.w	r0, #0
 8007502:	f04f 0100 	mov.w	r1, #0
 8007506:	0159      	lsls	r1, r3, #5
 8007508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800750c:	0150      	lsls	r0, r2, #5
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4621      	mov	r1, r4
 8007514:	1a51      	subs	r1, r2, r1
 8007516:	6139      	str	r1, [r7, #16]
 8007518:	4629      	mov	r1, r5
 800751a:	eb63 0301 	sbc.w	r3, r3, r1
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800752c:	4659      	mov	r1, fp
 800752e:	018b      	lsls	r3, r1, #6
 8007530:	4651      	mov	r1, sl
 8007532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007536:	4651      	mov	r1, sl
 8007538:	018a      	lsls	r2, r1, #6
 800753a:	4651      	mov	r1, sl
 800753c:	ebb2 0801 	subs.w	r8, r2, r1
 8007540:	4659      	mov	r1, fp
 8007542:	eb63 0901 	sbc.w	r9, r3, r1
 8007546:	f04f 0200 	mov.w	r2, #0
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800755a:	4690      	mov	r8, r2
 800755c:	4699      	mov	r9, r3
 800755e:	4623      	mov	r3, r4
 8007560:	eb18 0303 	adds.w	r3, r8, r3
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	462b      	mov	r3, r5
 8007568:	eb49 0303 	adc.w	r3, r9, r3
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800757a:	4629      	mov	r1, r5
 800757c:	024b      	lsls	r3, r1, #9
 800757e:	4621      	mov	r1, r4
 8007580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007584:	4621      	mov	r1, r4
 8007586:	024a      	lsls	r2, r1, #9
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800758e:	2200      	movs	r2, #0
 8007590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007598:	f7f9 fb06 	bl	8000ba8 <__aeabi_uldivmod>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4613      	mov	r3, r2
 80075a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075a4:	e058      	b.n	8007658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075a6:	4b38      	ldr	r3, [pc, #224]	@ (8007688 <HAL_RCC_GetSysClockFreq+0x200>)
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	099b      	lsrs	r3, r3, #6
 80075ac:	2200      	movs	r2, #0
 80075ae:	4618      	mov	r0, r3
 80075b0:	4611      	mov	r1, r2
 80075b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80075b6:	623b      	str	r3, [r7, #32]
 80075b8:	2300      	movs	r3, #0
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80075bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	f04f 0000 	mov.w	r0, #0
 80075c8:	f04f 0100 	mov.w	r1, #0
 80075cc:	0159      	lsls	r1, r3, #5
 80075ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075d2:	0150      	lsls	r0, r2, #5
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4641      	mov	r1, r8
 80075da:	ebb2 0a01 	subs.w	sl, r2, r1
 80075de:	4649      	mov	r1, r9
 80075e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075f8:	ebb2 040a 	subs.w	r4, r2, sl
 80075fc:	eb63 050b 	sbc.w	r5, r3, fp
 8007600:	f04f 0200 	mov.w	r2, #0
 8007604:	f04f 0300 	mov.w	r3, #0
 8007608:	00eb      	lsls	r3, r5, #3
 800760a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800760e:	00e2      	lsls	r2, r4, #3
 8007610:	4614      	mov	r4, r2
 8007612:	461d      	mov	r5, r3
 8007614:	4643      	mov	r3, r8
 8007616:	18e3      	adds	r3, r4, r3
 8007618:	603b      	str	r3, [r7, #0]
 800761a:	464b      	mov	r3, r9
 800761c:	eb45 0303 	adc.w	r3, r5, r3
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800762e:	4629      	mov	r1, r5
 8007630:	028b      	lsls	r3, r1, #10
 8007632:	4621      	mov	r1, r4
 8007634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007638:	4621      	mov	r1, r4
 800763a:	028a      	lsls	r2, r1, #10
 800763c:	4610      	mov	r0, r2
 800763e:	4619      	mov	r1, r3
 8007640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007642:	2200      	movs	r2, #0
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	61fa      	str	r2, [r7, #28]
 8007648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800764c:	f7f9 faac 	bl	8000ba8 <__aeabi_uldivmod>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4613      	mov	r3, r2
 8007656:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007658:	4b0b      	ldr	r3, [pc, #44]	@ (8007688 <HAL_RCC_GetSysClockFreq+0x200>)
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	3301      	adds	r3, #1
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800766a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800766c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007672:	e002      	b.n	800767a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007674:	4b05      	ldr	r3, [pc, #20]	@ (800768c <HAL_RCC_GetSysClockFreq+0x204>)
 8007676:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800767a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800767c:	4618      	mov	r0, r3
 800767e:	3750      	adds	r7, #80	@ 0x50
 8007680:	46bd      	mov	sp, r7
 8007682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007686:	bf00      	nop
 8007688:	40023800 	.word	0x40023800
 800768c:	00f42400 	.word	0x00f42400
 8007690:	007a1200 	.word	0x007a1200

08007694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007698:	4b03      	ldr	r3, [pc, #12]	@ (80076a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800769a:	681b      	ldr	r3, [r3, #0]
}
 800769c:	4618      	mov	r0, r3
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000004 	.word	0x20000004

080076ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076b0:	f7ff fff0 	bl	8007694 <HAL_RCC_GetHCLKFreq>
 80076b4:	4602      	mov	r2, r0
 80076b6:	4b05      	ldr	r3, [pc, #20]	@ (80076cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	0a9b      	lsrs	r3, r3, #10
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	4903      	ldr	r1, [pc, #12]	@ (80076d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076c2:	5ccb      	ldrb	r3, [r1, r3]
 80076c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	40023800 	.word	0x40023800
 80076d0:	0800de98 	.word	0x0800de98

080076d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076d8:	f7ff ffdc 	bl	8007694 <HAL_RCC_GetHCLKFreq>
 80076dc:	4602      	mov	r2, r0
 80076de:	4b05      	ldr	r3, [pc, #20]	@ (80076f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	0b5b      	lsrs	r3, r3, #13
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	4903      	ldr	r1, [pc, #12]	@ (80076f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076ea:	5ccb      	ldrb	r3, [r1, r3]
 80076ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40023800 	.word	0x40023800
 80076f8:	0800de98 	.word	0x0800de98

080076fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d105      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007720:	2b00      	cmp	r3, #0
 8007722:	d035      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007724:	4b62      	ldr	r3, [pc, #392]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800772a:	f7fb ff51 	bl	80035d0 <HAL_GetTick>
 800772e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007730:	e008      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007732:	f7fb ff4d 	bl	80035d0 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e0b0      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007744:	4b5b      	ldr	r3, [pc, #364]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f0      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	019a      	lsls	r2, r3, #6
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	071b      	lsls	r3, r3, #28
 800775c:	4955      	ldr	r1, [pc, #340]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800775e:	4313      	orrs	r3, r2
 8007760:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007764:	4b52      	ldr	r3, [pc, #328]	@ (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007766:	2201      	movs	r2, #1
 8007768:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800776a:	f7fb ff31 	bl	80035d0 <HAL_GetTick>
 800776e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007770:	e008      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007772:	f7fb ff2d 	bl	80035d0 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e090      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007784:	4b4b      	ldr	r3, [pc, #300]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8083 	beq.w	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	4b44      	ldr	r3, [pc, #272]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a6:	4a43      	ldr	r2, [pc, #268]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80077ae:	4b41      	ldr	r3, [pc, #260]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077ba:	4b3f      	ldr	r3, [pc, #252]	@ (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a3e      	ldr	r2, [pc, #248]	@ (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077c6:	f7fb ff03 	bl	80035d0 <HAL_GetTick>
 80077ca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80077cc:	e008      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077ce:	f7fb feff 	bl	80035d0 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d901      	bls.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e062      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80077e0:	4b35      	ldr	r3, [pc, #212]	@ (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d0f0      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077ec:	4b31      	ldr	r3, [pc, #196]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077f4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d02f      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	429a      	cmp	r2, r3
 8007808:	d028      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800780a:	4b2a      	ldr	r3, [pc, #168]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800780c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800780e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007812:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007814:	4b29      	ldr	r3, [pc, #164]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007816:	2201      	movs	r2, #1
 8007818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800781a:	4b28      	ldr	r3, [pc, #160]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007820:	4a24      	ldr	r2, [pc, #144]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007826:	4b23      	ldr	r3, [pc, #140]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b01      	cmp	r3, #1
 8007830:	d114      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007832:	f7fb fecd 	bl	80035d0 <HAL_GetTick>
 8007836:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007838:	e00a      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800783a:	f7fb fec9 	bl	80035d0 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007848:	4293      	cmp	r3, r2
 800784a:	d901      	bls.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e02a      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007850:	4b18      	ldr	r3, [pc, #96]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0ee      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007868:	d10d      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800786a:	4b12      	ldr	r3, [pc, #72]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800787a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800787e:	490d      	ldr	r1, [pc, #52]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007880:	4313      	orrs	r3, r2
 8007882:	608b      	str	r3, [r1, #8]
 8007884:	e005      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007886:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	4a0a      	ldr	r2, [pc, #40]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800788c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007890:	6093      	str	r3, [r2, #8]
 8007892:	4b08      	ldr	r3, [pc, #32]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007894:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800789e:	4905      	ldr	r1, [pc, #20]	@ (80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	42470068 	.word	0x42470068
 80078b4:	40023800 	.word	0x40023800
 80078b8:	40007000 	.word	0x40007000
 80078bc:	42470e40 	.word	0x42470e40

080078c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d13f      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80078de:	4b24      	ldr	r3, [pc, #144]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078e6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d006      	beq.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078f4:	d12f      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80078f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80078f8:	617b      	str	r3, [r7, #20]
          break;
 80078fa:	e02f      	b.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80078fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007904:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007908:	d108      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800790a:	4b19      	ldr	r3, [pc, #100]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007912:	4a19      	ldr	r2, [pc, #100]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007914:	fbb2 f3f3 	udiv	r3, r2, r3
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	e007      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800791c:	4b14      	ldr	r3, [pc, #80]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007924:	4a15      	ldr	r2, [pc, #84]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007926:	fbb2 f3f3 	udiv	r3, r2, r3
 800792a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800792c:	4b10      	ldr	r3, [pc, #64]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800792e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007932:	099b      	lsrs	r3, r3, #6
 8007934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	fb02 f303 	mul.w	r3, r2, r3
 800793e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007940:	4b0b      	ldr	r3, [pc, #44]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007946:	0f1b      	lsrs	r3, r3, #28
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007952:	617b      	str	r3, [r7, #20]
          break;
 8007954:	e002      	b.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	617b      	str	r3, [r7, #20]
          break;
 800795a:	bf00      	nop
        }
      }
      break;
 800795c:	e000      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800795e:	bf00      	nop
    }
  }
  return frequency;
 8007960:	697b      	ldr	r3, [r7, #20]
}
 8007962:	4618      	mov	r0, r3
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40023800 	.word	0x40023800
 8007974:	00bb8000 	.word	0x00bb8000
 8007978:	007a1200 	.word	0x007a1200
 800797c:	00f42400 	.word	0x00f42400

08007980 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e07b      	b.n	8007a8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007996:	2b00      	cmp	r3, #0
 8007998:	d108      	bne.n	80079ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079a2:	d009      	beq.n	80079b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	61da      	str	r2, [r3, #28]
 80079aa:	e005      	b.n	80079b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fb fb78 	bl	80030c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a3c:	ea42 0103 	orr.w	r1, r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	f003 0104 	and.w	r1, r3, #4
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5e:	f003 0210 	and.w	r2, r3, #16
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69da      	ldr	r2, [r3, #28]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e042      	b.n	8007b2a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d106      	bne.n	8007abe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7fb fcb1 	bl	8003420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2224      	movs	r2, #36	@ 0x24
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ad4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f972 	bl	8007dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007aea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	695a      	ldr	r2, [r3, #20]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007afa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b08a      	sub	sp, #40	@ 0x28
 8007b36:	af02      	add	r7, sp, #8
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	603b      	str	r3, [r7, #0]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d175      	bne.n	8007c3e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_UART_Transmit+0x2c>
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e06e      	b.n	8007c40 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2221      	movs	r2, #33	@ 0x21
 8007b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b70:	f7fb fd2e 	bl	80035d0 <HAL_GetTick>
 8007b74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	88fa      	ldrh	r2, [r7, #6]
 8007b7a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	88fa      	ldrh	r2, [r7, #6]
 8007b80:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b8a:	d108      	bne.n	8007b9e <HAL_UART_Transmit+0x6c>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d104      	bne.n	8007b9e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	61bb      	str	r3, [r7, #24]
 8007b9c:	e003      	b.n	8007ba6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ba6:	e02e      	b.n	8007c06 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2180      	movs	r1, #128	@ 0x80
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f848 	bl	8007c48 <UART_WaitOnFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d005      	beq.n	8007bca <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e03a      	b.n	8007c40 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10b      	bne.n	8007be8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bde:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	3302      	adds	r3, #2
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	e007      	b.n	8007bf8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	781a      	ldrb	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1cb      	bne.n	8007ba8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2200      	movs	r2, #0
 8007c18:	2140      	movs	r1, #64	@ 0x40
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f814 	bl	8007c48 <UART_WaitOnFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d005      	beq.n	8007c32 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e006      	b.n	8007c40 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
  }
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3720      	adds	r7, #32
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	4613      	mov	r3, r2
 8007c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c58:	e03b      	b.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c60:	d037      	beq.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c62:	f7fb fcb5 	bl	80035d0 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	6a3a      	ldr	r2, [r7, #32]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d302      	bcc.n	8007c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e03a      	b.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d023      	beq.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b80      	cmp	r3, #128	@ 0x80
 8007c8e:	d020      	beq.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b40      	cmp	r3, #64	@ 0x40
 8007c94:	d01d      	beq.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d116      	bne.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f81d 	bl	8007cfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2208      	movs	r2, #8
 8007cc4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e00f      	b.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	bf0c      	ite	eq
 8007ce2:	2301      	moveq	r3, #1
 8007ce4:	2300      	movne	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d0b4      	beq.n	8007c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b095      	sub	sp, #84	@ 0x54
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	330c      	adds	r3, #12
 8007d08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	330c      	adds	r3, #12
 8007d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d22:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e5      	bne.n	8007d02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3314      	adds	r3, #20
 8007d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3314      	adds	r3, #20
 8007d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e5      	bne.n	8007d36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d119      	bne.n	8007da6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f023 0310 	bic.w	r3, r3, #16
 8007d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	330c      	adds	r3, #12
 8007d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d92:	61ba      	str	r2, [r7, #24]
 8007d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6979      	ldr	r1, [r7, #20]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e5      	bne.n	8007d72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007db4:	bf00      	nop
 8007db6:	3754      	adds	r7, #84	@ 0x54
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dc4:	b0c0      	sub	sp, #256	@ 0x100
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ddc:	68d9      	ldr	r1, [r3, #12]
 8007dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	ea40 0301 	orr.w	r3, r0, r1
 8007de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	431a      	orrs	r2, r3
 8007df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007e18:	f021 010c 	bic.w	r1, r1, #12
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e26:	430b      	orrs	r3, r1
 8007e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e3a:	6999      	ldr	r1, [r3, #24]
 8007e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	ea40 0301 	orr.w	r3, r0, r1
 8007e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b8f      	ldr	r3, [pc, #572]	@ (800808c <UART_SetConfig+0x2cc>)
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d005      	beq.n	8007e60 <UART_SetConfig+0xa0>
 8007e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	4b8d      	ldr	r3, [pc, #564]	@ (8008090 <UART_SetConfig+0x2d0>)
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d104      	bne.n	8007e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e60:	f7ff fc38 	bl	80076d4 <HAL_RCC_GetPCLK2Freq>
 8007e64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e68:	e003      	b.n	8007e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e6a:	f7ff fc1f 	bl	80076ac <HAL_RCC_GetPCLK1Freq>
 8007e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e7c:	f040 810c 	bne.w	8008098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e92:	4622      	mov	r2, r4
 8007e94:	462b      	mov	r3, r5
 8007e96:	1891      	adds	r1, r2, r2
 8007e98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007e9a:	415b      	adcs	r3, r3
 8007e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	eb12 0801 	adds.w	r8, r2, r1
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	eb43 0901 	adc.w	r9, r3, r1
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ec2:	4690      	mov	r8, r2
 8007ec4:	4699      	mov	r9, r3
 8007ec6:	4623      	mov	r3, r4
 8007ec8:	eb18 0303 	adds.w	r3, r8, r3
 8007ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	eb49 0303 	adc.w	r3, r9, r3
 8007ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007eee:	460b      	mov	r3, r1
 8007ef0:	18db      	adds	r3, r3, r3
 8007ef2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	eb42 0303 	adc.w	r3, r2, r3
 8007efa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007f04:	f7f8 fe50 	bl	8000ba8 <__aeabi_uldivmod>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4b61      	ldr	r3, [pc, #388]	@ (8008094 <UART_SetConfig+0x2d4>)
 8007f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f12:	095b      	lsrs	r3, r3, #5
 8007f14:	011c      	lsls	r4, r3, #4
 8007f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007f28:	4642      	mov	r2, r8
 8007f2a:	464b      	mov	r3, r9
 8007f2c:	1891      	adds	r1, r2, r2
 8007f2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007f30:	415b      	adcs	r3, r3
 8007f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f38:	4641      	mov	r1, r8
 8007f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8007f3e:	4649      	mov	r1, r9
 8007f40:	eb43 0b01 	adc.w	fp, r3, r1
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f58:	4692      	mov	sl, r2
 8007f5a:	469b      	mov	fp, r3
 8007f5c:	4643      	mov	r3, r8
 8007f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8007f62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f66:	464b      	mov	r3, r9
 8007f68:	eb4b 0303 	adc.w	r3, fp, r3
 8007f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f84:	460b      	mov	r3, r1
 8007f86:	18db      	adds	r3, r3, r3
 8007f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	eb42 0303 	adc.w	r3, r2, r3
 8007f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007f9a:	f7f8 fe05 	bl	8000ba8 <__aeabi_uldivmod>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8008094 <UART_SetConfig+0x2d4>)
 8007fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8007faa:	095b      	lsrs	r3, r3, #5
 8007fac:	2264      	movs	r2, #100	@ 0x64
 8007fae:	fb02 f303 	mul.w	r3, r2, r3
 8007fb2:	1acb      	subs	r3, r1, r3
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007fba:	4b36      	ldr	r3, [pc, #216]	@ (8008094 <UART_SetConfig+0x2d4>)
 8007fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8007fc0:	095b      	lsrs	r3, r3, #5
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007fc8:	441c      	add	r4, r3
 8007fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007fdc:	4642      	mov	r2, r8
 8007fde:	464b      	mov	r3, r9
 8007fe0:	1891      	adds	r1, r2, r2
 8007fe2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007fe4:	415b      	adcs	r3, r3
 8007fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007fec:	4641      	mov	r1, r8
 8007fee:	1851      	adds	r1, r2, r1
 8007ff0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	414b      	adcs	r3, r1
 8007ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008004:	4659      	mov	r1, fp
 8008006:	00cb      	lsls	r3, r1, #3
 8008008:	4651      	mov	r1, sl
 800800a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800800e:	4651      	mov	r1, sl
 8008010:	00ca      	lsls	r2, r1, #3
 8008012:	4610      	mov	r0, r2
 8008014:	4619      	mov	r1, r3
 8008016:	4603      	mov	r3, r0
 8008018:	4642      	mov	r2, r8
 800801a:	189b      	adds	r3, r3, r2
 800801c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008020:	464b      	mov	r3, r9
 8008022:	460a      	mov	r2, r1
 8008024:	eb42 0303 	adc.w	r3, r2, r3
 8008028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800802c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008038:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800803c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008040:	460b      	mov	r3, r1
 8008042:	18db      	adds	r3, r3, r3
 8008044:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008046:	4613      	mov	r3, r2
 8008048:	eb42 0303 	adc.w	r3, r2, r3
 800804c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800804e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008056:	f7f8 fda7 	bl	8000ba8 <__aeabi_uldivmod>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4b0d      	ldr	r3, [pc, #52]	@ (8008094 <UART_SetConfig+0x2d4>)
 8008060:	fba3 1302 	umull	r1, r3, r3, r2
 8008064:	095b      	lsrs	r3, r3, #5
 8008066:	2164      	movs	r1, #100	@ 0x64
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	3332      	adds	r3, #50	@ 0x32
 8008072:	4a08      	ldr	r2, [pc, #32]	@ (8008094 <UART_SetConfig+0x2d4>)
 8008074:	fba2 2303 	umull	r2, r3, r2, r3
 8008078:	095b      	lsrs	r3, r3, #5
 800807a:	f003 0207 	and.w	r2, r3, #7
 800807e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4422      	add	r2, r4
 8008086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008088:	e106      	b.n	8008298 <UART_SetConfig+0x4d8>
 800808a:	bf00      	nop
 800808c:	40011000 	.word	0x40011000
 8008090:	40011400 	.word	0x40011400
 8008094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800809c:	2200      	movs	r2, #0
 800809e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80080a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80080a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80080aa:	4642      	mov	r2, r8
 80080ac:	464b      	mov	r3, r9
 80080ae:	1891      	adds	r1, r2, r2
 80080b0:	6239      	str	r1, [r7, #32]
 80080b2:	415b      	adcs	r3, r3
 80080b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080ba:	4641      	mov	r1, r8
 80080bc:	1854      	adds	r4, r2, r1
 80080be:	4649      	mov	r1, r9
 80080c0:	eb43 0501 	adc.w	r5, r3, r1
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	f04f 0300 	mov.w	r3, #0
 80080cc:	00eb      	lsls	r3, r5, #3
 80080ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080d2:	00e2      	lsls	r2, r4, #3
 80080d4:	4614      	mov	r4, r2
 80080d6:	461d      	mov	r5, r3
 80080d8:	4643      	mov	r3, r8
 80080da:	18e3      	adds	r3, r4, r3
 80080dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080e0:	464b      	mov	r3, r9
 80080e2:	eb45 0303 	adc.w	r3, r5, r3
 80080e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	f04f 0300 	mov.w	r3, #0
 8008102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008106:	4629      	mov	r1, r5
 8008108:	008b      	lsls	r3, r1, #2
 800810a:	4621      	mov	r1, r4
 800810c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008110:	4621      	mov	r1, r4
 8008112:	008a      	lsls	r2, r1, #2
 8008114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008118:	f7f8 fd46 	bl	8000ba8 <__aeabi_uldivmod>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4b60      	ldr	r3, [pc, #384]	@ (80082a4 <UART_SetConfig+0x4e4>)
 8008122:	fba3 2302 	umull	r2, r3, r3, r2
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	011c      	lsls	r4, r3, #4
 800812a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800812e:	2200      	movs	r2, #0
 8008130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008134:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800813c:	4642      	mov	r2, r8
 800813e:	464b      	mov	r3, r9
 8008140:	1891      	adds	r1, r2, r2
 8008142:	61b9      	str	r1, [r7, #24]
 8008144:	415b      	adcs	r3, r3
 8008146:	61fb      	str	r3, [r7, #28]
 8008148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800814c:	4641      	mov	r1, r8
 800814e:	1851      	adds	r1, r2, r1
 8008150:	6139      	str	r1, [r7, #16]
 8008152:	4649      	mov	r1, r9
 8008154:	414b      	adcs	r3, r1
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	f04f 0200 	mov.w	r2, #0
 800815c:	f04f 0300 	mov.w	r3, #0
 8008160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008164:	4659      	mov	r1, fp
 8008166:	00cb      	lsls	r3, r1, #3
 8008168:	4651      	mov	r1, sl
 800816a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800816e:	4651      	mov	r1, sl
 8008170:	00ca      	lsls	r2, r1, #3
 8008172:	4610      	mov	r0, r2
 8008174:	4619      	mov	r1, r3
 8008176:	4603      	mov	r3, r0
 8008178:	4642      	mov	r2, r8
 800817a:	189b      	adds	r3, r3, r2
 800817c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008180:	464b      	mov	r3, r9
 8008182:	460a      	mov	r2, r1
 8008184:	eb42 0303 	adc.w	r3, r2, r3
 8008188:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800818c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008196:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008198:	f04f 0200 	mov.w	r2, #0
 800819c:	f04f 0300 	mov.w	r3, #0
 80081a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80081a4:	4649      	mov	r1, r9
 80081a6:	008b      	lsls	r3, r1, #2
 80081a8:	4641      	mov	r1, r8
 80081aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081ae:	4641      	mov	r1, r8
 80081b0:	008a      	lsls	r2, r1, #2
 80081b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80081b6:	f7f8 fcf7 	bl	8000ba8 <__aeabi_uldivmod>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4611      	mov	r1, r2
 80081c0:	4b38      	ldr	r3, [pc, #224]	@ (80082a4 <UART_SetConfig+0x4e4>)
 80081c2:	fba3 2301 	umull	r2, r3, r3, r1
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	2264      	movs	r2, #100	@ 0x64
 80081ca:	fb02 f303 	mul.w	r3, r2, r3
 80081ce:	1acb      	subs	r3, r1, r3
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	3332      	adds	r3, #50	@ 0x32
 80081d4:	4a33      	ldr	r2, [pc, #204]	@ (80082a4 <UART_SetConfig+0x4e4>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	095b      	lsrs	r3, r3, #5
 80081dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081e0:	441c      	add	r4, r3
 80081e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081e6:	2200      	movs	r2, #0
 80081e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80081ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80081ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80081f0:	4642      	mov	r2, r8
 80081f2:	464b      	mov	r3, r9
 80081f4:	1891      	adds	r1, r2, r2
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	415b      	adcs	r3, r3
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008200:	4641      	mov	r1, r8
 8008202:	1851      	adds	r1, r2, r1
 8008204:	6039      	str	r1, [r7, #0]
 8008206:	4649      	mov	r1, r9
 8008208:	414b      	adcs	r3, r1
 800820a:	607b      	str	r3, [r7, #4]
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008218:	4659      	mov	r1, fp
 800821a:	00cb      	lsls	r3, r1, #3
 800821c:	4651      	mov	r1, sl
 800821e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008222:	4651      	mov	r1, sl
 8008224:	00ca      	lsls	r2, r1, #3
 8008226:	4610      	mov	r0, r2
 8008228:	4619      	mov	r1, r3
 800822a:	4603      	mov	r3, r0
 800822c:	4642      	mov	r2, r8
 800822e:	189b      	adds	r3, r3, r2
 8008230:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008232:	464b      	mov	r3, r9
 8008234:	460a      	mov	r2, r1
 8008236:	eb42 0303 	adc.w	r3, r2, r3
 800823a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	663b      	str	r3, [r7, #96]	@ 0x60
 8008246:	667a      	str	r2, [r7, #100]	@ 0x64
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008254:	4649      	mov	r1, r9
 8008256:	008b      	lsls	r3, r1, #2
 8008258:	4641      	mov	r1, r8
 800825a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800825e:	4641      	mov	r1, r8
 8008260:	008a      	lsls	r2, r1, #2
 8008262:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008266:	f7f8 fc9f 	bl	8000ba8 <__aeabi_uldivmod>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4b0d      	ldr	r3, [pc, #52]	@ (80082a4 <UART_SetConfig+0x4e4>)
 8008270:	fba3 1302 	umull	r1, r3, r3, r2
 8008274:	095b      	lsrs	r3, r3, #5
 8008276:	2164      	movs	r1, #100	@ 0x64
 8008278:	fb01 f303 	mul.w	r3, r1, r3
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	3332      	adds	r3, #50	@ 0x32
 8008282:	4a08      	ldr	r2, [pc, #32]	@ (80082a4 <UART_SetConfig+0x4e4>)
 8008284:	fba2 2303 	umull	r2, r3, r2, r3
 8008288:	095b      	lsrs	r3, r3, #5
 800828a:	f003 020f 	and.w	r2, r3, #15
 800828e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4422      	add	r2, r4
 8008296:	609a      	str	r2, [r3, #8]
}
 8008298:	bf00      	nop
 800829a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800829e:	46bd      	mov	sp, r7
 80082a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082a4:	51eb851f 	.word	0x51eb851f

080082a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d165      	bne.n	8008388 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4a41      	ldr	r2, [pc, #260]	@ (80083c4 <USB_SetTurnaroundTime+0x11c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d906      	bls.n	80082d2 <USB_SetTurnaroundTime+0x2a>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4a40      	ldr	r2, [pc, #256]	@ (80083c8 <USB_SetTurnaroundTime+0x120>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d202      	bcs.n	80082d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80082cc:	230f      	movs	r3, #15
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e062      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4a3c      	ldr	r2, [pc, #240]	@ (80083c8 <USB_SetTurnaroundTime+0x120>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d306      	bcc.n	80082e8 <USB_SetTurnaroundTime+0x40>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4a3b      	ldr	r2, [pc, #236]	@ (80083cc <USB_SetTurnaroundTime+0x124>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d202      	bcs.n	80082e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80082e2:	230e      	movs	r3, #14
 80082e4:	617b      	str	r3, [r7, #20]
 80082e6:	e057      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4a38      	ldr	r2, [pc, #224]	@ (80083cc <USB_SetTurnaroundTime+0x124>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d306      	bcc.n	80082fe <USB_SetTurnaroundTime+0x56>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4a37      	ldr	r2, [pc, #220]	@ (80083d0 <USB_SetTurnaroundTime+0x128>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d202      	bcs.n	80082fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80082f8:	230d      	movs	r3, #13
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	e04c      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	4a33      	ldr	r2, [pc, #204]	@ (80083d0 <USB_SetTurnaroundTime+0x128>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d306      	bcc.n	8008314 <USB_SetTurnaroundTime+0x6c>
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	4a32      	ldr	r2, [pc, #200]	@ (80083d4 <USB_SetTurnaroundTime+0x12c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d802      	bhi.n	8008314 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800830e:	230c      	movs	r3, #12
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	e041      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4a2f      	ldr	r2, [pc, #188]	@ (80083d4 <USB_SetTurnaroundTime+0x12c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d906      	bls.n	800832a <USB_SetTurnaroundTime+0x82>
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4a2e      	ldr	r2, [pc, #184]	@ (80083d8 <USB_SetTurnaroundTime+0x130>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d802      	bhi.n	800832a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008324:	230b      	movs	r3, #11
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	e036      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4a2a      	ldr	r2, [pc, #168]	@ (80083d8 <USB_SetTurnaroundTime+0x130>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d906      	bls.n	8008340 <USB_SetTurnaroundTime+0x98>
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	4a29      	ldr	r2, [pc, #164]	@ (80083dc <USB_SetTurnaroundTime+0x134>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d802      	bhi.n	8008340 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800833a:	230a      	movs	r3, #10
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	e02b      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4a26      	ldr	r2, [pc, #152]	@ (80083dc <USB_SetTurnaroundTime+0x134>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d906      	bls.n	8008356 <USB_SetTurnaroundTime+0xae>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4a25      	ldr	r2, [pc, #148]	@ (80083e0 <USB_SetTurnaroundTime+0x138>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d202      	bcs.n	8008356 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008350:	2309      	movs	r3, #9
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e020      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4a21      	ldr	r2, [pc, #132]	@ (80083e0 <USB_SetTurnaroundTime+0x138>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d306      	bcc.n	800836c <USB_SetTurnaroundTime+0xc4>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	4a20      	ldr	r2, [pc, #128]	@ (80083e4 <USB_SetTurnaroundTime+0x13c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d802      	bhi.n	800836c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008366:	2308      	movs	r3, #8
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	e015      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4a1d      	ldr	r2, [pc, #116]	@ (80083e4 <USB_SetTurnaroundTime+0x13c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d906      	bls.n	8008382 <USB_SetTurnaroundTime+0xda>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4a1c      	ldr	r2, [pc, #112]	@ (80083e8 <USB_SetTurnaroundTime+0x140>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d202      	bcs.n	8008382 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800837c:	2307      	movs	r3, #7
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e00a      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008382:	2306      	movs	r3, #6
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	e007      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800838e:	2309      	movs	r3, #9
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	e001      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008394:	2309      	movs	r3, #9
 8008396:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	029b      	lsls	r3, r3, #10
 80083ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80083b0:	431a      	orrs	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	371c      	adds	r7, #28
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	00d8acbf 	.word	0x00d8acbf
 80083c8:	00e4e1c0 	.word	0x00e4e1c0
 80083cc:	00f42400 	.word	0x00f42400
 80083d0:	01067380 	.word	0x01067380
 80083d4:	011a499f 	.word	0x011a499f
 80083d8:	01312cff 	.word	0x01312cff
 80083dc:	014ca43f 	.word	0x014ca43f
 80083e0:	016e3600 	.word	0x016e3600
 80083e4:	01a6ab1f 	.word	0x01a6ab1f
 80083e8:	01e84800 	.word	0x01e84800

080083ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3301      	adds	r3, #1
 80083fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008406:	d901      	bls.n	800840c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e01b      	b.n	8008444 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	daf2      	bge.n	80083fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	019b      	lsls	r3, r3, #6
 800841c:	f043 0220 	orr.w	r2, r3, #32
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3301      	adds	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008430:	d901      	bls.n	8008436 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e006      	b.n	8008444 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f003 0320 	and.w	r3, r3, #32
 800843e:	2b20      	cmp	r3, #32
 8008440:	d0f0      	beq.n	8008424 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 0306 	and.w	r3, r3, #6
 8008468:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d102      	bne.n	8008476 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008470:	2300      	movs	r3, #0
 8008472:	75fb      	strb	r3, [r7, #23]
 8008474:	e00a      	b.n	800848c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d002      	beq.n	8008482 <USB_GetDevSpeed+0x32>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b06      	cmp	r3, #6
 8008480:	d102      	bne.n	8008488 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008482:	2302      	movs	r3, #2
 8008484:	75fb      	strb	r3, [r7, #23]
 8008486:	e001      	b.n	800848c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008488:	230f      	movs	r3, #15
 800848a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
}
 800848e:	4618      	mov	r0, r3
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d13a      	bne.n	800852c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084bc:	69da      	ldr	r2, [r3, #28]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	2101      	movs	r1, #1
 80084c8:	fa01 f303 	lsl.w	r3, r1, r3
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084d4:	4313      	orrs	r3, r2
 80084d6:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d155      	bne.n	800859a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	791b      	ldrb	r3, [r3, #4]
 8008508:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800850a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	059b      	lsls	r3, r3, #22
 8008510:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008512:	4313      	orrs	r3, r2
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	e036      	b.n	800859a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 030f 	and.w	r3, r3, #15
 800853c:	2101      	movs	r1, #1
 800853e:	fa01 f303 	lsl.w	r3, r1, r3
 8008542:	041b      	lsls	r3, r3, #16
 8008544:	68f9      	ldr	r1, [r7, #12]
 8008546:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800854a:	4313      	orrs	r3, r2
 800854c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d11a      	bne.n	800859a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	791b      	ldrb	r3, [r3, #4]
 800857e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008580:	430b      	orrs	r3, r1
 8008582:	4313      	orrs	r3, r2
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008598:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08a      	sub	sp, #40	@ 0x28
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	785b      	ldrb	r3, [r3, #1]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	f040 817f 	bne.w	80088c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d132      	bne.n	8008638 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	0151      	lsls	r1, r2, #5
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	440a      	add	r2, r1
 80085e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80085f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80085f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	440a      	add	r2, r1
 800860c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008610:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008614:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	0151      	lsls	r1, r2, #5
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	440a      	add	r2, r1
 800862c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008630:	0cdb      	lsrs	r3, r3, #19
 8008632:	04db      	lsls	r3, r3, #19
 8008634:	6113      	str	r3, [r2, #16]
 8008636:	e097      	b.n	8008768 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	0151      	lsls	r1, r2, #5
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	440a      	add	r2, r1
 800864e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008652:	0cdb      	lsrs	r3, r3, #19
 8008654:	04db      	lsls	r3, r3, #19
 8008656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	0151      	lsls	r1, r2, #5
 800866a:	69fa      	ldr	r2, [r7, #28]
 800866c:	440a      	add	r2, r1
 800866e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008672:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008676:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800867a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d11a      	bne.n	80086b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	691a      	ldr	r2, [r3, #16]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	429a      	cmp	r2, r3
 800868c:	d903      	bls.n	8008696 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	0151      	lsls	r1, r2, #5
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	440a      	add	r2, r1
 80086ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086b4:	6113      	str	r3, [r2, #16]
 80086b6:	e044      	b.n	8008742 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	691a      	ldr	r2, [r3, #16]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	4413      	add	r3, r2
 80086c2:	1e5a      	subs	r2, r3, #1
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086da:	691a      	ldr	r2, [r3, #16]
 80086dc:	8afb      	ldrh	r3, [r7, #22]
 80086de:	04d9      	lsls	r1, r3, #19
 80086e0:	4ba4      	ldr	r3, [pc, #656]	@ (8008974 <USB_EPStartXfer+0x3cc>)
 80086e2:	400b      	ands	r3, r1
 80086e4:	69b9      	ldr	r1, [r7, #24]
 80086e6:	0148      	lsls	r0, r1, #5
 80086e8:	69f9      	ldr	r1, [r7, #28]
 80086ea:	4401      	add	r1, r0
 80086ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80086f0:	4313      	orrs	r3, r2
 80086f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	791b      	ldrb	r3, [r3, #4]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d122      	bne.n	8008742 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	440a      	add	r2, r1
 8008712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008716:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800871a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008728:	691a      	ldr	r2, [r3, #16]
 800872a:	8afb      	ldrh	r3, [r7, #22]
 800872c:	075b      	lsls	r3, r3, #29
 800872e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008732:	69b9      	ldr	r1, [r7, #24]
 8008734:	0148      	lsls	r0, r1, #5
 8008736:	69f9      	ldr	r1, [r7, #28]
 8008738:	4401      	add	r1, r0
 800873a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800873e:	4313      	orrs	r3, r2
 8008740:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008758:	69b9      	ldr	r1, [r7, #24]
 800875a:	0148      	lsls	r0, r1, #5
 800875c:	69f9      	ldr	r1, [r7, #28]
 800875e:	4401      	add	r1, r0
 8008760:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008764:	4313      	orrs	r3, r2
 8008766:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d14b      	bne.n	8008806 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008782:	461a      	mov	r2, r3
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	791b      	ldrb	r3, [r3, #4]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d128      	bne.n	80087e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d110      	bne.n	80087c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	e00f      	b.n	80087e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	69fa      	ldr	r2, [r7, #28]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	e166      	b.n	8008ad4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	0151      	lsls	r1, r2, #5
 8008818:	69fa      	ldr	r2, [r7, #28]
 800881a:	440a      	add	r2, r1
 800881c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008820:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008824:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	791b      	ldrb	r3, [r3, #4]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d015      	beq.n	800885a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 814e 	beq.w	8008ad4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800883e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	2101      	movs	r1, #1
 800884a:	fa01 f303 	lsl.w	r3, r1, r3
 800884e:	69f9      	ldr	r1, [r7, #28]
 8008850:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008854:	4313      	orrs	r3, r2
 8008856:	634b      	str	r3, [r1, #52]	@ 0x34
 8008858:	e13c      	b.n	8008ad4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008866:	2b00      	cmp	r3, #0
 8008868:	d110      	bne.n	800888c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	0151      	lsls	r1, r2, #5
 800887c:	69fa      	ldr	r2, [r7, #28]
 800887e:	440a      	add	r2, r1
 8008880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008884:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	e00f      	b.n	80088ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	68d9      	ldr	r1, [r3, #12]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	781a      	ldrb	r2, [r3, #0]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	b298      	uxth	r0, r3
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	4603      	mov	r3, r0
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 f9b9 	bl	8008c38 <USB_WritePacket>
 80088c6:	e105      	b.n	8008ad4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088e2:	0cdb      	lsrs	r3, r3, #19
 80088e4:	04db      	lsls	r3, r3, #19
 80088e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008902:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008906:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800890a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d132      	bne.n	8008978 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008940:	69b9      	ldr	r1, [r7, #24]
 8008942:	0148      	lsls	r0, r1, #5
 8008944:	69f9      	ldr	r1, [r7, #28]
 8008946:	4401      	add	r1, r0
 8008948:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800894c:	4313      	orrs	r3, r2
 800894e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	0151      	lsls	r1, r2, #5
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	440a      	add	r2, r1
 8008966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800896a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800896e:	6113      	str	r3, [r2, #16]
 8008970:	e062      	b.n	8008a38 <USB_EPStartXfer+0x490>
 8008972:	bf00      	nop
 8008974:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d123      	bne.n	80089c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800898c:	691a      	ldr	r2, [r3, #16]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008996:	69b9      	ldr	r1, [r7, #24]
 8008998:	0148      	lsls	r0, r1, #5
 800899a:	69f9      	ldr	r1, [r7, #28]
 800899c:	4401      	add	r1, r0
 800899e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089a2:	4313      	orrs	r3, r2
 80089a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	0151      	lsls	r1, r2, #5
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	440a      	add	r2, r1
 80089bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089c4:	6113      	str	r3, [r2, #16]
 80089c6:	e037      	b.n	8008a38 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	4413      	add	r3, r2
 80089d2:	1e5a      	subs	r2, r3, #1
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	8afa      	ldrh	r2, [r7, #22]
 80089e4:	fb03 f202 	mul.w	r2, r3, r2
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f8:	691a      	ldr	r2, [r3, #16]
 80089fa:	8afb      	ldrh	r3, [r7, #22]
 80089fc:	04d9      	lsls	r1, r3, #19
 80089fe:	4b38      	ldr	r3, [pc, #224]	@ (8008ae0 <USB_EPStartXfer+0x538>)
 8008a00:	400b      	ands	r3, r1
 8008a02:	69b9      	ldr	r1, [r7, #24]
 8008a04:	0148      	lsls	r0, r1, #5
 8008a06:	69f9      	ldr	r1, [r7, #28]
 8008a08:	4401      	add	r1, r0
 8008a0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a1e:	691a      	ldr	r2, [r3, #16]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a28:	69b9      	ldr	r1, [r7, #24]
 8008a2a:	0148      	lsls	r0, r1, #5
 8008a2c:	69f9      	ldr	r1, [r7, #28]
 8008a2e:	4401      	add	r1, r0
 8008a30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a34:	4313      	orrs	r3, r2
 8008a36:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d10d      	bne.n	8008a5a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d009      	beq.n	8008a5a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	68d9      	ldr	r1, [r3, #12]
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a56:	460a      	mov	r2, r1
 8008a58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	791b      	ldrb	r3, [r3, #4]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d128      	bne.n	8008ab4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d110      	bne.n	8008a94 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	69fa      	ldr	r2, [r7, #28]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	e00f      	b.n	8008ab4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ab2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	0151      	lsls	r1, r2, #5
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	440a      	add	r2, r1
 8008aca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ace:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	1ff80000 	.word	0x1ff80000

08008ae4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d14a      	bne.n	8008b98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b1a:	f040 8086 	bne.w	8008c2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	7812      	ldrb	r2, [r2, #0]
 8008b32:	0151      	lsls	r1, r2, #5
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	440a      	add	r2, r1
 8008b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	7812      	ldrb	r2, [r2, #0]
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d902      	bls.n	8008b7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
          break;
 8008b7a:	e056      	b.n	8008c2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b94:	d0e7      	beq.n	8008b66 <USB_EPStopXfer+0x82>
 8008b96:	e048      	b.n	8008c2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bb0:	d13b      	bne.n	8008c2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	7812      	ldrb	r2, [r2, #0]
 8008bc6:	0151      	lsls	r1, r2, #5
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	440a      	add	r2, r1
 8008bcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	7812      	ldrb	r2, [r2, #0]
 8008bea:	0151      	lsls	r1, r2, #5
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	440a      	add	r2, r1
 8008bf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bf8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d902      	bls.n	8008c10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c0e:	e00c      	b.n	8008c2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c28:	d0e7      	beq.n	8008bfa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	371c      	adds	r7, #28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b089      	sub	sp, #36	@ 0x24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4611      	mov	r1, r2
 8008c44:	461a      	mov	r2, r3
 8008c46:	460b      	mov	r3, r1
 8008c48:	71fb      	strb	r3, [r7, #7]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d123      	bne.n	8008ca6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c5e:	88bb      	ldrh	r3, [r7, #4]
 8008c60:	3303      	adds	r3, #3
 8008c62:	089b      	lsrs	r3, r3, #2
 8008c64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c66:	2300      	movs	r3, #0
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	e018      	b.n	8008c9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	031a      	lsls	r2, r3, #12
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c78:	461a      	mov	r2, r3
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	3301      	adds	r3, #1
 8008c96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	61bb      	str	r3, [r7, #24]
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d3e2      	bcc.n	8008c6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3724      	adds	r7, #36	@ 0x24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b08b      	sub	sp, #44	@ 0x2c
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008cca:	88fb      	ldrh	r3, [r7, #6]
 8008ccc:	089b      	lsrs	r3, r3, #2
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008cd2:	88fb      	ldrh	r3, [r7, #6]
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cda:	2300      	movs	r3, #0
 8008cdc:	623b      	str	r3, [r7, #32]
 8008cde:	e014      	b.n	8008d0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cea:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cee:	3301      	adds	r3, #1
 8008cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d00:	3301      	adds	r3, #1
 8008d02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	3301      	adds	r3, #1
 8008d08:	623b      	str	r3, [r7, #32]
 8008d0a:	6a3a      	ldr	r2, [r7, #32]
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d3e6      	bcc.n	8008ce0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d12:	8bfb      	ldrh	r3, [r7, #30]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01e      	beq.n	8008d56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d22:	461a      	mov	r2, r3
 8008d24:	f107 0310 	add.w	r3, r7, #16
 8008d28:	6812      	ldr	r2, [r2, #0]
 8008d2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	fa22 f303 	lsr.w	r3, r2, r3
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3c:	701a      	strb	r2, [r3, #0]
      i++;
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	3301      	adds	r3, #1
 8008d42:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d46:	3301      	adds	r3, #1
 8008d48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008d4a:	8bfb      	ldrh	r3, [r7, #30]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d50:	8bfb      	ldrh	r3, [r7, #30]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1ea      	bne.n	8008d2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	372c      	adds	r7, #44	@ 0x2c
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	785b      	ldrb	r3, [r3, #1]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d12c      	bne.n	8008dda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	db12      	blt.n	8008db8 <USB_EPSetStall+0x54>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00f      	beq.n	8008db8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	0151      	lsls	r1, r2, #5
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	440a      	add	r2, r1
 8008dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008db2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008db6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	0151      	lsls	r1, r2, #5
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	440a      	add	r2, r1
 8008dce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	e02b      	b.n	8008e32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	db12      	blt.n	8008e12 <USB_EPSetStall+0xae>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00f      	beq.n	8008e12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	0151      	lsls	r1, r2, #5
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	440a      	add	r2, r1
 8008e08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	0151      	lsls	r1, r2, #5
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	440a      	add	r2, r1
 8008e28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	785b      	ldrb	r3, [r3, #1]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d128      	bne.n	8008eae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	791b      	ldrb	r3, [r3, #4]
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d003      	beq.n	8008e8c <USB_EPClearStall+0x4c>
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	791b      	ldrb	r3, [r3, #4]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d138      	bne.n	8008efe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	e027      	b.n	8008efe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	0151      	lsls	r1, r2, #5
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ec8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ecc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	791b      	ldrb	r3, [r3, #4]
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d003      	beq.n	8008ede <USB_EPClearStall+0x9e>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	791b      	ldrb	r3, [r3, #4]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d10f      	bne.n	8008efe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	0151      	lsls	r1, r2, #5
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	440a      	add	r2, r1
 8008ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008efc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008f2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	011b      	lsls	r3, r3, #4
 8008f3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008f40:	68f9      	ldr	r1, [r7, #12]
 8008f42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f46:	4313      	orrs	r3, r2
 8008f48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f70:	68fb      	ldr	r3, [r7, #12]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	0c1b      	lsrs	r3, r3, #16
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	b29b      	uxth	r3, r3
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b085      	sub	sp, #20
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	4013      	ands	r3, r2
 8009012:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009014:	68bb      	ldr	r3, [r7, #8]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009022:	b480      	push	{r7}
 8009024:	b087      	sub	sp, #28
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009044:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009046:	78fb      	ldrb	r3, [r7, #3]
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	fa22 f303 	lsr.w	r3, r2, r3
 8009052:	01db      	lsls	r3, r3, #7
 8009054:	b2db      	uxtb	r3, r3
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	4313      	orrs	r3, r2
 800905a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	4013      	ands	r3, r2
 800906e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009070:	68bb      	ldr	r3, [r7, #8]
}
 8009072:	4618      	mov	r0, r3
 8009074:	371c      	adds	r7, #28
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800907e:	b480      	push	{r7}
 8009080:	b083      	sub	sp, #12
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	f003 0301 	and.w	r3, r3, #1
}
 800908e:	4618      	mov	r0, r3
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800909a:	b480      	push	{r7}
 800909c:	b085      	sub	sp, #20
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80090b8:	f023 0307 	bic.w	r3, r3, #7
 80090bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	460b      	mov	r3, r1
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	333c      	adds	r3, #60	@ 0x3c
 80090f6:	3304      	adds	r3, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	4a26      	ldr	r2, [pc, #152]	@ (8009198 <USB_EP0_OutStart+0xb8>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d90a      	bls.n	800911a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009110:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009114:	d101      	bne.n	800911a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	e037      	b.n	800918a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009120:	461a      	mov	r2, r3
 8009122:	2300      	movs	r3, #0
 8009124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009134:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009148:	f043 0318 	orr.w	r3, r3, #24
 800914c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800915c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009160:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009162:	7afb      	ldrb	r3, [r7, #11]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d10f      	bne.n	8009188 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800916e:	461a      	mov	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009182:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009186:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	4f54300a 	.word	0x4f54300a

0800919c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d009      	beq.n	80091e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	78fa      	ldrb	r2, [r7, #3]
 80091d6:	4611      	mov	r1, r2
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	78fa      	ldrb	r2, [r7, #3]
 8009204:	4611      	mov	r1, r2
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	4798      	blx	r3
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009210:	2303      	movs	r3, #3
 8009212:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	f001 f8b8 	bl	800a3a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009244:	461a      	mov	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009252:	f003 031f 	and.w	r3, r3, #31
 8009256:	2b02      	cmp	r3, #2
 8009258:	d01a      	beq.n	8009290 <USBD_LL_SetupStage+0x72>
 800925a:	2b02      	cmp	r3, #2
 800925c:	d822      	bhi.n	80092a4 <USBD_LL_SetupStage+0x86>
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <USBD_LL_SetupStage+0x4a>
 8009262:	2b01      	cmp	r3, #1
 8009264:	d00a      	beq.n	800927c <USBD_LL_SetupStage+0x5e>
 8009266:	e01d      	b.n	80092a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fb0f 	bl	8009894 <USBD_StdDevReq>
 8009276:	4603      	mov	r3, r0
 8009278:	73fb      	strb	r3, [r7, #15]
      break;
 800927a:	e020      	b.n	80092be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fb77 	bl	8009978 <USBD_StdItfReq>
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]
      break;
 800928e:	e016      	b.n	80092be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fbd9 	bl	8009a50 <USBD_StdEPReq>
 800929e:	4603      	mov	r3, r0
 80092a0:	73fb      	strb	r3, [r7, #15]
      break;
 80092a2:	e00c      	b.n	80092be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f001 fa3c 	bl	800a730 <USBD_LL_StallEP>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]
      break;
 80092bc:	bf00      	nop
  }

  return ret;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	460b      	mov	r3, r1
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80092da:	7afb      	ldrb	r3, [r7, #11]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d16e      	bne.n	80093be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80092e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	f040 8098 	bne.w	8009424 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d913      	bls.n	8009328 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	4293      	cmp	r3, r2
 8009318:	bf28      	it	cs
 800931a:	4613      	movcs	r3, r2
 800931c:	461a      	mov	r2, r3
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f001 f8b7 	bl	800a494 <USBD_CtlContinueRx>
 8009326:	e07d      	b.n	8009424 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	2b02      	cmp	r3, #2
 8009334:	d014      	beq.n	8009360 <USBD_LL_DataOutStage+0x98>
 8009336:	2b02      	cmp	r3, #2
 8009338:	d81d      	bhi.n	8009376 <USBD_LL_DataOutStage+0xae>
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <USBD_LL_DataOutStage+0x7c>
 800933e:	2b01      	cmp	r3, #1
 8009340:	d003      	beq.n	800934a <USBD_LL_DataOutStage+0x82>
 8009342:	e018      	b.n	8009376 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	75bb      	strb	r3, [r7, #22]
            break;
 8009348:	e018      	b.n	800937c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009350:	b2db      	uxtb	r3, r3
 8009352:	4619      	mov	r1, r3
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 fa64 	bl	8009822 <USBD_CoreFindIF>
 800935a:	4603      	mov	r3, r0
 800935c:	75bb      	strb	r3, [r7, #22]
            break;
 800935e:	e00d      	b.n	800937c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009366:	b2db      	uxtb	r3, r3
 8009368:	4619      	mov	r1, r3
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 fa66 	bl	800983c <USBD_CoreFindEP>
 8009370:	4603      	mov	r3, r0
 8009372:	75bb      	strb	r3, [r7, #22]
            break;
 8009374:	e002      	b.n	800937c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	75bb      	strb	r3, [r7, #22]
            break;
 800937a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800937c:	7dbb      	ldrb	r3, [r7, #22]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d119      	bne.n	80093b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b03      	cmp	r3, #3
 800938c:	d113      	bne.n	80093b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800938e:	7dba      	ldrb	r2, [r7, #22]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	32ae      	adds	r2, #174	@ 0xae
 8009394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00b      	beq.n	80093b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800939e:	7dba      	ldrb	r2, [r7, #22]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80093a6:	7dba      	ldrb	r2, [r7, #22]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	32ae      	adds	r2, #174	@ 0xae
 80093ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f001 f87d 	bl	800a4b6 <USBD_CtlSendStatus>
 80093bc:	e032      	b.n	8009424 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	4619      	mov	r1, r3
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 fa37 	bl	800983c <USBD_CoreFindEP>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093d2:	7dbb      	ldrb	r3, [r7, #22]
 80093d4:	2bff      	cmp	r3, #255	@ 0xff
 80093d6:	d025      	beq.n	8009424 <USBD_LL_DataOutStage+0x15c>
 80093d8:	7dbb      	ldrb	r3, [r7, #22]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d122      	bne.n	8009424 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d117      	bne.n	800941a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093ea:	7dba      	ldrb	r2, [r7, #22]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	32ae      	adds	r2, #174	@ 0xae
 80093f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00f      	beq.n	800941a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80093fa:	7dba      	ldrb	r2, [r7, #22]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009402:	7dba      	ldrb	r2, [r7, #22]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	32ae      	adds	r2, #174	@ 0xae
 8009408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	7afa      	ldrb	r2, [r7, #11]
 8009410:	4611      	mov	r1, r2
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	4798      	blx	r3
 8009416:	4603      	mov	r3, r0
 8009418:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	e000      	b.n	8009426 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	460b      	mov	r3, r1
 8009438:	607a      	str	r2, [r7, #4]
 800943a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d16f      	bne.n	8009522 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3314      	adds	r3, #20
 8009446:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800944e:	2b02      	cmp	r3, #2
 8009450:	d15a      	bne.n	8009508 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	429a      	cmp	r2, r3
 800945c:	d914      	bls.n	8009488 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	1ad2      	subs	r2, r2, r3
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	461a      	mov	r2, r3
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fffc 	bl	800a472 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800947a:	2300      	movs	r3, #0
 800947c:	2200      	movs	r2, #0
 800947e:	2100      	movs	r1, #0
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f001 f9ff 	bl	800a884 <USBD_LL_PrepareReceive>
 8009486:	e03f      	b.n	8009508 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	68da      	ldr	r2, [r3, #12]
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	429a      	cmp	r2, r3
 8009492:	d11c      	bne.n	80094ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800949c:	429a      	cmp	r2, r3
 800949e:	d316      	bcc.n	80094ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d20f      	bcs.n	80094ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094ae:	2200      	movs	r2, #0
 80094b0:	2100      	movs	r1, #0
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 ffdd 	bl	800a472 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094c0:	2300      	movs	r3, #0
 80094c2:	2200      	movs	r2, #0
 80094c4:	2100      	movs	r1, #0
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f001 f9dc 	bl	800a884 <USBD_LL_PrepareReceive>
 80094cc:	e01c      	b.n	8009508 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d10f      	bne.n	80094fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d009      	beq.n	80094fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094fa:	2180      	movs	r1, #128	@ 0x80
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f001 f917 	bl	800a730 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 ffea 	bl	800a4dc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d03a      	beq.n	8009588 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f7ff fe42 	bl	800919c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009520:	e032      	b.n	8009588 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009522:	7afb      	ldrb	r3, [r7, #11]
 8009524:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009528:	b2db      	uxtb	r3, r3
 800952a:	4619      	mov	r1, r3
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 f985 	bl	800983c <USBD_CoreFindEP>
 8009532:	4603      	mov	r3, r0
 8009534:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	2bff      	cmp	r3, #255	@ 0xff
 800953a:	d025      	beq.n	8009588 <USBD_LL_DataInStage+0x15a>
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d122      	bne.n	8009588 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b03      	cmp	r3, #3
 800954c:	d11c      	bne.n	8009588 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800954e:	7dfa      	ldrb	r2, [r7, #23]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	32ae      	adds	r2, #174	@ 0xae
 8009554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d014      	beq.n	8009588 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800955e:	7dfa      	ldrb	r2, [r7, #23]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009566:	7dfa      	ldrb	r2, [r7, #23]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	32ae      	adds	r2, #174	@ 0xae
 800956c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	7afa      	ldrb	r2, [r7, #11]
 8009574:	4611      	mov	r1, r2
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	4798      	blx	r3
 800957a:	4603      	mov	r3, r0
 800957c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800957e:	7dbb      	ldrb	r3, [r7, #22]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009584:	7dbb      	ldrb	r3, [r7, #22]
 8009586:	e000      	b.n	800958a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d014      	beq.n	80095f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00e      	beq.n	80095f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	6852      	ldr	r2, [r2, #4]
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	4611      	mov	r1, r2
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	4798      	blx	r3
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095f4:	2303      	movs	r3, #3
 80095f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095f8:	2340      	movs	r3, #64	@ 0x40
 80095fa:	2200      	movs	r2, #0
 80095fc:	2100      	movs	r1, #0
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 f870 	bl	800a6e4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2240      	movs	r2, #64	@ 0x40
 8009610:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009614:	2340      	movs	r3, #64	@ 0x40
 8009616:	2200      	movs	r2, #0
 8009618:	2180      	movs	r1, #128	@ 0x80
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 f862 	bl	800a6e4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2240      	movs	r2, #64	@ 0x40
 800962a:	621a      	str	r2, [r3, #32]

  return ret;
 800962c:	7bfb      	ldrb	r3, [r7, #15]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	460b      	mov	r3, r1
 8009640:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b04      	cmp	r3, #4
 8009668:	d006      	beq.n	8009678 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009670:	b2da      	uxtb	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2204      	movs	r2, #4
 800967c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d106      	bne.n	80096b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d110      	bne.n	80096f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00b      	beq.n	80096f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d005      	beq.n	80096f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	32ae      	adds	r2, #174	@ 0xae
 8009714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800971c:	2303      	movs	r3, #3
 800971e:	e01c      	b.n	800975a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b03      	cmp	r3, #3
 800972a:	d115      	bne.n	8009758 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	32ae      	adds	r2, #174	@ 0xae
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00b      	beq.n	8009758 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	32ae      	adds	r2, #174	@ 0xae
 800974a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	78fa      	ldrb	r2, [r7, #3]
 8009752:	4611      	mov	r1, r2
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	32ae      	adds	r2, #174	@ 0xae
 8009778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009780:	2303      	movs	r3, #3
 8009782:	e01c      	b.n	80097be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b03      	cmp	r3, #3
 800978e:	d115      	bne.n	80097bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	32ae      	adds	r2, #174	@ 0xae
 800979a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800979e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	32ae      	adds	r2, #174	@ 0xae
 80097ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b4:	78fa      	ldrb	r2, [r7, #3]
 80097b6:	4611      	mov	r1, r2
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00e      	beq.n	8009818 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	6852      	ldr	r2, [r2, #4]
 8009806:	b2d2      	uxtb	r2, r2
 8009808:	4611      	mov	r1, r2
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009814:	2303      	movs	r3, #3
 8009816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800982e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009848:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800984a:	4618      	mov	r0, r3
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009856:	b480      	push	{r7}
 8009858:	b087      	sub	sp, #28
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	3301      	adds	r3, #1
 800986c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009874:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009878:	021b      	lsls	r3, r3, #8
 800987a:	b21a      	sxth	r2, r3
 800987c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009880:	4313      	orrs	r3, r2
 8009882:	b21b      	sxth	r3, r3
 8009884:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009886:	89fb      	ldrh	r3, [r7, #14]
}
 8009888:	4618      	mov	r0, r3
 800988a:	371c      	adds	r7, #28
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098aa:	2b40      	cmp	r3, #64	@ 0x40
 80098ac:	d005      	beq.n	80098ba <USBD_StdDevReq+0x26>
 80098ae:	2b40      	cmp	r3, #64	@ 0x40
 80098b0:	d857      	bhi.n	8009962 <USBD_StdDevReq+0xce>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00f      	beq.n	80098d6 <USBD_StdDevReq+0x42>
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	d153      	bne.n	8009962 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	32ae      	adds	r2, #174	@ 0xae
 80098c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	4798      	blx	r3
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]
      break;
 80098d4:	e04a      	b.n	800996c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b09      	cmp	r3, #9
 80098dc:	d83b      	bhi.n	8009956 <USBD_StdDevReq+0xc2>
 80098de:	a201      	add	r2, pc, #4	@ (adr r2, 80098e4 <USBD_StdDevReq+0x50>)
 80098e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e4:	08009939 	.word	0x08009939
 80098e8:	0800994d 	.word	0x0800994d
 80098ec:	08009957 	.word	0x08009957
 80098f0:	08009943 	.word	0x08009943
 80098f4:	08009957 	.word	0x08009957
 80098f8:	08009917 	.word	0x08009917
 80098fc:	0800990d 	.word	0x0800990d
 8009900:	08009957 	.word	0x08009957
 8009904:	0800992f 	.word	0x0800992f
 8009908:	08009921 	.word	0x08009921
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa3c 	bl	8009d8c <USBD_GetDescriptor>
          break;
 8009914:	e024      	b.n	8009960 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fba1 	bl	800a060 <USBD_SetAddress>
          break;
 800991e:	e01f      	b.n	8009960 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fbe0 	bl	800a0e8 <USBD_SetConfig>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
          break;
 800992c:	e018      	b.n	8009960 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fc83 	bl	800a23c <USBD_GetConfig>
          break;
 8009936:	e013      	b.n	8009960 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fcb4 	bl	800a2a8 <USBD_GetStatus>
          break;
 8009940:	e00e      	b.n	8009960 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fce3 	bl	800a310 <USBD_SetFeature>
          break;
 800994a:	e009      	b.n	8009960 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fd07 	bl	800a362 <USBD_ClrFeature>
          break;
 8009954:	e004      	b.n	8009960 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fd5e 	bl	800a41a <USBD_CtlError>
          break;
 800995e:	bf00      	nop
      }
      break;
 8009960:	e004      	b.n	800996c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fd58 	bl	800a41a <USBD_CtlError>
      break;
 800996a:	bf00      	nop
  }

  return ret;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop

08009978 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800998e:	2b40      	cmp	r3, #64	@ 0x40
 8009990:	d005      	beq.n	800999e <USBD_StdItfReq+0x26>
 8009992:	2b40      	cmp	r3, #64	@ 0x40
 8009994:	d852      	bhi.n	8009a3c <USBD_StdItfReq+0xc4>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <USBD_StdItfReq+0x26>
 800999a:	2b20      	cmp	r3, #32
 800999c:	d14e      	bne.n	8009a3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	3b01      	subs	r3, #1
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d840      	bhi.n	8009a2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	889b      	ldrh	r3, [r3, #4]
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d836      	bhi.n	8009a24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	889b      	ldrh	r3, [r3, #4]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff ff2f 	bl	8009822 <USBD_CoreFindIF>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	2bff      	cmp	r3, #255	@ 0xff
 80099cc:	d01d      	beq.n	8009a0a <USBD_StdItfReq+0x92>
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d11a      	bne.n	8009a0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80099d4:	7bba      	ldrb	r2, [r7, #14]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	32ae      	adds	r2, #174	@ 0xae
 80099da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00f      	beq.n	8009a04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80099e4:	7bba      	ldrb	r2, [r7, #14]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099ec:	7bba      	ldrb	r2, [r7, #14]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	32ae      	adds	r2, #174	@ 0xae
 80099f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	4798      	blx	r3
 80099fe:	4603      	mov	r3, r0
 8009a00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a02:	e004      	b.n	8009a0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009a04:	2303      	movs	r3, #3
 8009a06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a08:	e001      	b.n	8009a0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	88db      	ldrh	r3, [r3, #6]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d110      	bne.n	8009a38 <USBD_StdItfReq+0xc0>
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10d      	bne.n	8009a38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fd4a 	bl	800a4b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a22:	e009      	b.n	8009a38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fcf7 	bl	800a41a <USBD_CtlError>
          break;
 8009a2c:	e004      	b.n	8009a38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fcf2 	bl	800a41a <USBD_CtlError>
          break;
 8009a36:	e000      	b.n	8009a3a <USBD_StdItfReq+0xc2>
          break;
 8009a38:	bf00      	nop
      }
      break;
 8009a3a:	e004      	b.n	8009a46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fceb 	bl	800a41a <USBD_CtlError>
      break;
 8009a44:	bf00      	nop
  }

  return ret;
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	889b      	ldrh	r3, [r3, #4]
 8009a62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a6c:	2b40      	cmp	r3, #64	@ 0x40
 8009a6e:	d007      	beq.n	8009a80 <USBD_StdEPReq+0x30>
 8009a70:	2b40      	cmp	r3, #64	@ 0x40
 8009a72:	f200 817f 	bhi.w	8009d74 <USBD_StdEPReq+0x324>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d02a      	beq.n	8009ad0 <USBD_StdEPReq+0x80>
 8009a7a:	2b20      	cmp	r3, #32
 8009a7c:	f040 817a 	bne.w	8009d74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7ff fed9 	bl	800983c <USBD_CoreFindEP>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a8e:	7b7b      	ldrb	r3, [r7, #13]
 8009a90:	2bff      	cmp	r3, #255	@ 0xff
 8009a92:	f000 8174 	beq.w	8009d7e <USBD_StdEPReq+0x32e>
 8009a96:	7b7b      	ldrb	r3, [r7, #13]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f040 8170 	bne.w	8009d7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a9e:	7b7a      	ldrb	r2, [r7, #13]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009aa6:	7b7a      	ldrb	r2, [r7, #13]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	32ae      	adds	r2, #174	@ 0xae
 8009aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f000 8163 	beq.w	8009d7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ab8:	7b7a      	ldrb	r2, [r7, #13]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	32ae      	adds	r2, #174	@ 0xae
 8009abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009ace:	e156      	b.n	8009d7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d008      	beq.n	8009aea <USBD_StdEPReq+0x9a>
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	f300 8145 	bgt.w	8009d68 <USBD_StdEPReq+0x318>
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 809b 	beq.w	8009c1a <USBD_StdEPReq+0x1ca>
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d03c      	beq.n	8009b62 <USBD_StdEPReq+0x112>
 8009ae8:	e13e      	b.n	8009d68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d002      	beq.n	8009afc <USBD_StdEPReq+0xac>
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d016      	beq.n	8009b28 <USBD_StdEPReq+0xd8>
 8009afa:	e02c      	b.n	8009b56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00d      	beq.n	8009b1e <USBD_StdEPReq+0xce>
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	2b80      	cmp	r3, #128	@ 0x80
 8009b06:	d00a      	beq.n	8009b1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fe0f 	bl	800a730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b12:	2180      	movs	r1, #128	@ 0x80
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fe0b 	bl	800a730 <USBD_LL_StallEP>
 8009b1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b1c:	e020      	b.n	8009b60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fc7a 	bl	800a41a <USBD_CtlError>
              break;
 8009b26:	e01b      	b.n	8009b60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	885b      	ldrh	r3, [r3, #2]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10e      	bne.n	8009b4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00b      	beq.n	8009b4e <USBD_StdEPReq+0xfe>
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	2b80      	cmp	r3, #128	@ 0x80
 8009b3a:	d008      	beq.n	8009b4e <USBD_StdEPReq+0xfe>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	88db      	ldrh	r3, [r3, #6]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d104      	bne.n	8009b4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fdf1 	bl	800a730 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fcb1 	bl	800a4b6 <USBD_CtlSendStatus>

              break;
 8009b54:	e004      	b.n	8009b60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fc5e 	bl	800a41a <USBD_CtlError>
              break;
 8009b5e:	bf00      	nop
          }
          break;
 8009b60:	e107      	b.n	8009d72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d002      	beq.n	8009b74 <USBD_StdEPReq+0x124>
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d016      	beq.n	8009ba0 <USBD_StdEPReq+0x150>
 8009b72:	e04b      	b.n	8009c0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00d      	beq.n	8009b96 <USBD_StdEPReq+0x146>
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	2b80      	cmp	r3, #128	@ 0x80
 8009b7e:	d00a      	beq.n	8009b96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fdd3 	bl	800a730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b8a:	2180      	movs	r1, #128	@ 0x80
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fdcf 	bl	800a730 <USBD_LL_StallEP>
 8009b92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b94:	e040      	b.n	8009c18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc3e 	bl	800a41a <USBD_CtlError>
              break;
 8009b9e:	e03b      	b.n	8009c18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	885b      	ldrh	r3, [r3, #2]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d136      	bne.n	8009c16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d004      	beq.n	8009bbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fdd9 	bl	800a76e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fc7a 	bl	800a4b6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff fe38 	bl	800983c <USBD_CoreFindEP>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bd0:	7b7b      	ldrb	r3, [r7, #13]
 8009bd2:	2bff      	cmp	r3, #255	@ 0xff
 8009bd4:	d01f      	beq.n	8009c16 <USBD_StdEPReq+0x1c6>
 8009bd6:	7b7b      	ldrb	r3, [r7, #13]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11c      	bne.n	8009c16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009bdc:	7b7a      	ldrb	r2, [r7, #13]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009be4:	7b7a      	ldrb	r2, [r7, #13]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	32ae      	adds	r2, #174	@ 0xae
 8009bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d010      	beq.n	8009c16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009bf4:	7b7a      	ldrb	r2, [r7, #13]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	32ae      	adds	r2, #174	@ 0xae
 8009bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	4798      	blx	r3
 8009c06:	4603      	mov	r3, r0
 8009c08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009c0a:	e004      	b.n	8009c16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fc03 	bl	800a41a <USBD_CtlError>
              break;
 8009c14:	e000      	b.n	8009c18 <USBD_StdEPReq+0x1c8>
              break;
 8009c16:	bf00      	nop
          }
          break;
 8009c18:	e0ab      	b.n	8009d72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d002      	beq.n	8009c2c <USBD_StdEPReq+0x1dc>
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d032      	beq.n	8009c90 <USBD_StdEPReq+0x240>
 8009c2a:	e097      	b.n	8009d5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d007      	beq.n	8009c42 <USBD_StdEPReq+0x1f2>
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	2b80      	cmp	r3, #128	@ 0x80
 8009c36:	d004      	beq.n	8009c42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fbed 	bl	800a41a <USBD_CtlError>
                break;
 8009c40:	e091      	b.n	8009d66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	da0b      	bge.n	8009c62 <USBD_StdEPReq+0x212>
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	3310      	adds	r3, #16
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	3304      	adds	r3, #4
 8009c60:	e00b      	b.n	8009c7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
 8009c64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c68:	4613      	mov	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4413      	add	r3, r2
 8009c78:	3304      	adds	r3, #4
 8009c7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2202      	movs	r2, #2
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fbd7 	bl	800a43c <USBD_CtlSendData>
              break;
 8009c8e:	e06a      	b.n	8009d66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	da11      	bge.n	8009cbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	f003 020f 	and.w	r2, r3, #15
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	3324      	adds	r3, #36	@ 0x24
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d117      	bne.n	8009ce2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fbb0 	bl	800a41a <USBD_CtlError>
                  break;
 8009cba:	e054      	b.n	8009d66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
 8009cbe:	f003 020f 	and.w	r2, r3, #15
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	440b      	add	r3, r1
 8009cce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d104      	bne.n	8009ce2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fb9d 	bl	800a41a <USBD_CtlError>
                  break;
 8009ce0:	e041      	b.n	8009d66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da0b      	bge.n	8009d02 <USBD_StdEPReq+0x2b2>
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
 8009cec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	3310      	adds	r3, #16
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	3304      	adds	r3, #4
 8009d00:	e00b      	b.n	8009d1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	4413      	add	r3, r2
 8009d18:	3304      	adds	r3, #4
 8009d1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <USBD_StdEPReq+0x2d8>
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	2b80      	cmp	r3, #128	@ 0x80
 8009d26:	d103      	bne.n	8009d30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	e00e      	b.n	8009d4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fd39 	bl	800a7ac <USBD_LL_IsStallEP>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2201      	movs	r2, #1
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	e002      	b.n	8009d4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2202      	movs	r2, #2
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fb71 	bl	800a43c <USBD_CtlSendData>
              break;
 8009d5a:	e004      	b.n	8009d66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fb5b 	bl	800a41a <USBD_CtlError>
              break;
 8009d64:	bf00      	nop
          }
          break;
 8009d66:	e004      	b.n	8009d72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fb55 	bl	800a41a <USBD_CtlError>
          break;
 8009d70:	bf00      	nop
      }
      break;
 8009d72:	e005      	b.n	8009d80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fb4f 	bl	800a41a <USBD_CtlError>
      break;
 8009d7c:	e000      	b.n	8009d80 <USBD_StdEPReq+0x330>
      break;
 8009d7e:	bf00      	nop
  }

  return ret;
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	885b      	ldrh	r3, [r3, #2]
 8009da6:	0a1b      	lsrs	r3, r3, #8
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	3b01      	subs	r3, #1
 8009dac:	2b06      	cmp	r3, #6
 8009dae:	f200 8128 	bhi.w	800a002 <USBD_GetDescriptor+0x276>
 8009db2:	a201      	add	r2, pc, #4	@ (adr r2, 8009db8 <USBD_GetDescriptor+0x2c>)
 8009db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db8:	08009dd5 	.word	0x08009dd5
 8009dbc:	08009ded 	.word	0x08009ded
 8009dc0:	08009e2d 	.word	0x08009e2d
 8009dc4:	0800a003 	.word	0x0800a003
 8009dc8:	0800a003 	.word	0x0800a003
 8009dcc:	08009fa3 	.word	0x08009fa3
 8009dd0:	08009fcf 	.word	0x08009fcf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	7c12      	ldrb	r2, [r2, #16]
 8009de0:	f107 0108 	add.w	r1, r7, #8
 8009de4:	4610      	mov	r0, r2
 8009de6:	4798      	blx	r3
 8009de8:	60f8      	str	r0, [r7, #12]
      break;
 8009dea:	e112      	b.n	800a012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	7c1b      	ldrb	r3, [r3, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10d      	bne.n	8009e10 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfc:	f107 0208 	add.w	r2, r7, #8
 8009e00:	4610      	mov	r0, r2
 8009e02:	4798      	blx	r3
 8009e04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e0e:	e100      	b.n	800a012 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e18:	f107 0208 	add.w	r2, r7, #8
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	4798      	blx	r3
 8009e20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3301      	adds	r3, #1
 8009e26:	2202      	movs	r2, #2
 8009e28:	701a      	strb	r2, [r3, #0]
      break;
 8009e2a:	e0f2      	b.n	800a012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	885b      	ldrh	r3, [r3, #2]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	f200 80ac 	bhi.w	8009f90 <USBD_GetDescriptor+0x204>
 8009e38:	a201      	add	r2, pc, #4	@ (adr r2, 8009e40 <USBD_GetDescriptor+0xb4>)
 8009e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3e:	bf00      	nop
 8009e40:	08009e59 	.word	0x08009e59
 8009e44:	08009e8d 	.word	0x08009e8d
 8009e48:	08009ec1 	.word	0x08009ec1
 8009e4c:	08009ef5 	.word	0x08009ef5
 8009e50:	08009f29 	.word	0x08009f29
 8009e54:	08009f5d 	.word	0x08009f5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	7c12      	ldrb	r2, [r2, #16]
 8009e70:	f107 0108 	add.w	r1, r7, #8
 8009e74:	4610      	mov	r0, r2
 8009e76:	4798      	blx	r3
 8009e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7a:	e091      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 facb 	bl	800a41a <USBD_CtlError>
            err++;
 8009e84:	7afb      	ldrb	r3, [r7, #11]
 8009e86:	3301      	adds	r3, #1
 8009e88:	72fb      	strb	r3, [r7, #11]
          break;
 8009e8a:	e089      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	7c12      	ldrb	r2, [r2, #16]
 8009ea4:	f107 0108 	add.w	r1, r7, #8
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4798      	blx	r3
 8009eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eae:	e077      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fab1 	bl	800a41a <USBD_CtlError>
            err++;
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ebe:	e06f      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	7c12      	ldrb	r2, [r2, #16]
 8009ed8:	f107 0108 	add.w	r1, r7, #8
 8009edc:	4610      	mov	r0, r2
 8009ede:	4798      	blx	r3
 8009ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ee2:	e05d      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fa97 	bl	800a41a <USBD_CtlError>
            err++;
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ef2:	e055      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00b      	beq.n	8009f18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	7c12      	ldrb	r2, [r2, #16]
 8009f0c:	f107 0108 	add.w	r1, r7, #8
 8009f10:	4610      	mov	r0, r2
 8009f12:	4798      	blx	r3
 8009f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f16:	e043      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fa7d 	bl	800a41a <USBD_CtlError>
            err++;
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	3301      	adds	r3, #1
 8009f24:	72fb      	strb	r3, [r7, #11]
          break;
 8009f26:	e03b      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	7c12      	ldrb	r2, [r2, #16]
 8009f40:	f107 0108 	add.w	r1, r7, #8
 8009f44:	4610      	mov	r0, r2
 8009f46:	4798      	blx	r3
 8009f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f4a:	e029      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa63 	bl	800a41a <USBD_CtlError>
            err++;
 8009f54:	7afb      	ldrb	r3, [r7, #11]
 8009f56:	3301      	adds	r3, #1
 8009f58:	72fb      	strb	r3, [r7, #11]
          break;
 8009f5a:	e021      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00b      	beq.n	8009f80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	7c12      	ldrb	r2, [r2, #16]
 8009f74:	f107 0108 	add.w	r1, r7, #8
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4798      	blx	r3
 8009f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f7e:	e00f      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fa49 	bl	800a41a <USBD_CtlError>
            err++;
 8009f88:	7afb      	ldrb	r3, [r7, #11]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f8e:	e007      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa41 	bl	800a41a <USBD_CtlError>
          err++;
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f9e:	bf00      	nop
      }
      break;
 8009fa0:	e037      	b.n	800a012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	7c1b      	ldrb	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d109      	bne.n	8009fbe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb2:	f107 0208 	add.w	r2, r7, #8
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	4798      	blx	r3
 8009fba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fbc:	e029      	b.n	800a012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fa2a 	bl	800a41a <USBD_CtlError>
        err++;
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	72fb      	strb	r3, [r7, #11]
      break;
 8009fcc:	e021      	b.n	800a012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	7c1b      	ldrb	r3, [r3, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10d      	bne.n	8009ff2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fde:	f107 0208 	add.w	r2, r7, #8
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4798      	blx	r3
 8009fe6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3301      	adds	r3, #1
 8009fec:	2207      	movs	r2, #7
 8009fee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ff0:	e00f      	b.n	800a012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fa10 	bl	800a41a <USBD_CtlError>
        err++;
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	72fb      	strb	r3, [r7, #11]
      break;
 800a000:	e007      	b.n	800a012 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fa08 	bl	800a41a <USBD_CtlError>
      err++;
 800a00a:	7afb      	ldrb	r3, [r7, #11]
 800a00c:	3301      	adds	r3, #1
 800a00e:	72fb      	strb	r3, [r7, #11]
      break;
 800a010:	bf00      	nop
  }

  if (err != 0U)
 800a012:	7afb      	ldrb	r3, [r7, #11]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d11e      	bne.n	800a056 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	88db      	ldrh	r3, [r3, #6]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d016      	beq.n	800a04e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a020:	893b      	ldrh	r3, [r7, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00e      	beq.n	800a044 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	88da      	ldrh	r2, [r3, #6]
 800a02a:	893b      	ldrh	r3, [r7, #8]
 800a02c:	4293      	cmp	r3, r2
 800a02e:	bf28      	it	cs
 800a030:	4613      	movcs	r3, r2
 800a032:	b29b      	uxth	r3, r3
 800a034:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a036:	893b      	ldrh	r3, [r7, #8]
 800a038:	461a      	mov	r2, r3
 800a03a:	68f9      	ldr	r1, [r7, #12]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f9fd 	bl	800a43c <USBD_CtlSendData>
 800a042:	e009      	b.n	800a058 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f9e7 	bl	800a41a <USBD_CtlError>
 800a04c:	e004      	b.n	800a058 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fa31 	bl	800a4b6 <USBD_CtlSendStatus>
 800a054:	e000      	b.n	800a058 <USBD_GetDescriptor+0x2cc>
    return;
 800a056:	bf00      	nop
  }
}
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop

0800a060 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	889b      	ldrh	r3, [r3, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d131      	bne.n	800a0d6 <USBD_SetAddress+0x76>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	88db      	ldrh	r3, [r3, #6]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d12d      	bne.n	800a0d6 <USBD_SetAddress+0x76>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	885b      	ldrh	r3, [r3, #2]
 800a07e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a080:	d829      	bhi.n	800a0d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	885b      	ldrh	r3, [r3, #2]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a08c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b03      	cmp	r3, #3
 800a098:	d104      	bne.n	800a0a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f9bc 	bl	800a41a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a2:	e01d      	b.n	800a0e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	7bfa      	ldrb	r2, [r7, #15]
 800a0a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fba7 	bl	800a804 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f9fd 	bl	800a4b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d004      	beq.n	800a0cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ca:	e009      	b.n	800a0e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d4:	e004      	b.n	800a0e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f99e 	bl	800a41a <USBD_CtlError>
  }
}
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	885b      	ldrh	r3, [r3, #2]
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	4b4e      	ldr	r3, [pc, #312]	@ (800a238 <USBD_SetConfig+0x150>)
 800a0fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a100:	4b4d      	ldr	r3, [pc, #308]	@ (800a238 <USBD_SetConfig+0x150>)
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d905      	bls.n	800a114 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f985 	bl	800a41a <USBD_CtlError>
    return USBD_FAIL;
 800a110:	2303      	movs	r3, #3
 800a112:	e08c      	b.n	800a22e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d002      	beq.n	800a126 <USBD_SetConfig+0x3e>
 800a120:	2b03      	cmp	r3, #3
 800a122:	d029      	beq.n	800a178 <USBD_SetConfig+0x90>
 800a124:	e075      	b.n	800a212 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a126:	4b44      	ldr	r3, [pc, #272]	@ (800a238 <USBD_SetConfig+0x150>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d020      	beq.n	800a170 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a12e:	4b42      	ldr	r3, [pc, #264]	@ (800a238 <USBD_SetConfig+0x150>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a138:	4b3f      	ldr	r3, [pc, #252]	@ (800a238 <USBD_SetConfig+0x150>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff f837 	bl	80091b2 <USBD_SetClassConfig>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a148:	7bfb      	ldrb	r3, [r7, #15]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d008      	beq.n	800a160 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f962 	bl	800a41a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2202      	movs	r2, #2
 800a15a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a15e:	e065      	b.n	800a22c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f9a8 	bl	800a4b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2203      	movs	r2, #3
 800a16a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a16e:	e05d      	b.n	800a22c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f9a0 	bl	800a4b6 <USBD_CtlSendStatus>
      break;
 800a176:	e059      	b.n	800a22c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a178:	4b2f      	ldr	r3, [pc, #188]	@ (800a238 <USBD_SetConfig+0x150>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d112      	bne.n	800a1a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2202      	movs	r2, #2
 800a184:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a188:	4b2b      	ldr	r3, [pc, #172]	@ (800a238 <USBD_SetConfig+0x150>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a192:	4b29      	ldr	r3, [pc, #164]	@ (800a238 <USBD_SetConfig+0x150>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	4619      	mov	r1, r3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff f826 	bl	80091ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f989 	bl	800a4b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1a4:	e042      	b.n	800a22c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a1a6:	4b24      	ldr	r3, [pc, #144]	@ (800a238 <USBD_SetConfig+0x150>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d02a      	beq.n	800a20a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff f814 	bl	80091ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1c2:	4b1d      	ldr	r3, [pc, #116]	@ (800a238 <USBD_SetConfig+0x150>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a238 <USBD_SetConfig+0x150>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7fe ffed 	bl	80091b2 <USBD_SetClassConfig>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00f      	beq.n	800a202 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f918 	bl	800a41a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7fe fff9 	bl	80091ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a200:	e014      	b.n	800a22c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f957 	bl	800a4b6 <USBD_CtlSendStatus>
      break;
 800a208:	e010      	b.n	800a22c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f953 	bl	800a4b6 <USBD_CtlSendStatus>
      break;
 800a210:	e00c      	b.n	800a22c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f900 	bl	800a41a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a21a:	4b07      	ldr	r3, [pc, #28]	@ (800a238 <USBD_SetConfig+0x150>)
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7fe ffe2 	bl	80091ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a226:	2303      	movs	r3, #3
 800a228:	73fb      	strb	r3, [r7, #15]
      break;
 800a22a:	bf00      	nop
  }

  return ret;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000434 	.word	0x20000434

0800a23c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	88db      	ldrh	r3, [r3, #6]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d004      	beq.n	800a258 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f8e2 	bl	800a41a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a256:	e023      	b.n	800a2a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b02      	cmp	r3, #2
 800a262:	dc02      	bgt.n	800a26a <USBD_GetConfig+0x2e>
 800a264:	2b00      	cmp	r3, #0
 800a266:	dc03      	bgt.n	800a270 <USBD_GetConfig+0x34>
 800a268:	e015      	b.n	800a296 <USBD_GetConfig+0x5a>
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	d00b      	beq.n	800a286 <USBD_GetConfig+0x4a>
 800a26e:	e012      	b.n	800a296 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3308      	adds	r3, #8
 800a27a:	2201      	movs	r2, #1
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f8dc 	bl	800a43c <USBD_CtlSendData>
        break;
 800a284:	e00c      	b.n	800a2a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3304      	adds	r3, #4
 800a28a:	2201      	movs	r2, #1
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f8d4 	bl	800a43c <USBD_CtlSendData>
        break;
 800a294:	e004      	b.n	800a2a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f8be 	bl	800a41a <USBD_CtlError>
        break;
 800a29e:	bf00      	nop
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d81e      	bhi.n	800a2fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	88db      	ldrh	r3, [r3, #6]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d004      	beq.n	800a2d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f8a5 	bl	800a41a <USBD_CtlError>
        break;
 800a2d0:	e01a      	b.n	800a308 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d005      	beq.n	800a2ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f043 0202 	orr.w	r2, r3, #2
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f8a0 	bl	800a43c <USBD_CtlSendData>
      break;
 800a2fc:	e004      	b.n	800a308 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f88a 	bl	800a41a <USBD_CtlError>
      break;
 800a306:	bf00      	nop
  }
}
 800a308:	bf00      	nop
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	885b      	ldrh	r3, [r3, #2]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d107      	bne.n	800a332 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f8c3 	bl	800a4b6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a330:	e013      	b.n	800a35a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	885b      	ldrh	r3, [r3, #2]
 800a336:	2b02      	cmp	r3, #2
 800a338:	d10b      	bne.n	800a352 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	889b      	ldrh	r3, [r3, #4]
 800a33e:	0a1b      	lsrs	r3, r3, #8
 800a340:	b29b      	uxth	r3, r3
 800a342:	b2da      	uxtb	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f8b3 	bl	800a4b6 <USBD_CtlSendStatus>
}
 800a350:	e003      	b.n	800a35a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f860 	bl	800a41a <USBD_CtlError>
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a372:	b2db      	uxtb	r3, r3
 800a374:	3b01      	subs	r3, #1
 800a376:	2b02      	cmp	r3, #2
 800a378:	d80b      	bhi.n	800a392 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	885b      	ldrh	r3, [r3, #2]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d10c      	bne.n	800a39c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f893 	bl	800a4b6 <USBD_CtlSendStatus>
      }
      break;
 800a390:	e004      	b.n	800a39c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f840 	bl	800a41a <USBD_CtlError>
      break;
 800a39a:	e000      	b.n	800a39e <USBD_ClrFeature+0x3c>
      break;
 800a39c:	bf00      	nop
  }
}
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	781a      	ldrb	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	781a      	ldrb	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f7ff fa40 	bl	8009856 <SWAPBYTE>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	461a      	mov	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f7ff fa33 	bl	8009856 <SWAPBYTE>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3301      	adds	r3, #1
 800a402:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f7ff fa26 	bl	8009856 <SWAPBYTE>
 800a40a:	4603      	mov	r3, r0
 800a40c:	461a      	mov	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	80da      	strh	r2, [r3, #6]
}
 800a412:	bf00      	nop
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a424:	2180      	movs	r1, #128	@ 0x80
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f982 	bl	800a730 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a42c:	2100      	movs	r1, #0
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f97e 	bl	800a730 <USBD_LL_StallEP>
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	2100      	movs	r1, #0
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 f9ed 	bl	800a842 <USBD_LL_Transmit>

  return USBD_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	2100      	movs	r1, #0
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 f9dc 	bl	800a842 <USBD_LL_Transmit>

  return USBD_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 f9ec 	bl	800a884 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2204      	movs	r2, #4
 800a4c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f9b8 	bl	800a842 <USBD_LL_Transmit>

  return USBD_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2205      	movs	r2, #5
 800a4e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f9c6 	bl	800a884 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f7fe fe80 	bl	800921e <USBD_LL_SetupStage>
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	460b      	mov	r3, r1
 800a530:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a538:	78fa      	ldrb	r2, [r7, #3]
 800a53a:	6879      	ldr	r1, [r7, #4]
 800a53c:	4613      	mov	r3, r2
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	4413      	add	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	440b      	add	r3, r1
 800a546:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	4619      	mov	r1, r3
 800a550:	f7fe feba 	bl	80092c8 <USBD_LL_DataOutStage>
}
 800a554:	bf00      	nop
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a56e:	78fa      	ldrb	r2, [r7, #3]
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	4613      	mov	r3, r2
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	4413      	add	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	440b      	add	r3, r1
 800a57c:	3320      	adds	r3, #32
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	78fb      	ldrb	r3, [r7, #3]
 800a582:	4619      	mov	r1, r3
 800a584:	f7fe ff53 	bl	800942e <USBD_LL_DataInStage>
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff f88d 	bl	80096be <USBD_LL_SOF>
}
 800a5a4:	bf00      	nop
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	79db      	ldrb	r3, [r3, #7]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d102      	bne.n	800a5c6 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]
 800a5c4:	e008      	b.n	800a5d8 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	79db      	ldrb	r3, [r3, #7]
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d102      	bne.n	800a5d4 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	73fb      	strb	r3, [r7, #15]
 800a5d2:	e001      	b.n	800a5d8 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a5d4:	f7f8 fc0e 	bl	8002df4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5de:	7bfa      	ldrb	r2, [r7, #15]
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7ff f827 	bl	8009636 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe ffcf 	bl	8009592 <USBD_LL_Reset>
}
 800a5f4:	bf00      	nop
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff f823 	bl	8009656 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6812      	ldr	r2, [r2, #0]
 800a61e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a622:	f043 0301 	orr.w	r3, r3, #1
 800a626:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	7adb      	ldrb	r3, [r3, #11]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a630:	4b04      	ldr	r3, [pc, #16]	@ (800a644 <HAL_PCD_SuspendCallback+0x48>)
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	4a03      	ldr	r2, [pc, #12]	@ (800a644 <HAL_PCD_SuspendCallback+0x48>)
 800a636:	f043 0306 	orr.w	r3, r3, #6
 800a63a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	e000ed00 	.word	0xe000ed00

0800a648 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff f819 	bl	800968e <USBD_LL_Resume>
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	460b      	mov	r3, r1
 800a66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a676:	78fa      	ldrb	r2, [r7, #3]
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff f871 	bl	8009762 <USBD_LL_IsoOUTIncomplete>
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	4611      	mov	r1, r2
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7ff f82d 	bl	80096fe <USBD_LL_IsoINIncomplete>
}
 800a6a4:	bf00      	nop
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7ff f883 	bl	80097c6 <USBD_LL_DevConnected>
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7ff f880 	bl	80097dc <USBD_LL_DevDisconnected>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	70fb      	strb	r3, [r7, #3]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70bb      	strb	r3, [r7, #2]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a70c:	78bb      	ldrb	r3, [r7, #2]
 800a70e:	883a      	ldrh	r2, [r7, #0]
 800a710:	78f9      	ldrb	r1, [r7, #3]
 800a712:	f7fb ffcc 	bl	80066ae <HAL_PCD_EP_Open>
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 f8d3 	bl	800a8c8 <USBD_Get_USB_Status>
 800a722:	4603      	mov	r3, r0
 800a724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a726:	7bbb      	ldrb	r3, [r7, #14]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	460b      	mov	r3, r1
 800a73a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a74a:	78fa      	ldrb	r2, [r7, #3]
 800a74c:	4611      	mov	r1, r2
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fc f88c 	bl	800686c <HAL_PCD_EP_SetStall>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 f8b4 	bl	800a8c8 <USBD_Get_USB_Status>
 800a760:	4603      	mov	r3, r0
 800a762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a764:	7bbb      	ldrb	r3, [r7, #14]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	460b      	mov	r3, r1
 800a778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a788:	78fa      	ldrb	r2, [r7, #3]
 800a78a:	4611      	mov	r1, r2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fc f8d0 	bl	8006932 <HAL_PCD_EP_ClrStall>
 800a792:	4603      	mov	r3, r0
 800a794:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a796:	7bfb      	ldrb	r3, [r7, #15]
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 f895 	bl	800a8c8 <USBD_Get_USB_Status>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	da0b      	bge.n	800a7e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7c8:	78fb      	ldrb	r3, [r7, #3]
 800a7ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7ce:	68f9      	ldr	r1, [r7, #12]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	00db      	lsls	r3, r3, #3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	440b      	add	r3, r1
 800a7da:	3316      	adds	r3, #22
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	e00b      	b.n	800a7f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7e6:	68f9      	ldr	r1, [r7, #12]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	4413      	add	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a7f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a810:	2300      	movs	r3, #0
 800a812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f7fb ff1f 	bl	8006666 <HAL_PCD_SetAddress>
 800a828:	4603      	mov	r3, r0
 800a82a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a82c:	7bfb      	ldrb	r3, [r7, #15]
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 f84a 	bl	800a8c8 <USBD_Get_USB_Status>
 800a834:	4603      	mov	r3, r0
 800a836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a838:	7bbb      	ldrb	r3, [r7, #14]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b086      	sub	sp, #24
 800a846:	af00      	add	r7, sp, #0
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]
 800a84e:	460b      	mov	r3, r1
 800a850:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a860:	7af9      	ldrb	r1, [r7, #11]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	f7fb ffc7 	bl	80067f8 <HAL_PCD_EP_Transmit>
 800a86a:	4603      	mov	r3, r0
 800a86c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
 800a870:	4618      	mov	r0, r3
 800a872:	f000 f829 	bl	800a8c8 <USBD_Get_USB_Status>
 800a876:	4603      	mov	r3, r0
 800a878:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a87a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	607a      	str	r2, [r7, #4]
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	460b      	mov	r3, r1
 800a892:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a8a2:	7af9      	ldrb	r1, [r7, #11]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	f7fb ff6b 	bl	8006782 <HAL_PCD_EP_Receive>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 f808 	bl	800a8c8 <USBD_Get_USB_Status>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8d6:	79fb      	ldrb	r3, [r7, #7]
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	d817      	bhi.n	800a90c <USBD_Get_USB_Status+0x44>
 800a8dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e4 <USBD_Get_USB_Status+0x1c>)
 800a8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e2:	bf00      	nop
 800a8e4:	0800a8f5 	.word	0x0800a8f5
 800a8e8:	0800a8fb 	.word	0x0800a8fb
 800a8ec:	0800a901 	.word	0x0800a901
 800a8f0:	0800a907 	.word	0x0800a907
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f8:	e00b      	b.n	800a912 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8fe:	e008      	b.n	800a912 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a900:	2301      	movs	r3, #1
 800a902:	73fb      	strb	r3, [r7, #15]
    break;
 800a904:	e005      	b.n	800a912 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a906:	2303      	movs	r3, #3
 800a908:	73fb      	strb	r3, [r7, #15]
    break;
 800a90a:	e002      	b.n	800a912 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a90c:	2303      	movs	r3, #3
 800a90e:	73fb      	strb	r3, [r7, #15]
    break;
 800a910:	bf00      	nop
  }
  return usb_status;
 800a912:	7bfb      	ldrb	r3, [r7, #15]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <__cvt>:
 800a920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a924:	ec57 6b10 	vmov	r6, r7, d0
 800a928:	2f00      	cmp	r7, #0
 800a92a:	460c      	mov	r4, r1
 800a92c:	4619      	mov	r1, r3
 800a92e:	463b      	mov	r3, r7
 800a930:	bfbb      	ittet	lt
 800a932:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a936:	461f      	movlt	r7, r3
 800a938:	2300      	movge	r3, #0
 800a93a:	232d      	movlt	r3, #45	@ 0x2d
 800a93c:	700b      	strb	r3, [r1, #0]
 800a93e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a940:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a944:	4691      	mov	r9, r2
 800a946:	f023 0820 	bic.w	r8, r3, #32
 800a94a:	bfbc      	itt	lt
 800a94c:	4632      	movlt	r2, r6
 800a94e:	4616      	movlt	r6, r2
 800a950:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a954:	d005      	beq.n	800a962 <__cvt+0x42>
 800a956:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a95a:	d100      	bne.n	800a95e <__cvt+0x3e>
 800a95c:	3401      	adds	r4, #1
 800a95e:	2102      	movs	r1, #2
 800a960:	e000      	b.n	800a964 <__cvt+0x44>
 800a962:	2103      	movs	r1, #3
 800a964:	ab03      	add	r3, sp, #12
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	ab02      	add	r3, sp, #8
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	ec47 6b10 	vmov	d0, r6, r7
 800a970:	4653      	mov	r3, sl
 800a972:	4622      	mov	r2, r4
 800a974:	f000 fe70 	bl	800b658 <_dtoa_r>
 800a978:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a97c:	4605      	mov	r5, r0
 800a97e:	d119      	bne.n	800a9b4 <__cvt+0x94>
 800a980:	f019 0f01 	tst.w	r9, #1
 800a984:	d00e      	beq.n	800a9a4 <__cvt+0x84>
 800a986:	eb00 0904 	add.w	r9, r0, r4
 800a98a:	2200      	movs	r2, #0
 800a98c:	2300      	movs	r3, #0
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	f7f6 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 800a996:	b108      	cbz	r0, 800a99c <__cvt+0x7c>
 800a998:	f8cd 900c 	str.w	r9, [sp, #12]
 800a99c:	2230      	movs	r2, #48	@ 0x30
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	454b      	cmp	r3, r9
 800a9a2:	d31e      	bcc.n	800a9e2 <__cvt+0xc2>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9a8:	1b5b      	subs	r3, r3, r5
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	b004      	add	sp, #16
 800a9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a9b8:	eb00 0904 	add.w	r9, r0, r4
 800a9bc:	d1e5      	bne.n	800a98a <__cvt+0x6a>
 800a9be:	7803      	ldrb	r3, [r0, #0]
 800a9c0:	2b30      	cmp	r3, #48	@ 0x30
 800a9c2:	d10a      	bne.n	800a9da <__cvt+0xba>
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	f7f6 f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9d0:	b918      	cbnz	r0, 800a9da <__cvt+0xba>
 800a9d2:	f1c4 0401 	rsb	r4, r4, #1
 800a9d6:	f8ca 4000 	str.w	r4, [sl]
 800a9da:	f8da 3000 	ldr.w	r3, [sl]
 800a9de:	4499      	add	r9, r3
 800a9e0:	e7d3      	b.n	800a98a <__cvt+0x6a>
 800a9e2:	1c59      	adds	r1, r3, #1
 800a9e4:	9103      	str	r1, [sp, #12]
 800a9e6:	701a      	strb	r2, [r3, #0]
 800a9e8:	e7d9      	b.n	800a99e <__cvt+0x7e>

0800a9ea <__exponent>:
 800a9ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ec:	2900      	cmp	r1, #0
 800a9ee:	bfba      	itte	lt
 800a9f0:	4249      	neglt	r1, r1
 800a9f2:	232d      	movlt	r3, #45	@ 0x2d
 800a9f4:	232b      	movge	r3, #43	@ 0x2b
 800a9f6:	2909      	cmp	r1, #9
 800a9f8:	7002      	strb	r2, [r0, #0]
 800a9fa:	7043      	strb	r3, [r0, #1]
 800a9fc:	dd29      	ble.n	800aa52 <__exponent+0x68>
 800a9fe:	f10d 0307 	add.w	r3, sp, #7
 800aa02:	461d      	mov	r5, r3
 800aa04:	270a      	movs	r7, #10
 800aa06:	461a      	mov	r2, r3
 800aa08:	fbb1 f6f7 	udiv	r6, r1, r7
 800aa0c:	fb07 1416 	mls	r4, r7, r6, r1
 800aa10:	3430      	adds	r4, #48	@ 0x30
 800aa12:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aa16:	460c      	mov	r4, r1
 800aa18:	2c63      	cmp	r4, #99	@ 0x63
 800aa1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa1e:	4631      	mov	r1, r6
 800aa20:	dcf1      	bgt.n	800aa06 <__exponent+0x1c>
 800aa22:	3130      	adds	r1, #48	@ 0x30
 800aa24:	1e94      	subs	r4, r2, #2
 800aa26:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa2a:	1c41      	adds	r1, r0, #1
 800aa2c:	4623      	mov	r3, r4
 800aa2e:	42ab      	cmp	r3, r5
 800aa30:	d30a      	bcc.n	800aa48 <__exponent+0x5e>
 800aa32:	f10d 0309 	add.w	r3, sp, #9
 800aa36:	1a9b      	subs	r3, r3, r2
 800aa38:	42ac      	cmp	r4, r5
 800aa3a:	bf88      	it	hi
 800aa3c:	2300      	movhi	r3, #0
 800aa3e:	3302      	adds	r3, #2
 800aa40:	4403      	add	r3, r0
 800aa42:	1a18      	subs	r0, r3, r0
 800aa44:	b003      	add	sp, #12
 800aa46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa48:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aa4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aa50:	e7ed      	b.n	800aa2e <__exponent+0x44>
 800aa52:	2330      	movs	r3, #48	@ 0x30
 800aa54:	3130      	adds	r1, #48	@ 0x30
 800aa56:	7083      	strb	r3, [r0, #2]
 800aa58:	70c1      	strb	r1, [r0, #3]
 800aa5a:	1d03      	adds	r3, r0, #4
 800aa5c:	e7f1      	b.n	800aa42 <__exponent+0x58>
	...

0800aa60 <_printf_float>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	b08d      	sub	sp, #52	@ 0x34
 800aa66:	460c      	mov	r4, r1
 800aa68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aa6c:	4616      	mov	r6, r2
 800aa6e:	461f      	mov	r7, r3
 800aa70:	4605      	mov	r5, r0
 800aa72:	f000 fcef 	bl	800b454 <_localeconv_r>
 800aa76:	6803      	ldr	r3, [r0, #0]
 800aa78:	9304      	str	r3, [sp, #16]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7f5 fbf8 	bl	8000270 <strlen>
 800aa80:	2300      	movs	r3, #0
 800aa82:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa84:	f8d8 3000 	ldr.w	r3, [r8]
 800aa88:	9005      	str	r0, [sp, #20]
 800aa8a:	3307      	adds	r3, #7
 800aa8c:	f023 0307 	bic.w	r3, r3, #7
 800aa90:	f103 0208 	add.w	r2, r3, #8
 800aa94:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa98:	f8d4 b000 	ldr.w	fp, [r4]
 800aa9c:	f8c8 2000 	str.w	r2, [r8]
 800aaa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aaa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aaa8:	9307      	str	r3, [sp, #28]
 800aaaa:	f8cd 8018 	str.w	r8, [sp, #24]
 800aaae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aab6:	4b9c      	ldr	r3, [pc, #624]	@ (800ad28 <_printf_float+0x2c8>)
 800aab8:	f04f 32ff 	mov.w	r2, #4294967295
 800aabc:	f7f6 f836 	bl	8000b2c <__aeabi_dcmpun>
 800aac0:	bb70      	cbnz	r0, 800ab20 <_printf_float+0xc0>
 800aac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aac6:	4b98      	ldr	r3, [pc, #608]	@ (800ad28 <_printf_float+0x2c8>)
 800aac8:	f04f 32ff 	mov.w	r2, #4294967295
 800aacc:	f7f6 f810 	bl	8000af0 <__aeabi_dcmple>
 800aad0:	bb30      	cbnz	r0, 800ab20 <_printf_float+0xc0>
 800aad2:	2200      	movs	r2, #0
 800aad4:	2300      	movs	r3, #0
 800aad6:	4640      	mov	r0, r8
 800aad8:	4649      	mov	r1, r9
 800aada:	f7f5 ffff 	bl	8000adc <__aeabi_dcmplt>
 800aade:	b110      	cbz	r0, 800aae6 <_printf_float+0x86>
 800aae0:	232d      	movs	r3, #45	@ 0x2d
 800aae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aae6:	4a91      	ldr	r2, [pc, #580]	@ (800ad2c <_printf_float+0x2cc>)
 800aae8:	4b91      	ldr	r3, [pc, #580]	@ (800ad30 <_printf_float+0x2d0>)
 800aaea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aaee:	bf8c      	ite	hi
 800aaf0:	4690      	movhi	r8, r2
 800aaf2:	4698      	movls	r8, r3
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	6123      	str	r3, [r4, #16]
 800aaf8:	f02b 0304 	bic.w	r3, fp, #4
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	f04f 0900 	mov.w	r9, #0
 800ab02:	9700      	str	r7, [sp, #0]
 800ab04:	4633      	mov	r3, r6
 800ab06:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ab08:	4621      	mov	r1, r4
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f000 f9d2 	bl	800aeb4 <_printf_common>
 800ab10:	3001      	adds	r0, #1
 800ab12:	f040 808d 	bne.w	800ac30 <_printf_float+0x1d0>
 800ab16:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1a:	b00d      	add	sp, #52	@ 0x34
 800ab1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab20:	4642      	mov	r2, r8
 800ab22:	464b      	mov	r3, r9
 800ab24:	4640      	mov	r0, r8
 800ab26:	4649      	mov	r1, r9
 800ab28:	f7f6 f800 	bl	8000b2c <__aeabi_dcmpun>
 800ab2c:	b140      	cbz	r0, 800ab40 <_printf_float+0xe0>
 800ab2e:	464b      	mov	r3, r9
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	bfbc      	itt	lt
 800ab34:	232d      	movlt	r3, #45	@ 0x2d
 800ab36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ab3a:	4a7e      	ldr	r2, [pc, #504]	@ (800ad34 <_printf_float+0x2d4>)
 800ab3c:	4b7e      	ldr	r3, [pc, #504]	@ (800ad38 <_printf_float+0x2d8>)
 800ab3e:	e7d4      	b.n	800aaea <_printf_float+0x8a>
 800ab40:	6863      	ldr	r3, [r4, #4]
 800ab42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ab46:	9206      	str	r2, [sp, #24]
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	d13b      	bne.n	800abc4 <_printf_float+0x164>
 800ab4c:	2306      	movs	r3, #6
 800ab4e:	6063      	str	r3, [r4, #4]
 800ab50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ab54:	2300      	movs	r3, #0
 800ab56:	6022      	str	r2, [r4, #0]
 800ab58:	9303      	str	r3, [sp, #12]
 800ab5a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ab60:	ab09      	add	r3, sp, #36	@ 0x24
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	6861      	ldr	r1, [r4, #4]
 800ab66:	ec49 8b10 	vmov	d0, r8, r9
 800ab6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f7ff fed6 	bl	800a920 <__cvt>
 800ab74:	9b06      	ldr	r3, [sp, #24]
 800ab76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab78:	2b47      	cmp	r3, #71	@ 0x47
 800ab7a:	4680      	mov	r8, r0
 800ab7c:	d129      	bne.n	800abd2 <_printf_float+0x172>
 800ab7e:	1cc8      	adds	r0, r1, #3
 800ab80:	db02      	blt.n	800ab88 <_printf_float+0x128>
 800ab82:	6863      	ldr	r3, [r4, #4]
 800ab84:	4299      	cmp	r1, r3
 800ab86:	dd41      	ble.n	800ac0c <_printf_float+0x1ac>
 800ab88:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab8c:	fa5f fa8a 	uxtb.w	sl, sl
 800ab90:	3901      	subs	r1, #1
 800ab92:	4652      	mov	r2, sl
 800ab94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ab98:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab9a:	f7ff ff26 	bl	800a9ea <__exponent>
 800ab9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aba0:	1813      	adds	r3, r2, r0
 800aba2:	2a01      	cmp	r2, #1
 800aba4:	4681      	mov	r9, r0
 800aba6:	6123      	str	r3, [r4, #16]
 800aba8:	dc02      	bgt.n	800abb0 <_printf_float+0x150>
 800abaa:	6822      	ldr	r2, [r4, #0]
 800abac:	07d2      	lsls	r2, r2, #31
 800abae:	d501      	bpl.n	800abb4 <_printf_float+0x154>
 800abb0:	3301      	adds	r3, #1
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d0a2      	beq.n	800ab02 <_printf_float+0xa2>
 800abbc:	232d      	movs	r3, #45	@ 0x2d
 800abbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abc2:	e79e      	b.n	800ab02 <_printf_float+0xa2>
 800abc4:	9a06      	ldr	r2, [sp, #24]
 800abc6:	2a47      	cmp	r2, #71	@ 0x47
 800abc8:	d1c2      	bne.n	800ab50 <_printf_float+0xf0>
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1c0      	bne.n	800ab50 <_printf_float+0xf0>
 800abce:	2301      	movs	r3, #1
 800abd0:	e7bd      	b.n	800ab4e <_printf_float+0xee>
 800abd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800abd6:	d9db      	bls.n	800ab90 <_printf_float+0x130>
 800abd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800abdc:	d118      	bne.n	800ac10 <_printf_float+0x1b0>
 800abde:	2900      	cmp	r1, #0
 800abe0:	6863      	ldr	r3, [r4, #4]
 800abe2:	dd0b      	ble.n	800abfc <_printf_float+0x19c>
 800abe4:	6121      	str	r1, [r4, #16]
 800abe6:	b913      	cbnz	r3, 800abee <_printf_float+0x18e>
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	07d0      	lsls	r0, r2, #31
 800abec:	d502      	bpl.n	800abf4 <_printf_float+0x194>
 800abee:	3301      	adds	r3, #1
 800abf0:	440b      	add	r3, r1
 800abf2:	6123      	str	r3, [r4, #16]
 800abf4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800abf6:	f04f 0900 	mov.w	r9, #0
 800abfa:	e7db      	b.n	800abb4 <_printf_float+0x154>
 800abfc:	b913      	cbnz	r3, 800ac04 <_printf_float+0x1a4>
 800abfe:	6822      	ldr	r2, [r4, #0]
 800ac00:	07d2      	lsls	r2, r2, #31
 800ac02:	d501      	bpl.n	800ac08 <_printf_float+0x1a8>
 800ac04:	3302      	adds	r3, #2
 800ac06:	e7f4      	b.n	800abf2 <_printf_float+0x192>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e7f2      	b.n	800abf2 <_printf_float+0x192>
 800ac0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ac10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac12:	4299      	cmp	r1, r3
 800ac14:	db05      	blt.n	800ac22 <_printf_float+0x1c2>
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	6121      	str	r1, [r4, #16]
 800ac1a:	07d8      	lsls	r0, r3, #31
 800ac1c:	d5ea      	bpl.n	800abf4 <_printf_float+0x194>
 800ac1e:	1c4b      	adds	r3, r1, #1
 800ac20:	e7e7      	b.n	800abf2 <_printf_float+0x192>
 800ac22:	2900      	cmp	r1, #0
 800ac24:	bfd4      	ite	le
 800ac26:	f1c1 0202 	rsble	r2, r1, #2
 800ac2a:	2201      	movgt	r2, #1
 800ac2c:	4413      	add	r3, r2
 800ac2e:	e7e0      	b.n	800abf2 <_printf_float+0x192>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	055a      	lsls	r2, r3, #21
 800ac34:	d407      	bmi.n	800ac46 <_printf_float+0x1e6>
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	4642      	mov	r2, r8
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	47b8      	blx	r7
 800ac40:	3001      	adds	r0, #1
 800ac42:	d12b      	bne.n	800ac9c <_printf_float+0x23c>
 800ac44:	e767      	b.n	800ab16 <_printf_float+0xb6>
 800ac46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac4a:	f240 80dd 	bls.w	800ae08 <_printf_float+0x3a8>
 800ac4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac52:	2200      	movs	r2, #0
 800ac54:	2300      	movs	r3, #0
 800ac56:	f7f5 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d033      	beq.n	800acc6 <_printf_float+0x266>
 800ac5e:	4a37      	ldr	r2, [pc, #220]	@ (800ad3c <_printf_float+0x2dc>)
 800ac60:	2301      	movs	r3, #1
 800ac62:	4631      	mov	r1, r6
 800ac64:	4628      	mov	r0, r5
 800ac66:	47b8      	blx	r7
 800ac68:	3001      	adds	r0, #1
 800ac6a:	f43f af54 	beq.w	800ab16 <_printf_float+0xb6>
 800ac6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ac72:	4543      	cmp	r3, r8
 800ac74:	db02      	blt.n	800ac7c <_printf_float+0x21c>
 800ac76:	6823      	ldr	r3, [r4, #0]
 800ac78:	07d8      	lsls	r0, r3, #31
 800ac7a:	d50f      	bpl.n	800ac9c <_printf_float+0x23c>
 800ac7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac80:	4631      	mov	r1, r6
 800ac82:	4628      	mov	r0, r5
 800ac84:	47b8      	blx	r7
 800ac86:	3001      	adds	r0, #1
 800ac88:	f43f af45 	beq.w	800ab16 <_printf_float+0xb6>
 800ac8c:	f04f 0900 	mov.w	r9, #0
 800ac90:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac94:	f104 0a1a 	add.w	sl, r4, #26
 800ac98:	45c8      	cmp	r8, r9
 800ac9a:	dc09      	bgt.n	800acb0 <_printf_float+0x250>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	079b      	lsls	r3, r3, #30
 800aca0:	f100 8103 	bmi.w	800aeaa <_printf_float+0x44a>
 800aca4:	68e0      	ldr	r0, [r4, #12]
 800aca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aca8:	4298      	cmp	r0, r3
 800acaa:	bfb8      	it	lt
 800acac:	4618      	movlt	r0, r3
 800acae:	e734      	b.n	800ab1a <_printf_float+0xba>
 800acb0:	2301      	movs	r3, #1
 800acb2:	4652      	mov	r2, sl
 800acb4:	4631      	mov	r1, r6
 800acb6:	4628      	mov	r0, r5
 800acb8:	47b8      	blx	r7
 800acba:	3001      	adds	r0, #1
 800acbc:	f43f af2b 	beq.w	800ab16 <_printf_float+0xb6>
 800acc0:	f109 0901 	add.w	r9, r9, #1
 800acc4:	e7e8      	b.n	800ac98 <_printf_float+0x238>
 800acc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc8:	2b00      	cmp	r3, #0
 800acca:	dc39      	bgt.n	800ad40 <_printf_float+0x2e0>
 800accc:	4a1b      	ldr	r2, [pc, #108]	@ (800ad3c <_printf_float+0x2dc>)
 800acce:	2301      	movs	r3, #1
 800acd0:	4631      	mov	r1, r6
 800acd2:	4628      	mov	r0, r5
 800acd4:	47b8      	blx	r7
 800acd6:	3001      	adds	r0, #1
 800acd8:	f43f af1d 	beq.w	800ab16 <_printf_float+0xb6>
 800acdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ace0:	ea59 0303 	orrs.w	r3, r9, r3
 800ace4:	d102      	bne.n	800acec <_printf_float+0x28c>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	07d9      	lsls	r1, r3, #31
 800acea:	d5d7      	bpl.n	800ac9c <_printf_float+0x23c>
 800acec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acf0:	4631      	mov	r1, r6
 800acf2:	4628      	mov	r0, r5
 800acf4:	47b8      	blx	r7
 800acf6:	3001      	adds	r0, #1
 800acf8:	f43f af0d 	beq.w	800ab16 <_printf_float+0xb6>
 800acfc:	f04f 0a00 	mov.w	sl, #0
 800ad00:	f104 0b1a 	add.w	fp, r4, #26
 800ad04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad06:	425b      	negs	r3, r3
 800ad08:	4553      	cmp	r3, sl
 800ad0a:	dc01      	bgt.n	800ad10 <_printf_float+0x2b0>
 800ad0c:	464b      	mov	r3, r9
 800ad0e:	e793      	b.n	800ac38 <_printf_float+0x1d8>
 800ad10:	2301      	movs	r3, #1
 800ad12:	465a      	mov	r2, fp
 800ad14:	4631      	mov	r1, r6
 800ad16:	4628      	mov	r0, r5
 800ad18:	47b8      	blx	r7
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	f43f aefb 	beq.w	800ab16 <_printf_float+0xb6>
 800ad20:	f10a 0a01 	add.w	sl, sl, #1
 800ad24:	e7ee      	b.n	800ad04 <_printf_float+0x2a4>
 800ad26:	bf00      	nop
 800ad28:	7fefffff 	.word	0x7fefffff
 800ad2c:	0800dea4 	.word	0x0800dea4
 800ad30:	0800dea0 	.word	0x0800dea0
 800ad34:	0800deac 	.word	0x0800deac
 800ad38:	0800dea8 	.word	0x0800dea8
 800ad3c:	0800deb0 	.word	0x0800deb0
 800ad40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad46:	4553      	cmp	r3, sl
 800ad48:	bfa8      	it	ge
 800ad4a:	4653      	movge	r3, sl
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	4699      	mov	r9, r3
 800ad50:	dc36      	bgt.n	800adc0 <_printf_float+0x360>
 800ad52:	f04f 0b00 	mov.w	fp, #0
 800ad56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad5a:	f104 021a 	add.w	r2, r4, #26
 800ad5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad60:	9306      	str	r3, [sp, #24]
 800ad62:	eba3 0309 	sub.w	r3, r3, r9
 800ad66:	455b      	cmp	r3, fp
 800ad68:	dc31      	bgt.n	800adce <_printf_float+0x36e>
 800ad6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad6c:	459a      	cmp	sl, r3
 800ad6e:	dc3a      	bgt.n	800ade6 <_printf_float+0x386>
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	07da      	lsls	r2, r3, #31
 800ad74:	d437      	bmi.n	800ade6 <_printf_float+0x386>
 800ad76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad78:	ebaa 0903 	sub.w	r9, sl, r3
 800ad7c:	9b06      	ldr	r3, [sp, #24]
 800ad7e:	ebaa 0303 	sub.w	r3, sl, r3
 800ad82:	4599      	cmp	r9, r3
 800ad84:	bfa8      	it	ge
 800ad86:	4699      	movge	r9, r3
 800ad88:	f1b9 0f00 	cmp.w	r9, #0
 800ad8c:	dc33      	bgt.n	800adf6 <_printf_float+0x396>
 800ad8e:	f04f 0800 	mov.w	r8, #0
 800ad92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad96:	f104 0b1a 	add.w	fp, r4, #26
 800ad9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad9c:	ebaa 0303 	sub.w	r3, sl, r3
 800ada0:	eba3 0309 	sub.w	r3, r3, r9
 800ada4:	4543      	cmp	r3, r8
 800ada6:	f77f af79 	ble.w	800ac9c <_printf_float+0x23c>
 800adaa:	2301      	movs	r3, #1
 800adac:	465a      	mov	r2, fp
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	f43f aeae 	beq.w	800ab16 <_printf_float+0xb6>
 800adba:	f108 0801 	add.w	r8, r8, #1
 800adbe:	e7ec      	b.n	800ad9a <_printf_float+0x33a>
 800adc0:	4642      	mov	r2, r8
 800adc2:	4631      	mov	r1, r6
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b8      	blx	r7
 800adc8:	3001      	adds	r0, #1
 800adca:	d1c2      	bne.n	800ad52 <_printf_float+0x2f2>
 800adcc:	e6a3      	b.n	800ab16 <_printf_float+0xb6>
 800adce:	2301      	movs	r3, #1
 800add0:	4631      	mov	r1, r6
 800add2:	4628      	mov	r0, r5
 800add4:	9206      	str	r2, [sp, #24]
 800add6:	47b8      	blx	r7
 800add8:	3001      	adds	r0, #1
 800adda:	f43f ae9c 	beq.w	800ab16 <_printf_float+0xb6>
 800adde:	9a06      	ldr	r2, [sp, #24]
 800ade0:	f10b 0b01 	add.w	fp, fp, #1
 800ade4:	e7bb      	b.n	800ad5e <_printf_float+0x2fe>
 800ade6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adea:	4631      	mov	r1, r6
 800adec:	4628      	mov	r0, r5
 800adee:	47b8      	blx	r7
 800adf0:	3001      	adds	r0, #1
 800adf2:	d1c0      	bne.n	800ad76 <_printf_float+0x316>
 800adf4:	e68f      	b.n	800ab16 <_printf_float+0xb6>
 800adf6:	9a06      	ldr	r2, [sp, #24]
 800adf8:	464b      	mov	r3, r9
 800adfa:	4442      	add	r2, r8
 800adfc:	4631      	mov	r1, r6
 800adfe:	4628      	mov	r0, r5
 800ae00:	47b8      	blx	r7
 800ae02:	3001      	adds	r0, #1
 800ae04:	d1c3      	bne.n	800ad8e <_printf_float+0x32e>
 800ae06:	e686      	b.n	800ab16 <_printf_float+0xb6>
 800ae08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae0c:	f1ba 0f01 	cmp.w	sl, #1
 800ae10:	dc01      	bgt.n	800ae16 <_printf_float+0x3b6>
 800ae12:	07db      	lsls	r3, r3, #31
 800ae14:	d536      	bpl.n	800ae84 <_printf_float+0x424>
 800ae16:	2301      	movs	r3, #1
 800ae18:	4642      	mov	r2, r8
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b8      	blx	r7
 800ae20:	3001      	adds	r0, #1
 800ae22:	f43f ae78 	beq.w	800ab16 <_printf_float+0xb6>
 800ae26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	47b8      	blx	r7
 800ae30:	3001      	adds	r0, #1
 800ae32:	f43f ae70 	beq.w	800ab16 <_printf_float+0xb6>
 800ae36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae42:	f7f5 fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae46:	b9c0      	cbnz	r0, 800ae7a <_printf_float+0x41a>
 800ae48:	4653      	mov	r3, sl
 800ae4a:	f108 0201 	add.w	r2, r8, #1
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4628      	mov	r0, r5
 800ae52:	47b8      	blx	r7
 800ae54:	3001      	adds	r0, #1
 800ae56:	d10c      	bne.n	800ae72 <_printf_float+0x412>
 800ae58:	e65d      	b.n	800ab16 <_printf_float+0xb6>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	465a      	mov	r2, fp
 800ae5e:	4631      	mov	r1, r6
 800ae60:	4628      	mov	r0, r5
 800ae62:	47b8      	blx	r7
 800ae64:	3001      	adds	r0, #1
 800ae66:	f43f ae56 	beq.w	800ab16 <_printf_float+0xb6>
 800ae6a:	f108 0801 	add.w	r8, r8, #1
 800ae6e:	45d0      	cmp	r8, sl
 800ae70:	dbf3      	blt.n	800ae5a <_printf_float+0x3fa>
 800ae72:	464b      	mov	r3, r9
 800ae74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae78:	e6df      	b.n	800ac3a <_printf_float+0x1da>
 800ae7a:	f04f 0800 	mov.w	r8, #0
 800ae7e:	f104 0b1a 	add.w	fp, r4, #26
 800ae82:	e7f4      	b.n	800ae6e <_printf_float+0x40e>
 800ae84:	2301      	movs	r3, #1
 800ae86:	4642      	mov	r2, r8
 800ae88:	e7e1      	b.n	800ae4e <_printf_float+0x3ee>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	464a      	mov	r2, r9
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4628      	mov	r0, r5
 800ae92:	47b8      	blx	r7
 800ae94:	3001      	adds	r0, #1
 800ae96:	f43f ae3e 	beq.w	800ab16 <_printf_float+0xb6>
 800ae9a:	f108 0801 	add.w	r8, r8, #1
 800ae9e:	68e3      	ldr	r3, [r4, #12]
 800aea0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aea2:	1a5b      	subs	r3, r3, r1
 800aea4:	4543      	cmp	r3, r8
 800aea6:	dcf0      	bgt.n	800ae8a <_printf_float+0x42a>
 800aea8:	e6fc      	b.n	800aca4 <_printf_float+0x244>
 800aeaa:	f04f 0800 	mov.w	r8, #0
 800aeae:	f104 0919 	add.w	r9, r4, #25
 800aeb2:	e7f4      	b.n	800ae9e <_printf_float+0x43e>

0800aeb4 <_printf_common>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	4616      	mov	r6, r2
 800aeba:	4698      	mov	r8, r3
 800aebc:	688a      	ldr	r2, [r1, #8]
 800aebe:	690b      	ldr	r3, [r1, #16]
 800aec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aec4:	4293      	cmp	r3, r2
 800aec6:	bfb8      	it	lt
 800aec8:	4613      	movlt	r3, r2
 800aeca:	6033      	str	r3, [r6, #0]
 800aecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aed0:	4607      	mov	r7, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	b10a      	cbz	r2, 800aeda <_printf_common+0x26>
 800aed6:	3301      	adds	r3, #1
 800aed8:	6033      	str	r3, [r6, #0]
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	0699      	lsls	r1, r3, #26
 800aede:	bf42      	ittt	mi
 800aee0:	6833      	ldrmi	r3, [r6, #0]
 800aee2:	3302      	addmi	r3, #2
 800aee4:	6033      	strmi	r3, [r6, #0]
 800aee6:	6825      	ldr	r5, [r4, #0]
 800aee8:	f015 0506 	ands.w	r5, r5, #6
 800aeec:	d106      	bne.n	800aefc <_printf_common+0x48>
 800aeee:	f104 0a19 	add.w	sl, r4, #25
 800aef2:	68e3      	ldr	r3, [r4, #12]
 800aef4:	6832      	ldr	r2, [r6, #0]
 800aef6:	1a9b      	subs	r3, r3, r2
 800aef8:	42ab      	cmp	r3, r5
 800aefa:	dc26      	bgt.n	800af4a <_printf_common+0x96>
 800aefc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af00:	6822      	ldr	r2, [r4, #0]
 800af02:	3b00      	subs	r3, #0
 800af04:	bf18      	it	ne
 800af06:	2301      	movne	r3, #1
 800af08:	0692      	lsls	r2, r2, #26
 800af0a:	d42b      	bmi.n	800af64 <_printf_common+0xb0>
 800af0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af10:	4641      	mov	r1, r8
 800af12:	4638      	mov	r0, r7
 800af14:	47c8      	blx	r9
 800af16:	3001      	adds	r0, #1
 800af18:	d01e      	beq.n	800af58 <_printf_common+0xa4>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	6922      	ldr	r2, [r4, #16]
 800af1e:	f003 0306 	and.w	r3, r3, #6
 800af22:	2b04      	cmp	r3, #4
 800af24:	bf02      	ittt	eq
 800af26:	68e5      	ldreq	r5, [r4, #12]
 800af28:	6833      	ldreq	r3, [r6, #0]
 800af2a:	1aed      	subeq	r5, r5, r3
 800af2c:	68a3      	ldr	r3, [r4, #8]
 800af2e:	bf0c      	ite	eq
 800af30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af34:	2500      	movne	r5, #0
 800af36:	4293      	cmp	r3, r2
 800af38:	bfc4      	itt	gt
 800af3a:	1a9b      	subgt	r3, r3, r2
 800af3c:	18ed      	addgt	r5, r5, r3
 800af3e:	2600      	movs	r6, #0
 800af40:	341a      	adds	r4, #26
 800af42:	42b5      	cmp	r5, r6
 800af44:	d11a      	bne.n	800af7c <_printf_common+0xc8>
 800af46:	2000      	movs	r0, #0
 800af48:	e008      	b.n	800af5c <_printf_common+0xa8>
 800af4a:	2301      	movs	r3, #1
 800af4c:	4652      	mov	r2, sl
 800af4e:	4641      	mov	r1, r8
 800af50:	4638      	mov	r0, r7
 800af52:	47c8      	blx	r9
 800af54:	3001      	adds	r0, #1
 800af56:	d103      	bne.n	800af60 <_printf_common+0xac>
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	3501      	adds	r5, #1
 800af62:	e7c6      	b.n	800aef2 <_printf_common+0x3e>
 800af64:	18e1      	adds	r1, r4, r3
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	2030      	movs	r0, #48	@ 0x30
 800af6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af6e:	4422      	add	r2, r4
 800af70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af78:	3302      	adds	r3, #2
 800af7a:	e7c7      	b.n	800af0c <_printf_common+0x58>
 800af7c:	2301      	movs	r3, #1
 800af7e:	4622      	mov	r2, r4
 800af80:	4641      	mov	r1, r8
 800af82:	4638      	mov	r0, r7
 800af84:	47c8      	blx	r9
 800af86:	3001      	adds	r0, #1
 800af88:	d0e6      	beq.n	800af58 <_printf_common+0xa4>
 800af8a:	3601      	adds	r6, #1
 800af8c:	e7d9      	b.n	800af42 <_printf_common+0x8e>
	...

0800af90 <_printf_i>:
 800af90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af94:	7e0f      	ldrb	r7, [r1, #24]
 800af96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af98:	2f78      	cmp	r7, #120	@ 0x78
 800af9a:	4691      	mov	r9, r2
 800af9c:	4680      	mov	r8, r0
 800af9e:	460c      	mov	r4, r1
 800afa0:	469a      	mov	sl, r3
 800afa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800afa6:	d807      	bhi.n	800afb8 <_printf_i+0x28>
 800afa8:	2f62      	cmp	r7, #98	@ 0x62
 800afaa:	d80a      	bhi.n	800afc2 <_printf_i+0x32>
 800afac:	2f00      	cmp	r7, #0
 800afae:	f000 80d1 	beq.w	800b154 <_printf_i+0x1c4>
 800afb2:	2f58      	cmp	r7, #88	@ 0x58
 800afb4:	f000 80b8 	beq.w	800b128 <_printf_i+0x198>
 800afb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800afc0:	e03a      	b.n	800b038 <_printf_i+0xa8>
 800afc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800afc6:	2b15      	cmp	r3, #21
 800afc8:	d8f6      	bhi.n	800afb8 <_printf_i+0x28>
 800afca:	a101      	add	r1, pc, #4	@ (adr r1, 800afd0 <_printf_i+0x40>)
 800afcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afd0:	0800b029 	.word	0x0800b029
 800afd4:	0800b03d 	.word	0x0800b03d
 800afd8:	0800afb9 	.word	0x0800afb9
 800afdc:	0800afb9 	.word	0x0800afb9
 800afe0:	0800afb9 	.word	0x0800afb9
 800afe4:	0800afb9 	.word	0x0800afb9
 800afe8:	0800b03d 	.word	0x0800b03d
 800afec:	0800afb9 	.word	0x0800afb9
 800aff0:	0800afb9 	.word	0x0800afb9
 800aff4:	0800afb9 	.word	0x0800afb9
 800aff8:	0800afb9 	.word	0x0800afb9
 800affc:	0800b13b 	.word	0x0800b13b
 800b000:	0800b067 	.word	0x0800b067
 800b004:	0800b0f5 	.word	0x0800b0f5
 800b008:	0800afb9 	.word	0x0800afb9
 800b00c:	0800afb9 	.word	0x0800afb9
 800b010:	0800b15d 	.word	0x0800b15d
 800b014:	0800afb9 	.word	0x0800afb9
 800b018:	0800b067 	.word	0x0800b067
 800b01c:	0800afb9 	.word	0x0800afb9
 800b020:	0800afb9 	.word	0x0800afb9
 800b024:	0800b0fd 	.word	0x0800b0fd
 800b028:	6833      	ldr	r3, [r6, #0]
 800b02a:	1d1a      	adds	r2, r3, #4
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6032      	str	r2, [r6, #0]
 800b030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b038:	2301      	movs	r3, #1
 800b03a:	e09c      	b.n	800b176 <_printf_i+0x1e6>
 800b03c:	6833      	ldr	r3, [r6, #0]
 800b03e:	6820      	ldr	r0, [r4, #0]
 800b040:	1d19      	adds	r1, r3, #4
 800b042:	6031      	str	r1, [r6, #0]
 800b044:	0606      	lsls	r6, r0, #24
 800b046:	d501      	bpl.n	800b04c <_printf_i+0xbc>
 800b048:	681d      	ldr	r5, [r3, #0]
 800b04a:	e003      	b.n	800b054 <_printf_i+0xc4>
 800b04c:	0645      	lsls	r5, r0, #25
 800b04e:	d5fb      	bpl.n	800b048 <_printf_i+0xb8>
 800b050:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b054:	2d00      	cmp	r5, #0
 800b056:	da03      	bge.n	800b060 <_printf_i+0xd0>
 800b058:	232d      	movs	r3, #45	@ 0x2d
 800b05a:	426d      	negs	r5, r5
 800b05c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b060:	4858      	ldr	r0, [pc, #352]	@ (800b1c4 <_printf_i+0x234>)
 800b062:	230a      	movs	r3, #10
 800b064:	e011      	b.n	800b08a <_printf_i+0xfa>
 800b066:	6821      	ldr	r1, [r4, #0]
 800b068:	6833      	ldr	r3, [r6, #0]
 800b06a:	0608      	lsls	r0, r1, #24
 800b06c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b070:	d402      	bmi.n	800b078 <_printf_i+0xe8>
 800b072:	0649      	lsls	r1, r1, #25
 800b074:	bf48      	it	mi
 800b076:	b2ad      	uxthmi	r5, r5
 800b078:	2f6f      	cmp	r7, #111	@ 0x6f
 800b07a:	4852      	ldr	r0, [pc, #328]	@ (800b1c4 <_printf_i+0x234>)
 800b07c:	6033      	str	r3, [r6, #0]
 800b07e:	bf14      	ite	ne
 800b080:	230a      	movne	r3, #10
 800b082:	2308      	moveq	r3, #8
 800b084:	2100      	movs	r1, #0
 800b086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b08a:	6866      	ldr	r6, [r4, #4]
 800b08c:	60a6      	str	r6, [r4, #8]
 800b08e:	2e00      	cmp	r6, #0
 800b090:	db05      	blt.n	800b09e <_printf_i+0x10e>
 800b092:	6821      	ldr	r1, [r4, #0]
 800b094:	432e      	orrs	r6, r5
 800b096:	f021 0104 	bic.w	r1, r1, #4
 800b09a:	6021      	str	r1, [r4, #0]
 800b09c:	d04b      	beq.n	800b136 <_printf_i+0x1a6>
 800b09e:	4616      	mov	r6, r2
 800b0a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0a4:	fb03 5711 	mls	r7, r3, r1, r5
 800b0a8:	5dc7      	ldrb	r7, [r0, r7]
 800b0aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0ae:	462f      	mov	r7, r5
 800b0b0:	42bb      	cmp	r3, r7
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	d9f4      	bls.n	800b0a0 <_printf_i+0x110>
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d10b      	bne.n	800b0d2 <_printf_i+0x142>
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	07df      	lsls	r7, r3, #31
 800b0be:	d508      	bpl.n	800b0d2 <_printf_i+0x142>
 800b0c0:	6923      	ldr	r3, [r4, #16]
 800b0c2:	6861      	ldr	r1, [r4, #4]
 800b0c4:	4299      	cmp	r1, r3
 800b0c6:	bfde      	ittt	le
 800b0c8:	2330      	movle	r3, #48	@ 0x30
 800b0ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0d2:	1b92      	subs	r2, r2, r6
 800b0d4:	6122      	str	r2, [r4, #16]
 800b0d6:	f8cd a000 	str.w	sl, [sp]
 800b0da:	464b      	mov	r3, r9
 800b0dc:	aa03      	add	r2, sp, #12
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	f7ff fee7 	bl	800aeb4 <_printf_common>
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	d14a      	bne.n	800b180 <_printf_i+0x1f0>
 800b0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ee:	b004      	add	sp, #16
 800b0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	f043 0320 	orr.w	r3, r3, #32
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	4832      	ldr	r0, [pc, #200]	@ (800b1c8 <_printf_i+0x238>)
 800b0fe:	2778      	movs	r7, #120	@ 0x78
 800b100:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	6831      	ldr	r1, [r6, #0]
 800b108:	061f      	lsls	r7, r3, #24
 800b10a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b10e:	d402      	bmi.n	800b116 <_printf_i+0x186>
 800b110:	065f      	lsls	r7, r3, #25
 800b112:	bf48      	it	mi
 800b114:	b2ad      	uxthmi	r5, r5
 800b116:	6031      	str	r1, [r6, #0]
 800b118:	07d9      	lsls	r1, r3, #31
 800b11a:	bf44      	itt	mi
 800b11c:	f043 0320 	orrmi.w	r3, r3, #32
 800b120:	6023      	strmi	r3, [r4, #0]
 800b122:	b11d      	cbz	r5, 800b12c <_printf_i+0x19c>
 800b124:	2310      	movs	r3, #16
 800b126:	e7ad      	b.n	800b084 <_printf_i+0xf4>
 800b128:	4826      	ldr	r0, [pc, #152]	@ (800b1c4 <_printf_i+0x234>)
 800b12a:	e7e9      	b.n	800b100 <_printf_i+0x170>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	f023 0320 	bic.w	r3, r3, #32
 800b132:	6023      	str	r3, [r4, #0]
 800b134:	e7f6      	b.n	800b124 <_printf_i+0x194>
 800b136:	4616      	mov	r6, r2
 800b138:	e7bd      	b.n	800b0b6 <_printf_i+0x126>
 800b13a:	6833      	ldr	r3, [r6, #0]
 800b13c:	6825      	ldr	r5, [r4, #0]
 800b13e:	6961      	ldr	r1, [r4, #20]
 800b140:	1d18      	adds	r0, r3, #4
 800b142:	6030      	str	r0, [r6, #0]
 800b144:	062e      	lsls	r6, r5, #24
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	d501      	bpl.n	800b14e <_printf_i+0x1be>
 800b14a:	6019      	str	r1, [r3, #0]
 800b14c:	e002      	b.n	800b154 <_printf_i+0x1c4>
 800b14e:	0668      	lsls	r0, r5, #25
 800b150:	d5fb      	bpl.n	800b14a <_printf_i+0x1ba>
 800b152:	8019      	strh	r1, [r3, #0]
 800b154:	2300      	movs	r3, #0
 800b156:	6123      	str	r3, [r4, #16]
 800b158:	4616      	mov	r6, r2
 800b15a:	e7bc      	b.n	800b0d6 <_printf_i+0x146>
 800b15c:	6833      	ldr	r3, [r6, #0]
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	6032      	str	r2, [r6, #0]
 800b162:	681e      	ldr	r6, [r3, #0]
 800b164:	6862      	ldr	r2, [r4, #4]
 800b166:	2100      	movs	r1, #0
 800b168:	4630      	mov	r0, r6
 800b16a:	f7f5 f831 	bl	80001d0 <memchr>
 800b16e:	b108      	cbz	r0, 800b174 <_printf_i+0x1e4>
 800b170:	1b80      	subs	r0, r0, r6
 800b172:	6060      	str	r0, [r4, #4]
 800b174:	6863      	ldr	r3, [r4, #4]
 800b176:	6123      	str	r3, [r4, #16]
 800b178:	2300      	movs	r3, #0
 800b17a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b17e:	e7aa      	b.n	800b0d6 <_printf_i+0x146>
 800b180:	6923      	ldr	r3, [r4, #16]
 800b182:	4632      	mov	r2, r6
 800b184:	4649      	mov	r1, r9
 800b186:	4640      	mov	r0, r8
 800b188:	47d0      	blx	sl
 800b18a:	3001      	adds	r0, #1
 800b18c:	d0ad      	beq.n	800b0ea <_printf_i+0x15a>
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	079b      	lsls	r3, r3, #30
 800b192:	d413      	bmi.n	800b1bc <_printf_i+0x22c>
 800b194:	68e0      	ldr	r0, [r4, #12]
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	4298      	cmp	r0, r3
 800b19a:	bfb8      	it	lt
 800b19c:	4618      	movlt	r0, r3
 800b19e:	e7a6      	b.n	800b0ee <_printf_i+0x15e>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	4632      	mov	r2, r6
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	4640      	mov	r0, r8
 800b1a8:	47d0      	blx	sl
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	d09d      	beq.n	800b0ea <_printf_i+0x15a>
 800b1ae:	3501      	adds	r5, #1
 800b1b0:	68e3      	ldr	r3, [r4, #12]
 800b1b2:	9903      	ldr	r1, [sp, #12]
 800b1b4:	1a5b      	subs	r3, r3, r1
 800b1b6:	42ab      	cmp	r3, r5
 800b1b8:	dcf2      	bgt.n	800b1a0 <_printf_i+0x210>
 800b1ba:	e7eb      	b.n	800b194 <_printf_i+0x204>
 800b1bc:	2500      	movs	r5, #0
 800b1be:	f104 0619 	add.w	r6, r4, #25
 800b1c2:	e7f5      	b.n	800b1b0 <_printf_i+0x220>
 800b1c4:	0800deb2 	.word	0x0800deb2
 800b1c8:	0800dec3 	.word	0x0800dec3

0800b1cc <std>:
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	b510      	push	{r4, lr}
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b1d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1da:	6083      	str	r3, [r0, #8]
 800b1dc:	8181      	strh	r1, [r0, #12]
 800b1de:	6643      	str	r3, [r0, #100]	@ 0x64
 800b1e0:	81c2      	strh	r2, [r0, #14]
 800b1e2:	6183      	str	r3, [r0, #24]
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	2208      	movs	r2, #8
 800b1e8:	305c      	adds	r0, #92	@ 0x5c
 800b1ea:	f000 f92a 	bl	800b442 <memset>
 800b1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b224 <std+0x58>)
 800b1f0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b228 <std+0x5c>)
 800b1f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b22c <std+0x60>)
 800b1f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b230 <std+0x64>)
 800b1fc:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b234 <std+0x68>)
 800b200:	6224      	str	r4, [r4, #32]
 800b202:	429c      	cmp	r4, r3
 800b204:	d006      	beq.n	800b214 <std+0x48>
 800b206:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b20a:	4294      	cmp	r4, r2
 800b20c:	d002      	beq.n	800b214 <std+0x48>
 800b20e:	33d0      	adds	r3, #208	@ 0xd0
 800b210:	429c      	cmp	r4, r3
 800b212:	d105      	bne.n	800b220 <std+0x54>
 800b214:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b21c:	f000 b98e 	b.w	800b53c <__retarget_lock_init_recursive>
 800b220:	bd10      	pop	{r4, pc}
 800b222:	bf00      	nop
 800b224:	0800b3bd 	.word	0x0800b3bd
 800b228:	0800b3df 	.word	0x0800b3df
 800b22c:	0800b417 	.word	0x0800b417
 800b230:	0800b43b 	.word	0x0800b43b
 800b234:	2000091c 	.word	0x2000091c

0800b238 <stdio_exit_handler>:
 800b238:	4a02      	ldr	r2, [pc, #8]	@ (800b244 <stdio_exit_handler+0xc>)
 800b23a:	4903      	ldr	r1, [pc, #12]	@ (800b248 <stdio_exit_handler+0x10>)
 800b23c:	4803      	ldr	r0, [pc, #12]	@ (800b24c <stdio_exit_handler+0x14>)
 800b23e:	f000 b869 	b.w	800b314 <_fwalk_sglue>
 800b242:	bf00      	nop
 800b244:	20000010 	.word	0x20000010
 800b248:	0800cea5 	.word	0x0800cea5
 800b24c:	20000020 	.word	0x20000020

0800b250 <cleanup_stdio>:
 800b250:	6841      	ldr	r1, [r0, #4]
 800b252:	4b0c      	ldr	r3, [pc, #48]	@ (800b284 <cleanup_stdio+0x34>)
 800b254:	4299      	cmp	r1, r3
 800b256:	b510      	push	{r4, lr}
 800b258:	4604      	mov	r4, r0
 800b25a:	d001      	beq.n	800b260 <cleanup_stdio+0x10>
 800b25c:	f001 fe22 	bl	800cea4 <_fflush_r>
 800b260:	68a1      	ldr	r1, [r4, #8]
 800b262:	4b09      	ldr	r3, [pc, #36]	@ (800b288 <cleanup_stdio+0x38>)
 800b264:	4299      	cmp	r1, r3
 800b266:	d002      	beq.n	800b26e <cleanup_stdio+0x1e>
 800b268:	4620      	mov	r0, r4
 800b26a:	f001 fe1b 	bl	800cea4 <_fflush_r>
 800b26e:	68e1      	ldr	r1, [r4, #12]
 800b270:	4b06      	ldr	r3, [pc, #24]	@ (800b28c <cleanup_stdio+0x3c>)
 800b272:	4299      	cmp	r1, r3
 800b274:	d004      	beq.n	800b280 <cleanup_stdio+0x30>
 800b276:	4620      	mov	r0, r4
 800b278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b27c:	f001 be12 	b.w	800cea4 <_fflush_r>
 800b280:	bd10      	pop	{r4, pc}
 800b282:	bf00      	nop
 800b284:	2000091c 	.word	0x2000091c
 800b288:	20000984 	.word	0x20000984
 800b28c:	200009ec 	.word	0x200009ec

0800b290 <global_stdio_init.part.0>:
 800b290:	b510      	push	{r4, lr}
 800b292:	4b0b      	ldr	r3, [pc, #44]	@ (800b2c0 <global_stdio_init.part.0+0x30>)
 800b294:	4c0b      	ldr	r4, [pc, #44]	@ (800b2c4 <global_stdio_init.part.0+0x34>)
 800b296:	4a0c      	ldr	r2, [pc, #48]	@ (800b2c8 <global_stdio_init.part.0+0x38>)
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	4620      	mov	r0, r4
 800b29c:	2200      	movs	r2, #0
 800b29e:	2104      	movs	r1, #4
 800b2a0:	f7ff ff94 	bl	800b1cc <std>
 800b2a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	2109      	movs	r1, #9
 800b2ac:	f7ff ff8e 	bl	800b1cc <std>
 800b2b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b2b4:	2202      	movs	r2, #2
 800b2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ba:	2112      	movs	r1, #18
 800b2bc:	f7ff bf86 	b.w	800b1cc <std>
 800b2c0:	20000a54 	.word	0x20000a54
 800b2c4:	2000091c 	.word	0x2000091c
 800b2c8:	0800b239 	.word	0x0800b239

0800b2cc <__sfp_lock_acquire>:
 800b2cc:	4801      	ldr	r0, [pc, #4]	@ (800b2d4 <__sfp_lock_acquire+0x8>)
 800b2ce:	f000 b936 	b.w	800b53e <__retarget_lock_acquire_recursive>
 800b2d2:	bf00      	nop
 800b2d4:	20000a5d 	.word	0x20000a5d

0800b2d8 <__sfp_lock_release>:
 800b2d8:	4801      	ldr	r0, [pc, #4]	@ (800b2e0 <__sfp_lock_release+0x8>)
 800b2da:	f000 b931 	b.w	800b540 <__retarget_lock_release_recursive>
 800b2de:	bf00      	nop
 800b2e0:	20000a5d 	.word	0x20000a5d

0800b2e4 <__sinit>:
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	f7ff fff0 	bl	800b2cc <__sfp_lock_acquire>
 800b2ec:	6a23      	ldr	r3, [r4, #32]
 800b2ee:	b11b      	cbz	r3, 800b2f8 <__sinit+0x14>
 800b2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f4:	f7ff bff0 	b.w	800b2d8 <__sfp_lock_release>
 800b2f8:	4b04      	ldr	r3, [pc, #16]	@ (800b30c <__sinit+0x28>)
 800b2fa:	6223      	str	r3, [r4, #32]
 800b2fc:	4b04      	ldr	r3, [pc, #16]	@ (800b310 <__sinit+0x2c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1f5      	bne.n	800b2f0 <__sinit+0xc>
 800b304:	f7ff ffc4 	bl	800b290 <global_stdio_init.part.0>
 800b308:	e7f2      	b.n	800b2f0 <__sinit+0xc>
 800b30a:	bf00      	nop
 800b30c:	0800b251 	.word	0x0800b251
 800b310:	20000a54 	.word	0x20000a54

0800b314 <_fwalk_sglue>:
 800b314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b318:	4607      	mov	r7, r0
 800b31a:	4688      	mov	r8, r1
 800b31c:	4614      	mov	r4, r2
 800b31e:	2600      	movs	r6, #0
 800b320:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b324:	f1b9 0901 	subs.w	r9, r9, #1
 800b328:	d505      	bpl.n	800b336 <_fwalk_sglue+0x22>
 800b32a:	6824      	ldr	r4, [r4, #0]
 800b32c:	2c00      	cmp	r4, #0
 800b32e:	d1f7      	bne.n	800b320 <_fwalk_sglue+0xc>
 800b330:	4630      	mov	r0, r6
 800b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b336:	89ab      	ldrh	r3, [r5, #12]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d907      	bls.n	800b34c <_fwalk_sglue+0x38>
 800b33c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b340:	3301      	adds	r3, #1
 800b342:	d003      	beq.n	800b34c <_fwalk_sglue+0x38>
 800b344:	4629      	mov	r1, r5
 800b346:	4638      	mov	r0, r7
 800b348:	47c0      	blx	r8
 800b34a:	4306      	orrs	r6, r0
 800b34c:	3568      	adds	r5, #104	@ 0x68
 800b34e:	e7e9      	b.n	800b324 <_fwalk_sglue+0x10>

0800b350 <sniprintf>:
 800b350:	b40c      	push	{r2, r3}
 800b352:	b530      	push	{r4, r5, lr}
 800b354:	4b18      	ldr	r3, [pc, #96]	@ (800b3b8 <sniprintf+0x68>)
 800b356:	1e0c      	subs	r4, r1, #0
 800b358:	681d      	ldr	r5, [r3, #0]
 800b35a:	b09d      	sub	sp, #116	@ 0x74
 800b35c:	da08      	bge.n	800b370 <sniprintf+0x20>
 800b35e:	238b      	movs	r3, #139	@ 0x8b
 800b360:	602b      	str	r3, [r5, #0]
 800b362:	f04f 30ff 	mov.w	r0, #4294967295
 800b366:	b01d      	add	sp, #116	@ 0x74
 800b368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b36c:	b002      	add	sp, #8
 800b36e:	4770      	bx	lr
 800b370:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b374:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b378:	f04f 0300 	mov.w	r3, #0
 800b37c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b37e:	bf14      	ite	ne
 800b380:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b384:	4623      	moveq	r3, r4
 800b386:	9304      	str	r3, [sp, #16]
 800b388:	9307      	str	r3, [sp, #28]
 800b38a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b38e:	9002      	str	r0, [sp, #8]
 800b390:	9006      	str	r0, [sp, #24]
 800b392:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b396:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b398:	ab21      	add	r3, sp, #132	@ 0x84
 800b39a:	a902      	add	r1, sp, #8
 800b39c:	4628      	mov	r0, r5
 800b39e:	9301      	str	r3, [sp, #4]
 800b3a0:	f001 fc00 	bl	800cba4 <_svfiprintf_r>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	bfbc      	itt	lt
 800b3a8:	238b      	movlt	r3, #139	@ 0x8b
 800b3aa:	602b      	strlt	r3, [r5, #0]
 800b3ac:	2c00      	cmp	r4, #0
 800b3ae:	d0da      	beq.n	800b366 <sniprintf+0x16>
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
 800b3b6:	e7d6      	b.n	800b366 <sniprintf+0x16>
 800b3b8:	2000001c 	.word	0x2000001c

0800b3bc <__sread>:
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	460c      	mov	r4, r1
 800b3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c4:	f000 f86c 	bl	800b4a0 <_read_r>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	bfab      	itete	ge
 800b3cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b3d0:	181b      	addge	r3, r3, r0
 800b3d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3d6:	bfac      	ite	ge
 800b3d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3da:	81a3      	strhlt	r3, [r4, #12]
 800b3dc:	bd10      	pop	{r4, pc}

0800b3de <__swrite>:
 800b3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e2:	461f      	mov	r7, r3
 800b3e4:	898b      	ldrh	r3, [r1, #12]
 800b3e6:	05db      	lsls	r3, r3, #23
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	4616      	mov	r6, r2
 800b3ee:	d505      	bpl.n	800b3fc <__swrite+0x1e>
 800b3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f000 f840 	bl	800b47c <_lseek_r>
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b402:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b406:	81a3      	strh	r3, [r4, #12]
 800b408:	4632      	mov	r2, r6
 800b40a:	463b      	mov	r3, r7
 800b40c:	4628      	mov	r0, r5
 800b40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b412:	f000 b857 	b.w	800b4c4 <_write_r>

0800b416 <__sseek>:
 800b416:	b510      	push	{r4, lr}
 800b418:	460c      	mov	r4, r1
 800b41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41e:	f000 f82d 	bl	800b47c <_lseek_r>
 800b422:	1c43      	adds	r3, r0, #1
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	bf15      	itete	ne
 800b428:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b42a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b42e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b432:	81a3      	strheq	r3, [r4, #12]
 800b434:	bf18      	it	ne
 800b436:	81a3      	strhne	r3, [r4, #12]
 800b438:	bd10      	pop	{r4, pc}

0800b43a <__sclose>:
 800b43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b43e:	f000 b80d 	b.w	800b45c <_close_r>

0800b442 <memset>:
 800b442:	4402      	add	r2, r0
 800b444:	4603      	mov	r3, r0
 800b446:	4293      	cmp	r3, r2
 800b448:	d100      	bne.n	800b44c <memset+0xa>
 800b44a:	4770      	bx	lr
 800b44c:	f803 1b01 	strb.w	r1, [r3], #1
 800b450:	e7f9      	b.n	800b446 <memset+0x4>
	...

0800b454 <_localeconv_r>:
 800b454:	4800      	ldr	r0, [pc, #0]	@ (800b458 <_localeconv_r+0x4>)
 800b456:	4770      	bx	lr
 800b458:	2000015c 	.word	0x2000015c

0800b45c <_close_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	4d06      	ldr	r5, [pc, #24]	@ (800b478 <_close_r+0x1c>)
 800b460:	2300      	movs	r3, #0
 800b462:	4604      	mov	r4, r0
 800b464:	4608      	mov	r0, r1
 800b466:	602b      	str	r3, [r5, #0]
 800b468:	f7f7 ff34 	bl	80032d4 <_close>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d102      	bne.n	800b476 <_close_r+0x1a>
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	b103      	cbz	r3, 800b476 <_close_r+0x1a>
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	bd38      	pop	{r3, r4, r5, pc}
 800b478:	20000a58 	.word	0x20000a58

0800b47c <_lseek_r>:
 800b47c:	b538      	push	{r3, r4, r5, lr}
 800b47e:	4d07      	ldr	r5, [pc, #28]	@ (800b49c <_lseek_r+0x20>)
 800b480:	4604      	mov	r4, r0
 800b482:	4608      	mov	r0, r1
 800b484:	4611      	mov	r1, r2
 800b486:	2200      	movs	r2, #0
 800b488:	602a      	str	r2, [r5, #0]
 800b48a:	461a      	mov	r2, r3
 800b48c:	f7f7 ff49 	bl	8003322 <_lseek>
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d102      	bne.n	800b49a <_lseek_r+0x1e>
 800b494:	682b      	ldr	r3, [r5, #0]
 800b496:	b103      	cbz	r3, 800b49a <_lseek_r+0x1e>
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	bd38      	pop	{r3, r4, r5, pc}
 800b49c:	20000a58 	.word	0x20000a58

0800b4a0 <_read_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4d07      	ldr	r5, [pc, #28]	@ (800b4c0 <_read_r+0x20>)
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	4608      	mov	r0, r1
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	602a      	str	r2, [r5, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f7f7 fed7 	bl	8003262 <_read>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d102      	bne.n	800b4be <_read_r+0x1e>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	b103      	cbz	r3, 800b4be <_read_r+0x1e>
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	20000a58 	.word	0x20000a58

0800b4c4 <_write_r>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	4d07      	ldr	r5, [pc, #28]	@ (800b4e4 <_write_r+0x20>)
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	4608      	mov	r0, r1
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	602a      	str	r2, [r5, #0]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f7f7 fee2 	bl	800329c <_write>
 800b4d8:	1c43      	adds	r3, r0, #1
 800b4da:	d102      	bne.n	800b4e2 <_write_r+0x1e>
 800b4dc:	682b      	ldr	r3, [r5, #0]
 800b4de:	b103      	cbz	r3, 800b4e2 <_write_r+0x1e>
 800b4e0:	6023      	str	r3, [r4, #0]
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}
 800b4e4:	20000a58 	.word	0x20000a58

0800b4e8 <__errno>:
 800b4e8:	4b01      	ldr	r3, [pc, #4]	@ (800b4f0 <__errno+0x8>)
 800b4ea:	6818      	ldr	r0, [r3, #0]
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	2000001c 	.word	0x2000001c

0800b4f4 <__libc_init_array>:
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	4d0d      	ldr	r5, [pc, #52]	@ (800b52c <__libc_init_array+0x38>)
 800b4f8:	4c0d      	ldr	r4, [pc, #52]	@ (800b530 <__libc_init_array+0x3c>)
 800b4fa:	1b64      	subs	r4, r4, r5
 800b4fc:	10a4      	asrs	r4, r4, #2
 800b4fe:	2600      	movs	r6, #0
 800b500:	42a6      	cmp	r6, r4
 800b502:	d109      	bne.n	800b518 <__libc_init_array+0x24>
 800b504:	4d0b      	ldr	r5, [pc, #44]	@ (800b534 <__libc_init_array+0x40>)
 800b506:	4c0c      	ldr	r4, [pc, #48]	@ (800b538 <__libc_init_array+0x44>)
 800b508:	f002 fc32 	bl	800dd70 <_init>
 800b50c:	1b64      	subs	r4, r4, r5
 800b50e:	10a4      	asrs	r4, r4, #2
 800b510:	2600      	movs	r6, #0
 800b512:	42a6      	cmp	r6, r4
 800b514:	d105      	bne.n	800b522 <__libc_init_array+0x2e>
 800b516:	bd70      	pop	{r4, r5, r6, pc}
 800b518:	f855 3b04 	ldr.w	r3, [r5], #4
 800b51c:	4798      	blx	r3
 800b51e:	3601      	adds	r6, #1
 800b520:	e7ee      	b.n	800b500 <__libc_init_array+0xc>
 800b522:	f855 3b04 	ldr.w	r3, [r5], #4
 800b526:	4798      	blx	r3
 800b528:	3601      	adds	r6, #1
 800b52a:	e7f2      	b.n	800b512 <__libc_init_array+0x1e>
 800b52c:	0800e234 	.word	0x0800e234
 800b530:	0800e234 	.word	0x0800e234
 800b534:	0800e234 	.word	0x0800e234
 800b538:	0800e238 	.word	0x0800e238

0800b53c <__retarget_lock_init_recursive>:
 800b53c:	4770      	bx	lr

0800b53e <__retarget_lock_acquire_recursive>:
 800b53e:	4770      	bx	lr

0800b540 <__retarget_lock_release_recursive>:
 800b540:	4770      	bx	lr

0800b542 <quorem>:
 800b542:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b546:	6903      	ldr	r3, [r0, #16]
 800b548:	690c      	ldr	r4, [r1, #16]
 800b54a:	42a3      	cmp	r3, r4
 800b54c:	4607      	mov	r7, r0
 800b54e:	db7e      	blt.n	800b64e <quorem+0x10c>
 800b550:	3c01      	subs	r4, #1
 800b552:	f101 0814 	add.w	r8, r1, #20
 800b556:	00a3      	lsls	r3, r4, #2
 800b558:	f100 0514 	add.w	r5, r0, #20
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b562:	9301      	str	r3, [sp, #4]
 800b564:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b56c:	3301      	adds	r3, #1
 800b56e:	429a      	cmp	r2, r3
 800b570:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b574:	fbb2 f6f3 	udiv	r6, r2, r3
 800b578:	d32e      	bcc.n	800b5d8 <quorem+0x96>
 800b57a:	f04f 0a00 	mov.w	sl, #0
 800b57e:	46c4      	mov	ip, r8
 800b580:	46ae      	mov	lr, r5
 800b582:	46d3      	mov	fp, sl
 800b584:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b588:	b298      	uxth	r0, r3
 800b58a:	fb06 a000 	mla	r0, r6, r0, sl
 800b58e:	0c02      	lsrs	r2, r0, #16
 800b590:	0c1b      	lsrs	r3, r3, #16
 800b592:	fb06 2303 	mla	r3, r6, r3, r2
 800b596:	f8de 2000 	ldr.w	r2, [lr]
 800b59a:	b280      	uxth	r0, r0
 800b59c:	b292      	uxth	r2, r2
 800b59e:	1a12      	subs	r2, r2, r0
 800b5a0:	445a      	add	r2, fp
 800b5a2:	f8de 0000 	ldr.w	r0, [lr]
 800b5a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b5b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b5b4:	b292      	uxth	r2, r2
 800b5b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b5ba:	45e1      	cmp	r9, ip
 800b5bc:	f84e 2b04 	str.w	r2, [lr], #4
 800b5c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b5c4:	d2de      	bcs.n	800b584 <quorem+0x42>
 800b5c6:	9b00      	ldr	r3, [sp, #0]
 800b5c8:	58eb      	ldr	r3, [r5, r3]
 800b5ca:	b92b      	cbnz	r3, 800b5d8 <quorem+0x96>
 800b5cc:	9b01      	ldr	r3, [sp, #4]
 800b5ce:	3b04      	subs	r3, #4
 800b5d0:	429d      	cmp	r5, r3
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	d32f      	bcc.n	800b636 <quorem+0xf4>
 800b5d6:	613c      	str	r4, [r7, #16]
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f001 f97f 	bl	800c8dc <__mcmp>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	db25      	blt.n	800b62e <quorem+0xec>
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5ea:	f8d1 c000 	ldr.w	ip, [r1]
 800b5ee:	fa1f fe82 	uxth.w	lr, r2
 800b5f2:	fa1f f38c 	uxth.w	r3, ip
 800b5f6:	eba3 030e 	sub.w	r3, r3, lr
 800b5fa:	4403      	add	r3, r0
 800b5fc:	0c12      	lsrs	r2, r2, #16
 800b5fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b602:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b606:	b29b      	uxth	r3, r3
 800b608:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b60c:	45c1      	cmp	r9, r8
 800b60e:	f841 3b04 	str.w	r3, [r1], #4
 800b612:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b616:	d2e6      	bcs.n	800b5e6 <quorem+0xa4>
 800b618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b61c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b620:	b922      	cbnz	r2, 800b62c <quorem+0xea>
 800b622:	3b04      	subs	r3, #4
 800b624:	429d      	cmp	r5, r3
 800b626:	461a      	mov	r2, r3
 800b628:	d30b      	bcc.n	800b642 <quorem+0x100>
 800b62a:	613c      	str	r4, [r7, #16]
 800b62c:	3601      	adds	r6, #1
 800b62e:	4630      	mov	r0, r6
 800b630:	b003      	add	sp, #12
 800b632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b636:	6812      	ldr	r2, [r2, #0]
 800b638:	3b04      	subs	r3, #4
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	d1cb      	bne.n	800b5d6 <quorem+0x94>
 800b63e:	3c01      	subs	r4, #1
 800b640:	e7c6      	b.n	800b5d0 <quorem+0x8e>
 800b642:	6812      	ldr	r2, [r2, #0]
 800b644:	3b04      	subs	r3, #4
 800b646:	2a00      	cmp	r2, #0
 800b648:	d1ef      	bne.n	800b62a <quorem+0xe8>
 800b64a:	3c01      	subs	r4, #1
 800b64c:	e7ea      	b.n	800b624 <quorem+0xe2>
 800b64e:	2000      	movs	r0, #0
 800b650:	e7ee      	b.n	800b630 <quorem+0xee>
 800b652:	0000      	movs	r0, r0
 800b654:	0000      	movs	r0, r0
	...

0800b658 <_dtoa_r>:
 800b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	69c7      	ldr	r7, [r0, #28]
 800b65e:	b097      	sub	sp, #92	@ 0x5c
 800b660:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b664:	ec55 4b10 	vmov	r4, r5, d0
 800b668:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b66a:	9107      	str	r1, [sp, #28]
 800b66c:	4681      	mov	r9, r0
 800b66e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b670:	9311      	str	r3, [sp, #68]	@ 0x44
 800b672:	b97f      	cbnz	r7, 800b694 <_dtoa_r+0x3c>
 800b674:	2010      	movs	r0, #16
 800b676:	f000 fe09 	bl	800c28c <malloc>
 800b67a:	4602      	mov	r2, r0
 800b67c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b680:	b920      	cbnz	r0, 800b68c <_dtoa_r+0x34>
 800b682:	4ba9      	ldr	r3, [pc, #676]	@ (800b928 <_dtoa_r+0x2d0>)
 800b684:	21ef      	movs	r1, #239	@ 0xef
 800b686:	48a9      	ldr	r0, [pc, #676]	@ (800b92c <_dtoa_r+0x2d4>)
 800b688:	f001 fc6c 	bl	800cf64 <__assert_func>
 800b68c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b690:	6007      	str	r7, [r0, #0]
 800b692:	60c7      	str	r7, [r0, #12]
 800b694:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b698:	6819      	ldr	r1, [r3, #0]
 800b69a:	b159      	cbz	r1, 800b6b4 <_dtoa_r+0x5c>
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	604a      	str	r2, [r1, #4]
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	4093      	lsls	r3, r2
 800b6a4:	608b      	str	r3, [r1, #8]
 800b6a6:	4648      	mov	r0, r9
 800b6a8:	f000 fee6 	bl	800c478 <_Bfree>
 800b6ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	601a      	str	r2, [r3, #0]
 800b6b4:	1e2b      	subs	r3, r5, #0
 800b6b6:	bfb9      	ittee	lt
 800b6b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b6bc:	9305      	strlt	r3, [sp, #20]
 800b6be:	2300      	movge	r3, #0
 800b6c0:	6033      	strge	r3, [r6, #0]
 800b6c2:	9f05      	ldr	r7, [sp, #20]
 800b6c4:	4b9a      	ldr	r3, [pc, #616]	@ (800b930 <_dtoa_r+0x2d8>)
 800b6c6:	bfbc      	itt	lt
 800b6c8:	2201      	movlt	r2, #1
 800b6ca:	6032      	strlt	r2, [r6, #0]
 800b6cc:	43bb      	bics	r3, r7
 800b6ce:	d112      	bne.n	800b6f6 <_dtoa_r+0x9e>
 800b6d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b6d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b6d6:	6013      	str	r3, [r2, #0]
 800b6d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6dc:	4323      	orrs	r3, r4
 800b6de:	f000 855a 	beq.w	800c196 <_dtoa_r+0xb3e>
 800b6e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b6e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b944 <_dtoa_r+0x2ec>
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f000 855c 	beq.w	800c1a6 <_dtoa_r+0xb4e>
 800b6ee:	f10a 0303 	add.w	r3, sl, #3
 800b6f2:	f000 bd56 	b.w	800c1a2 <_dtoa_r+0xb4a>
 800b6f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	ec51 0b17 	vmov	r0, r1, d7
 800b700:	2300      	movs	r3, #0
 800b702:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b706:	f7f5 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800b70a:	4680      	mov	r8, r0
 800b70c:	b158      	cbz	r0, 800b726 <_dtoa_r+0xce>
 800b70e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b710:	2301      	movs	r3, #1
 800b712:	6013      	str	r3, [r2, #0]
 800b714:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b716:	b113      	cbz	r3, 800b71e <_dtoa_r+0xc6>
 800b718:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b71a:	4b86      	ldr	r3, [pc, #536]	@ (800b934 <_dtoa_r+0x2dc>)
 800b71c:	6013      	str	r3, [r2, #0]
 800b71e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b948 <_dtoa_r+0x2f0>
 800b722:	f000 bd40 	b.w	800c1a6 <_dtoa_r+0xb4e>
 800b726:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b72a:	aa14      	add	r2, sp, #80	@ 0x50
 800b72c:	a915      	add	r1, sp, #84	@ 0x54
 800b72e:	4648      	mov	r0, r9
 800b730:	f001 f984 	bl	800ca3c <__d2b>
 800b734:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b738:	9002      	str	r0, [sp, #8]
 800b73a:	2e00      	cmp	r6, #0
 800b73c:	d078      	beq.n	800b830 <_dtoa_r+0x1d8>
 800b73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b740:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b74c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b750:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b754:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b758:	4619      	mov	r1, r3
 800b75a:	2200      	movs	r2, #0
 800b75c:	4b76      	ldr	r3, [pc, #472]	@ (800b938 <_dtoa_r+0x2e0>)
 800b75e:	f7f4 fd93 	bl	8000288 <__aeabi_dsub>
 800b762:	a36b      	add	r3, pc, #428	@ (adr r3, 800b910 <_dtoa_r+0x2b8>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f7f4 ff46 	bl	80005f8 <__aeabi_dmul>
 800b76c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b918 <_dtoa_r+0x2c0>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f7f4 fd8b 	bl	800028c <__adddf3>
 800b776:	4604      	mov	r4, r0
 800b778:	4630      	mov	r0, r6
 800b77a:	460d      	mov	r5, r1
 800b77c:	f7f4 fed2 	bl	8000524 <__aeabi_i2d>
 800b780:	a367      	add	r3, pc, #412	@ (adr r3, 800b920 <_dtoa_r+0x2c8>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 ff37 	bl	80005f8 <__aeabi_dmul>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4620      	mov	r0, r4
 800b790:	4629      	mov	r1, r5
 800b792:	f7f4 fd7b 	bl	800028c <__adddf3>
 800b796:	4604      	mov	r4, r0
 800b798:	460d      	mov	r5, r1
 800b79a:	f7f5 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	4607      	mov	r7, r0
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f5 f998 	bl	8000adc <__aeabi_dcmplt>
 800b7ac:	b140      	cbz	r0, 800b7c0 <_dtoa_r+0x168>
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f7f4 feb8 	bl	8000524 <__aeabi_i2d>
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	462b      	mov	r3, r5
 800b7b8:	f7f5 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7bc:	b900      	cbnz	r0, 800b7c0 <_dtoa_r+0x168>
 800b7be:	3f01      	subs	r7, #1
 800b7c0:	2f16      	cmp	r7, #22
 800b7c2:	d852      	bhi.n	800b86a <_dtoa_r+0x212>
 800b7c4:	4b5d      	ldr	r3, [pc, #372]	@ (800b93c <_dtoa_r+0x2e4>)
 800b7c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b7d2:	f7f5 f983 	bl	8000adc <__aeabi_dcmplt>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d049      	beq.n	800b86e <_dtoa_r+0x216>
 800b7da:	3f01      	subs	r7, #1
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7e2:	1b9b      	subs	r3, r3, r6
 800b7e4:	1e5a      	subs	r2, r3, #1
 800b7e6:	bf45      	ittet	mi
 800b7e8:	f1c3 0301 	rsbmi	r3, r3, #1
 800b7ec:	9300      	strmi	r3, [sp, #0]
 800b7ee:	2300      	movpl	r3, #0
 800b7f0:	2300      	movmi	r3, #0
 800b7f2:	9206      	str	r2, [sp, #24]
 800b7f4:	bf54      	ite	pl
 800b7f6:	9300      	strpl	r3, [sp, #0]
 800b7f8:	9306      	strmi	r3, [sp, #24]
 800b7fa:	2f00      	cmp	r7, #0
 800b7fc:	db39      	blt.n	800b872 <_dtoa_r+0x21a>
 800b7fe:	9b06      	ldr	r3, [sp, #24]
 800b800:	970d      	str	r7, [sp, #52]	@ 0x34
 800b802:	443b      	add	r3, r7
 800b804:	9306      	str	r3, [sp, #24]
 800b806:	2300      	movs	r3, #0
 800b808:	9308      	str	r3, [sp, #32]
 800b80a:	9b07      	ldr	r3, [sp, #28]
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	d863      	bhi.n	800b8d8 <_dtoa_r+0x280>
 800b810:	2b05      	cmp	r3, #5
 800b812:	bfc4      	itt	gt
 800b814:	3b04      	subgt	r3, #4
 800b816:	9307      	strgt	r3, [sp, #28]
 800b818:	9b07      	ldr	r3, [sp, #28]
 800b81a:	f1a3 0302 	sub.w	r3, r3, #2
 800b81e:	bfcc      	ite	gt
 800b820:	2400      	movgt	r4, #0
 800b822:	2401      	movle	r4, #1
 800b824:	2b03      	cmp	r3, #3
 800b826:	d863      	bhi.n	800b8f0 <_dtoa_r+0x298>
 800b828:	e8df f003 	tbb	[pc, r3]
 800b82c:	2b375452 	.word	0x2b375452
 800b830:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b834:	441e      	add	r6, r3
 800b836:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b83a:	2b20      	cmp	r3, #32
 800b83c:	bfc1      	itttt	gt
 800b83e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b842:	409f      	lslgt	r7, r3
 800b844:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b848:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b84c:	bfd6      	itet	le
 800b84e:	f1c3 0320 	rsble	r3, r3, #32
 800b852:	ea47 0003 	orrgt.w	r0, r7, r3
 800b856:	fa04 f003 	lslle.w	r0, r4, r3
 800b85a:	f7f4 fe53 	bl	8000504 <__aeabi_ui2d>
 800b85e:	2201      	movs	r2, #1
 800b860:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b864:	3e01      	subs	r6, #1
 800b866:	9212      	str	r2, [sp, #72]	@ 0x48
 800b868:	e776      	b.n	800b758 <_dtoa_r+0x100>
 800b86a:	2301      	movs	r3, #1
 800b86c:	e7b7      	b.n	800b7de <_dtoa_r+0x186>
 800b86e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b870:	e7b6      	b.n	800b7e0 <_dtoa_r+0x188>
 800b872:	9b00      	ldr	r3, [sp, #0]
 800b874:	1bdb      	subs	r3, r3, r7
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	427b      	negs	r3, r7
 800b87a:	9308      	str	r3, [sp, #32]
 800b87c:	2300      	movs	r3, #0
 800b87e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b880:	e7c3      	b.n	800b80a <_dtoa_r+0x1b2>
 800b882:	2301      	movs	r3, #1
 800b884:	9309      	str	r3, [sp, #36]	@ 0x24
 800b886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b888:	eb07 0b03 	add.w	fp, r7, r3
 800b88c:	f10b 0301 	add.w	r3, fp, #1
 800b890:	2b01      	cmp	r3, #1
 800b892:	9303      	str	r3, [sp, #12]
 800b894:	bfb8      	it	lt
 800b896:	2301      	movlt	r3, #1
 800b898:	e006      	b.n	800b8a8 <_dtoa_r+0x250>
 800b89a:	2301      	movs	r3, #1
 800b89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b89e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dd28      	ble.n	800b8f6 <_dtoa_r+0x29e>
 800b8a4:	469b      	mov	fp, r3
 800b8a6:	9303      	str	r3, [sp, #12]
 800b8a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	2204      	movs	r2, #4
 800b8b0:	f102 0514 	add.w	r5, r2, #20
 800b8b4:	429d      	cmp	r5, r3
 800b8b6:	d926      	bls.n	800b906 <_dtoa_r+0x2ae>
 800b8b8:	6041      	str	r1, [r0, #4]
 800b8ba:	4648      	mov	r0, r9
 800b8bc:	f000 fd9c 	bl	800c3f8 <_Balloc>
 800b8c0:	4682      	mov	sl, r0
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d142      	bne.n	800b94c <_dtoa_r+0x2f4>
 800b8c6:	4b1e      	ldr	r3, [pc, #120]	@ (800b940 <_dtoa_r+0x2e8>)
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800b8ce:	e6da      	b.n	800b686 <_dtoa_r+0x2e>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	e7e3      	b.n	800b89c <_dtoa_r+0x244>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e7d5      	b.n	800b884 <_dtoa_r+0x22c>
 800b8d8:	2401      	movs	r4, #1
 800b8da:	2300      	movs	r3, #0
 800b8dc:	9307      	str	r3, [sp, #28]
 800b8de:	9409      	str	r4, [sp, #36]	@ 0x24
 800b8e0:	f04f 3bff 	mov.w	fp, #4294967295
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f8cd b00c 	str.w	fp, [sp, #12]
 800b8ea:	2312      	movs	r3, #18
 800b8ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800b8ee:	e7db      	b.n	800b8a8 <_dtoa_r+0x250>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8f4:	e7f4      	b.n	800b8e0 <_dtoa_r+0x288>
 800b8f6:	f04f 0b01 	mov.w	fp, #1
 800b8fa:	f8cd b00c 	str.w	fp, [sp, #12]
 800b8fe:	465b      	mov	r3, fp
 800b900:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b904:	e7d0      	b.n	800b8a8 <_dtoa_r+0x250>
 800b906:	3101      	adds	r1, #1
 800b908:	0052      	lsls	r2, r2, #1
 800b90a:	e7d1      	b.n	800b8b0 <_dtoa_r+0x258>
 800b90c:	f3af 8000 	nop.w
 800b910:	636f4361 	.word	0x636f4361
 800b914:	3fd287a7 	.word	0x3fd287a7
 800b918:	8b60c8b3 	.word	0x8b60c8b3
 800b91c:	3fc68a28 	.word	0x3fc68a28
 800b920:	509f79fb 	.word	0x509f79fb
 800b924:	3fd34413 	.word	0x3fd34413
 800b928:	0800dee1 	.word	0x0800dee1
 800b92c:	0800def8 	.word	0x0800def8
 800b930:	7ff00000 	.word	0x7ff00000
 800b934:	0800deb1 	.word	0x0800deb1
 800b938:	3ff80000 	.word	0x3ff80000
 800b93c:	0800e048 	.word	0x0800e048
 800b940:	0800df50 	.word	0x0800df50
 800b944:	0800dedd 	.word	0x0800dedd
 800b948:	0800deb0 	.word	0x0800deb0
 800b94c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b950:	6018      	str	r0, [r3, #0]
 800b952:	9b03      	ldr	r3, [sp, #12]
 800b954:	2b0e      	cmp	r3, #14
 800b956:	f200 80a1 	bhi.w	800ba9c <_dtoa_r+0x444>
 800b95a:	2c00      	cmp	r4, #0
 800b95c:	f000 809e 	beq.w	800ba9c <_dtoa_r+0x444>
 800b960:	2f00      	cmp	r7, #0
 800b962:	dd33      	ble.n	800b9cc <_dtoa_r+0x374>
 800b964:	4b9c      	ldr	r3, [pc, #624]	@ (800bbd8 <_dtoa_r+0x580>)
 800b966:	f007 020f 	and.w	r2, r7, #15
 800b96a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b96e:	ed93 7b00 	vldr	d7, [r3]
 800b972:	05f8      	lsls	r0, r7, #23
 800b974:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b978:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b97c:	d516      	bpl.n	800b9ac <_dtoa_r+0x354>
 800b97e:	4b97      	ldr	r3, [pc, #604]	@ (800bbdc <_dtoa_r+0x584>)
 800b980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b988:	f7f4 ff60 	bl	800084c <__aeabi_ddiv>
 800b98c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b990:	f004 040f 	and.w	r4, r4, #15
 800b994:	2603      	movs	r6, #3
 800b996:	4d91      	ldr	r5, [pc, #580]	@ (800bbdc <_dtoa_r+0x584>)
 800b998:	b954      	cbnz	r4, 800b9b0 <_dtoa_r+0x358>
 800b99a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b99e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9a2:	f7f4 ff53 	bl	800084c <__aeabi_ddiv>
 800b9a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9aa:	e028      	b.n	800b9fe <_dtoa_r+0x3a6>
 800b9ac:	2602      	movs	r6, #2
 800b9ae:	e7f2      	b.n	800b996 <_dtoa_r+0x33e>
 800b9b0:	07e1      	lsls	r1, r4, #31
 800b9b2:	d508      	bpl.n	800b9c6 <_dtoa_r+0x36e>
 800b9b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b9b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9bc:	f7f4 fe1c 	bl	80005f8 <__aeabi_dmul>
 800b9c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b9c4:	3601      	adds	r6, #1
 800b9c6:	1064      	asrs	r4, r4, #1
 800b9c8:	3508      	adds	r5, #8
 800b9ca:	e7e5      	b.n	800b998 <_dtoa_r+0x340>
 800b9cc:	f000 80af 	beq.w	800bb2e <_dtoa_r+0x4d6>
 800b9d0:	427c      	negs	r4, r7
 800b9d2:	4b81      	ldr	r3, [pc, #516]	@ (800bbd8 <_dtoa_r+0x580>)
 800b9d4:	4d81      	ldr	r5, [pc, #516]	@ (800bbdc <_dtoa_r+0x584>)
 800b9d6:	f004 020f 	and.w	r2, r4, #15
 800b9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9e6:	f7f4 fe07 	bl	80005f8 <__aeabi_dmul>
 800b9ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9ee:	1124      	asrs	r4, r4, #4
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	2602      	movs	r6, #2
 800b9f4:	2c00      	cmp	r4, #0
 800b9f6:	f040 808f 	bne.w	800bb18 <_dtoa_r+0x4c0>
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1d3      	bne.n	800b9a6 <_dtoa_r+0x34e>
 800b9fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 8094 	beq.w	800bb32 <_dtoa_r+0x4da>
 800ba0a:	4b75      	ldr	r3, [pc, #468]	@ (800bbe0 <_dtoa_r+0x588>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4620      	mov	r0, r4
 800ba10:	4629      	mov	r1, r5
 800ba12:	f7f5 f863 	bl	8000adc <__aeabi_dcmplt>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f000 808b 	beq.w	800bb32 <_dtoa_r+0x4da>
 800ba1c:	9b03      	ldr	r3, [sp, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 8087 	beq.w	800bb32 <_dtoa_r+0x4da>
 800ba24:	f1bb 0f00 	cmp.w	fp, #0
 800ba28:	dd34      	ble.n	800ba94 <_dtoa_r+0x43c>
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	4b6d      	ldr	r3, [pc, #436]	@ (800bbe4 <_dtoa_r+0x58c>)
 800ba2e:	2200      	movs	r2, #0
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f4 fde1 	bl	80005f8 <__aeabi_dmul>
 800ba36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba3a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ba3e:	3601      	adds	r6, #1
 800ba40:	465c      	mov	r4, fp
 800ba42:	4630      	mov	r0, r6
 800ba44:	f7f4 fd6e 	bl	8000524 <__aeabi_i2d>
 800ba48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba4c:	f7f4 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ba50:	4b65      	ldr	r3, [pc, #404]	@ (800bbe8 <_dtoa_r+0x590>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	f7f4 fc1a 	bl	800028c <__adddf3>
 800ba58:	4605      	mov	r5, r0
 800ba5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba5e:	2c00      	cmp	r4, #0
 800ba60:	d16a      	bne.n	800bb38 <_dtoa_r+0x4e0>
 800ba62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba66:	4b61      	ldr	r3, [pc, #388]	@ (800bbec <_dtoa_r+0x594>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f7f4 fc0d 	bl	8000288 <__aeabi_dsub>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba76:	462a      	mov	r2, r5
 800ba78:	4633      	mov	r3, r6
 800ba7a:	f7f5 f84d 	bl	8000b18 <__aeabi_dcmpgt>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	f040 8298 	bne.w	800bfb4 <_dtoa_r+0x95c>
 800ba84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba88:	462a      	mov	r2, r5
 800ba8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba8e:	f7f5 f825 	bl	8000adc <__aeabi_dcmplt>
 800ba92:	bb38      	cbnz	r0, 800bae4 <_dtoa_r+0x48c>
 800ba94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ba98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f2c0 8157 	blt.w	800bd52 <_dtoa_r+0x6fa>
 800baa4:	2f0e      	cmp	r7, #14
 800baa6:	f300 8154 	bgt.w	800bd52 <_dtoa_r+0x6fa>
 800baaa:	4b4b      	ldr	r3, [pc, #300]	@ (800bbd8 <_dtoa_r+0x580>)
 800baac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bab0:	ed93 7b00 	vldr	d7, [r3]
 800bab4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	ed8d 7b00 	vstr	d7, [sp]
 800babc:	f280 80e5 	bge.w	800bc8a <_dtoa_r+0x632>
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f300 80e1 	bgt.w	800bc8a <_dtoa_r+0x632>
 800bac8:	d10c      	bne.n	800bae4 <_dtoa_r+0x48c>
 800baca:	4b48      	ldr	r3, [pc, #288]	@ (800bbec <_dtoa_r+0x594>)
 800bacc:	2200      	movs	r2, #0
 800bace:	ec51 0b17 	vmov	r0, r1, d7
 800bad2:	f7f4 fd91 	bl	80005f8 <__aeabi_dmul>
 800bad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bada:	f7f5 f813 	bl	8000b04 <__aeabi_dcmpge>
 800bade:	2800      	cmp	r0, #0
 800bae0:	f000 8266 	beq.w	800bfb0 <_dtoa_r+0x958>
 800bae4:	2400      	movs	r4, #0
 800bae6:	4625      	mov	r5, r4
 800bae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800baea:	4656      	mov	r6, sl
 800baec:	ea6f 0803 	mvn.w	r8, r3
 800baf0:	2700      	movs	r7, #0
 800baf2:	4621      	mov	r1, r4
 800baf4:	4648      	mov	r0, r9
 800baf6:	f000 fcbf 	bl	800c478 <_Bfree>
 800bafa:	2d00      	cmp	r5, #0
 800bafc:	f000 80bd 	beq.w	800bc7a <_dtoa_r+0x622>
 800bb00:	b12f      	cbz	r7, 800bb0e <_dtoa_r+0x4b6>
 800bb02:	42af      	cmp	r7, r5
 800bb04:	d003      	beq.n	800bb0e <_dtoa_r+0x4b6>
 800bb06:	4639      	mov	r1, r7
 800bb08:	4648      	mov	r0, r9
 800bb0a:	f000 fcb5 	bl	800c478 <_Bfree>
 800bb0e:	4629      	mov	r1, r5
 800bb10:	4648      	mov	r0, r9
 800bb12:	f000 fcb1 	bl	800c478 <_Bfree>
 800bb16:	e0b0      	b.n	800bc7a <_dtoa_r+0x622>
 800bb18:	07e2      	lsls	r2, r4, #31
 800bb1a:	d505      	bpl.n	800bb28 <_dtoa_r+0x4d0>
 800bb1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb20:	f7f4 fd6a 	bl	80005f8 <__aeabi_dmul>
 800bb24:	3601      	adds	r6, #1
 800bb26:	2301      	movs	r3, #1
 800bb28:	1064      	asrs	r4, r4, #1
 800bb2a:	3508      	adds	r5, #8
 800bb2c:	e762      	b.n	800b9f4 <_dtoa_r+0x39c>
 800bb2e:	2602      	movs	r6, #2
 800bb30:	e765      	b.n	800b9fe <_dtoa_r+0x3a6>
 800bb32:	9c03      	ldr	r4, [sp, #12]
 800bb34:	46b8      	mov	r8, r7
 800bb36:	e784      	b.n	800ba42 <_dtoa_r+0x3ea>
 800bb38:	4b27      	ldr	r3, [pc, #156]	@ (800bbd8 <_dtoa_r+0x580>)
 800bb3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb44:	4454      	add	r4, sl
 800bb46:	2900      	cmp	r1, #0
 800bb48:	d054      	beq.n	800bbf4 <_dtoa_r+0x59c>
 800bb4a:	4929      	ldr	r1, [pc, #164]	@ (800bbf0 <_dtoa_r+0x598>)
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f7f4 fe7d 	bl	800084c <__aeabi_ddiv>
 800bb52:	4633      	mov	r3, r6
 800bb54:	462a      	mov	r2, r5
 800bb56:	f7f4 fb97 	bl	8000288 <__aeabi_dsub>
 800bb5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bb5e:	4656      	mov	r6, sl
 800bb60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb64:	f7f4 fff8 	bl	8000b58 <__aeabi_d2iz>
 800bb68:	4605      	mov	r5, r0
 800bb6a:	f7f4 fcdb 	bl	8000524 <__aeabi_i2d>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb76:	f7f4 fb87 	bl	8000288 <__aeabi_dsub>
 800bb7a:	3530      	adds	r5, #48	@ 0x30
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb84:	f806 5b01 	strb.w	r5, [r6], #1
 800bb88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bb8c:	f7f4 ffa6 	bl	8000adc <__aeabi_dcmplt>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d172      	bne.n	800bc7a <_dtoa_r+0x622>
 800bb94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb98:	4911      	ldr	r1, [pc, #68]	@ (800bbe0 <_dtoa_r+0x588>)
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	f7f4 fb74 	bl	8000288 <__aeabi_dsub>
 800bba0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bba4:	f7f4 ff9a 	bl	8000adc <__aeabi_dcmplt>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	f040 80b4 	bne.w	800bd16 <_dtoa_r+0x6be>
 800bbae:	42a6      	cmp	r6, r4
 800bbb0:	f43f af70 	beq.w	800ba94 <_dtoa_r+0x43c>
 800bbb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe4 <_dtoa_r+0x58c>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f7f4 fd1c 	bl	80005f8 <__aeabi_dmul>
 800bbc0:	4b08      	ldr	r3, [pc, #32]	@ (800bbe4 <_dtoa_r+0x58c>)
 800bbc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbcc:	f7f4 fd14 	bl	80005f8 <__aeabi_dmul>
 800bbd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbd4:	e7c4      	b.n	800bb60 <_dtoa_r+0x508>
 800bbd6:	bf00      	nop
 800bbd8:	0800e048 	.word	0x0800e048
 800bbdc:	0800e020 	.word	0x0800e020
 800bbe0:	3ff00000 	.word	0x3ff00000
 800bbe4:	40240000 	.word	0x40240000
 800bbe8:	401c0000 	.word	0x401c0000
 800bbec:	40140000 	.word	0x40140000
 800bbf0:	3fe00000 	.word	0x3fe00000
 800bbf4:	4631      	mov	r1, r6
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f7f4 fcfe 	bl	80005f8 <__aeabi_dmul>
 800bbfc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc00:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bc02:	4656      	mov	r6, sl
 800bc04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc08:	f7f4 ffa6 	bl	8000b58 <__aeabi_d2iz>
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	f7f4 fc89 	bl	8000524 <__aeabi_i2d>
 800bc12:	4602      	mov	r2, r0
 800bc14:	460b      	mov	r3, r1
 800bc16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc1a:	f7f4 fb35 	bl	8000288 <__aeabi_dsub>
 800bc1e:	3530      	adds	r5, #48	@ 0x30
 800bc20:	f806 5b01 	strb.w	r5, [r6], #1
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	42a6      	cmp	r6, r4
 800bc2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc2e:	f04f 0200 	mov.w	r2, #0
 800bc32:	d124      	bne.n	800bc7e <_dtoa_r+0x626>
 800bc34:	4baf      	ldr	r3, [pc, #700]	@ (800bef4 <_dtoa_r+0x89c>)
 800bc36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bc3a:	f7f4 fb27 	bl	800028c <__adddf3>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc46:	f7f4 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d163      	bne.n	800bd16 <_dtoa_r+0x6be>
 800bc4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc52:	49a8      	ldr	r1, [pc, #672]	@ (800bef4 <_dtoa_r+0x89c>)
 800bc54:	2000      	movs	r0, #0
 800bc56:	f7f4 fb17 	bl	8000288 <__aeabi_dsub>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc62:	f7f4 ff3b 	bl	8000adc <__aeabi_dcmplt>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f43f af14 	beq.w	800ba94 <_dtoa_r+0x43c>
 800bc6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bc6e:	1e73      	subs	r3, r6, #1
 800bc70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc76:	2b30      	cmp	r3, #48	@ 0x30
 800bc78:	d0f8      	beq.n	800bc6c <_dtoa_r+0x614>
 800bc7a:	4647      	mov	r7, r8
 800bc7c:	e03b      	b.n	800bcf6 <_dtoa_r+0x69e>
 800bc7e:	4b9e      	ldr	r3, [pc, #632]	@ (800bef8 <_dtoa_r+0x8a0>)
 800bc80:	f7f4 fcba 	bl	80005f8 <__aeabi_dmul>
 800bc84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc88:	e7bc      	b.n	800bc04 <_dtoa_r+0x5ac>
 800bc8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bc8e:	4656      	mov	r6, sl
 800bc90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc94:	4620      	mov	r0, r4
 800bc96:	4629      	mov	r1, r5
 800bc98:	f7f4 fdd8 	bl	800084c <__aeabi_ddiv>
 800bc9c:	f7f4 ff5c 	bl	8000b58 <__aeabi_d2iz>
 800bca0:	4680      	mov	r8, r0
 800bca2:	f7f4 fc3f 	bl	8000524 <__aeabi_i2d>
 800bca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcaa:	f7f4 fca5 	bl	80005f8 <__aeabi_dmul>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcba:	f7f4 fae5 	bl	8000288 <__aeabi_dsub>
 800bcbe:	f806 4b01 	strb.w	r4, [r6], #1
 800bcc2:	9d03      	ldr	r5, [sp, #12]
 800bcc4:	eba6 040a 	sub.w	r4, r6, sl
 800bcc8:	42a5      	cmp	r5, r4
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	d133      	bne.n	800bd38 <_dtoa_r+0x6e0>
 800bcd0:	f7f4 fadc 	bl	800028c <__adddf3>
 800bcd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcd8:	4604      	mov	r4, r0
 800bcda:	460d      	mov	r5, r1
 800bcdc:	f7f4 ff1c 	bl	8000b18 <__aeabi_dcmpgt>
 800bce0:	b9c0      	cbnz	r0, 800bd14 <_dtoa_r+0x6bc>
 800bce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bce6:	4620      	mov	r0, r4
 800bce8:	4629      	mov	r1, r5
 800bcea:	f7f4 feed 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcee:	b110      	cbz	r0, 800bcf6 <_dtoa_r+0x69e>
 800bcf0:	f018 0f01 	tst.w	r8, #1
 800bcf4:	d10e      	bne.n	800bd14 <_dtoa_r+0x6bc>
 800bcf6:	9902      	ldr	r1, [sp, #8]
 800bcf8:	4648      	mov	r0, r9
 800bcfa:	f000 fbbd 	bl	800c478 <_Bfree>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	7033      	strb	r3, [r6, #0]
 800bd02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd04:	3701      	adds	r7, #1
 800bd06:	601f      	str	r7, [r3, #0]
 800bd08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 824b 	beq.w	800c1a6 <_dtoa_r+0xb4e>
 800bd10:	601e      	str	r6, [r3, #0]
 800bd12:	e248      	b.n	800c1a6 <_dtoa_r+0xb4e>
 800bd14:	46b8      	mov	r8, r7
 800bd16:	4633      	mov	r3, r6
 800bd18:	461e      	mov	r6, r3
 800bd1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd1e:	2a39      	cmp	r2, #57	@ 0x39
 800bd20:	d106      	bne.n	800bd30 <_dtoa_r+0x6d8>
 800bd22:	459a      	cmp	sl, r3
 800bd24:	d1f8      	bne.n	800bd18 <_dtoa_r+0x6c0>
 800bd26:	2230      	movs	r2, #48	@ 0x30
 800bd28:	f108 0801 	add.w	r8, r8, #1
 800bd2c:	f88a 2000 	strb.w	r2, [sl]
 800bd30:	781a      	ldrb	r2, [r3, #0]
 800bd32:	3201      	adds	r2, #1
 800bd34:	701a      	strb	r2, [r3, #0]
 800bd36:	e7a0      	b.n	800bc7a <_dtoa_r+0x622>
 800bd38:	4b6f      	ldr	r3, [pc, #444]	@ (800bef8 <_dtoa_r+0x8a0>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f7f4 fc5c 	bl	80005f8 <__aeabi_dmul>
 800bd40:	2200      	movs	r2, #0
 800bd42:	2300      	movs	r3, #0
 800bd44:	4604      	mov	r4, r0
 800bd46:	460d      	mov	r5, r1
 800bd48:	f7f4 febe 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d09f      	beq.n	800bc90 <_dtoa_r+0x638>
 800bd50:	e7d1      	b.n	800bcf6 <_dtoa_r+0x69e>
 800bd52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	f000 80ea 	beq.w	800bf2e <_dtoa_r+0x8d6>
 800bd5a:	9a07      	ldr	r2, [sp, #28]
 800bd5c:	2a01      	cmp	r2, #1
 800bd5e:	f300 80cd 	bgt.w	800befc <_dtoa_r+0x8a4>
 800bd62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd64:	2a00      	cmp	r2, #0
 800bd66:	f000 80c1 	beq.w	800beec <_dtoa_r+0x894>
 800bd6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bd6e:	9c08      	ldr	r4, [sp, #32]
 800bd70:	9e00      	ldr	r6, [sp, #0]
 800bd72:	9a00      	ldr	r2, [sp, #0]
 800bd74:	441a      	add	r2, r3
 800bd76:	9200      	str	r2, [sp, #0]
 800bd78:	9a06      	ldr	r2, [sp, #24]
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	441a      	add	r2, r3
 800bd7e:	4648      	mov	r0, r9
 800bd80:	9206      	str	r2, [sp, #24]
 800bd82:	f000 fc2d 	bl	800c5e0 <__i2b>
 800bd86:	4605      	mov	r5, r0
 800bd88:	b166      	cbz	r6, 800bda4 <_dtoa_r+0x74c>
 800bd8a:	9b06      	ldr	r3, [sp, #24]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	dd09      	ble.n	800bda4 <_dtoa_r+0x74c>
 800bd90:	42b3      	cmp	r3, r6
 800bd92:	9a00      	ldr	r2, [sp, #0]
 800bd94:	bfa8      	it	ge
 800bd96:	4633      	movge	r3, r6
 800bd98:	1ad2      	subs	r2, r2, r3
 800bd9a:	9200      	str	r2, [sp, #0]
 800bd9c:	9a06      	ldr	r2, [sp, #24]
 800bd9e:	1af6      	subs	r6, r6, r3
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	9306      	str	r3, [sp, #24]
 800bda4:	9b08      	ldr	r3, [sp, #32]
 800bda6:	b30b      	cbz	r3, 800bdec <_dtoa_r+0x794>
 800bda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80c6 	beq.w	800bf3c <_dtoa_r+0x8e4>
 800bdb0:	2c00      	cmp	r4, #0
 800bdb2:	f000 80c0 	beq.w	800bf36 <_dtoa_r+0x8de>
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4622      	mov	r2, r4
 800bdba:	4648      	mov	r0, r9
 800bdbc:	f000 fcc8 	bl	800c750 <__pow5mult>
 800bdc0:	9a02      	ldr	r2, [sp, #8]
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	4648      	mov	r0, r9
 800bdc8:	f000 fc20 	bl	800c60c <__multiply>
 800bdcc:	9902      	ldr	r1, [sp, #8]
 800bdce:	4680      	mov	r8, r0
 800bdd0:	4648      	mov	r0, r9
 800bdd2:	f000 fb51 	bl	800c478 <_Bfree>
 800bdd6:	9b08      	ldr	r3, [sp, #32]
 800bdd8:	1b1b      	subs	r3, r3, r4
 800bdda:	9308      	str	r3, [sp, #32]
 800bddc:	f000 80b1 	beq.w	800bf42 <_dtoa_r+0x8ea>
 800bde0:	9a08      	ldr	r2, [sp, #32]
 800bde2:	4641      	mov	r1, r8
 800bde4:	4648      	mov	r0, r9
 800bde6:	f000 fcb3 	bl	800c750 <__pow5mult>
 800bdea:	9002      	str	r0, [sp, #8]
 800bdec:	2101      	movs	r1, #1
 800bdee:	4648      	mov	r0, r9
 800bdf0:	f000 fbf6 	bl	800c5e0 <__i2b>
 800bdf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 81d8 	beq.w	800c1ae <_dtoa_r+0xb56>
 800bdfe:	461a      	mov	r2, r3
 800be00:	4601      	mov	r1, r0
 800be02:	4648      	mov	r0, r9
 800be04:	f000 fca4 	bl	800c750 <__pow5mult>
 800be08:	9b07      	ldr	r3, [sp, #28]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	4604      	mov	r4, r0
 800be0e:	f300 809f 	bgt.w	800bf50 <_dtoa_r+0x8f8>
 800be12:	9b04      	ldr	r3, [sp, #16]
 800be14:	2b00      	cmp	r3, #0
 800be16:	f040 8097 	bne.w	800bf48 <_dtoa_r+0x8f0>
 800be1a:	9b05      	ldr	r3, [sp, #20]
 800be1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be20:	2b00      	cmp	r3, #0
 800be22:	f040 8093 	bne.w	800bf4c <_dtoa_r+0x8f4>
 800be26:	9b05      	ldr	r3, [sp, #20]
 800be28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be2c:	0d1b      	lsrs	r3, r3, #20
 800be2e:	051b      	lsls	r3, r3, #20
 800be30:	b133      	cbz	r3, 800be40 <_dtoa_r+0x7e8>
 800be32:	9b00      	ldr	r3, [sp, #0]
 800be34:	3301      	adds	r3, #1
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	9b06      	ldr	r3, [sp, #24]
 800be3a:	3301      	adds	r3, #1
 800be3c:	9306      	str	r3, [sp, #24]
 800be3e:	2301      	movs	r3, #1
 800be40:	9308      	str	r3, [sp, #32]
 800be42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 81b8 	beq.w	800c1ba <_dtoa_r+0xb62>
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be50:	6918      	ldr	r0, [r3, #16]
 800be52:	f000 fb79 	bl	800c548 <__hi0bits>
 800be56:	f1c0 0020 	rsb	r0, r0, #32
 800be5a:	9b06      	ldr	r3, [sp, #24]
 800be5c:	4418      	add	r0, r3
 800be5e:	f010 001f 	ands.w	r0, r0, #31
 800be62:	f000 8082 	beq.w	800bf6a <_dtoa_r+0x912>
 800be66:	f1c0 0320 	rsb	r3, r0, #32
 800be6a:	2b04      	cmp	r3, #4
 800be6c:	dd73      	ble.n	800bf56 <_dtoa_r+0x8fe>
 800be6e:	9b00      	ldr	r3, [sp, #0]
 800be70:	f1c0 001c 	rsb	r0, r0, #28
 800be74:	4403      	add	r3, r0
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	9b06      	ldr	r3, [sp, #24]
 800be7a:	4403      	add	r3, r0
 800be7c:	4406      	add	r6, r0
 800be7e:	9306      	str	r3, [sp, #24]
 800be80:	9b00      	ldr	r3, [sp, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	dd05      	ble.n	800be92 <_dtoa_r+0x83a>
 800be86:	9902      	ldr	r1, [sp, #8]
 800be88:	461a      	mov	r2, r3
 800be8a:	4648      	mov	r0, r9
 800be8c:	f000 fcba 	bl	800c804 <__lshift>
 800be90:	9002      	str	r0, [sp, #8]
 800be92:	9b06      	ldr	r3, [sp, #24]
 800be94:	2b00      	cmp	r3, #0
 800be96:	dd05      	ble.n	800bea4 <_dtoa_r+0x84c>
 800be98:	4621      	mov	r1, r4
 800be9a:	461a      	mov	r2, r3
 800be9c:	4648      	mov	r0, r9
 800be9e:	f000 fcb1 	bl	800c804 <__lshift>
 800bea2:	4604      	mov	r4, r0
 800bea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d061      	beq.n	800bf6e <_dtoa_r+0x916>
 800beaa:	9802      	ldr	r0, [sp, #8]
 800beac:	4621      	mov	r1, r4
 800beae:	f000 fd15 	bl	800c8dc <__mcmp>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	da5b      	bge.n	800bf6e <_dtoa_r+0x916>
 800beb6:	2300      	movs	r3, #0
 800beb8:	9902      	ldr	r1, [sp, #8]
 800beba:	220a      	movs	r2, #10
 800bebc:	4648      	mov	r0, r9
 800bebe:	f000 fafd 	bl	800c4bc <__multadd>
 800bec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec4:	9002      	str	r0, [sp, #8]
 800bec6:	f107 38ff 	add.w	r8, r7, #4294967295
 800beca:	2b00      	cmp	r3, #0
 800becc:	f000 8177 	beq.w	800c1be <_dtoa_r+0xb66>
 800bed0:	4629      	mov	r1, r5
 800bed2:	2300      	movs	r3, #0
 800bed4:	220a      	movs	r2, #10
 800bed6:	4648      	mov	r0, r9
 800bed8:	f000 faf0 	bl	800c4bc <__multadd>
 800bedc:	f1bb 0f00 	cmp.w	fp, #0
 800bee0:	4605      	mov	r5, r0
 800bee2:	dc6f      	bgt.n	800bfc4 <_dtoa_r+0x96c>
 800bee4:	9b07      	ldr	r3, [sp, #28]
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	dc49      	bgt.n	800bf7e <_dtoa_r+0x926>
 800beea:	e06b      	b.n	800bfc4 <_dtoa_r+0x96c>
 800beec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800beee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bef2:	e73c      	b.n	800bd6e <_dtoa_r+0x716>
 800bef4:	3fe00000 	.word	0x3fe00000
 800bef8:	40240000 	.word	0x40240000
 800befc:	9b03      	ldr	r3, [sp, #12]
 800befe:	1e5c      	subs	r4, r3, #1
 800bf00:	9b08      	ldr	r3, [sp, #32]
 800bf02:	42a3      	cmp	r3, r4
 800bf04:	db09      	blt.n	800bf1a <_dtoa_r+0x8c2>
 800bf06:	1b1c      	subs	r4, r3, r4
 800bf08:	9b03      	ldr	r3, [sp, #12]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f6bf af30 	bge.w	800bd70 <_dtoa_r+0x718>
 800bf10:	9b00      	ldr	r3, [sp, #0]
 800bf12:	9a03      	ldr	r2, [sp, #12]
 800bf14:	1a9e      	subs	r6, r3, r2
 800bf16:	2300      	movs	r3, #0
 800bf18:	e72b      	b.n	800bd72 <_dtoa_r+0x71a>
 800bf1a:	9b08      	ldr	r3, [sp, #32]
 800bf1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf1e:	9408      	str	r4, [sp, #32]
 800bf20:	1ae3      	subs	r3, r4, r3
 800bf22:	441a      	add	r2, r3
 800bf24:	9e00      	ldr	r6, [sp, #0]
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	920d      	str	r2, [sp, #52]	@ 0x34
 800bf2a:	2400      	movs	r4, #0
 800bf2c:	e721      	b.n	800bd72 <_dtoa_r+0x71a>
 800bf2e:	9c08      	ldr	r4, [sp, #32]
 800bf30:	9e00      	ldr	r6, [sp, #0]
 800bf32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bf34:	e728      	b.n	800bd88 <_dtoa_r+0x730>
 800bf36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bf3a:	e751      	b.n	800bde0 <_dtoa_r+0x788>
 800bf3c:	9a08      	ldr	r2, [sp, #32]
 800bf3e:	9902      	ldr	r1, [sp, #8]
 800bf40:	e750      	b.n	800bde4 <_dtoa_r+0x78c>
 800bf42:	f8cd 8008 	str.w	r8, [sp, #8]
 800bf46:	e751      	b.n	800bdec <_dtoa_r+0x794>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	e779      	b.n	800be40 <_dtoa_r+0x7e8>
 800bf4c:	9b04      	ldr	r3, [sp, #16]
 800bf4e:	e777      	b.n	800be40 <_dtoa_r+0x7e8>
 800bf50:	2300      	movs	r3, #0
 800bf52:	9308      	str	r3, [sp, #32]
 800bf54:	e779      	b.n	800be4a <_dtoa_r+0x7f2>
 800bf56:	d093      	beq.n	800be80 <_dtoa_r+0x828>
 800bf58:	9a00      	ldr	r2, [sp, #0]
 800bf5a:	331c      	adds	r3, #28
 800bf5c:	441a      	add	r2, r3
 800bf5e:	9200      	str	r2, [sp, #0]
 800bf60:	9a06      	ldr	r2, [sp, #24]
 800bf62:	441a      	add	r2, r3
 800bf64:	441e      	add	r6, r3
 800bf66:	9206      	str	r2, [sp, #24]
 800bf68:	e78a      	b.n	800be80 <_dtoa_r+0x828>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	e7f4      	b.n	800bf58 <_dtoa_r+0x900>
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	46b8      	mov	r8, r7
 800bf74:	dc20      	bgt.n	800bfb8 <_dtoa_r+0x960>
 800bf76:	469b      	mov	fp, r3
 800bf78:	9b07      	ldr	r3, [sp, #28]
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	dd1e      	ble.n	800bfbc <_dtoa_r+0x964>
 800bf7e:	f1bb 0f00 	cmp.w	fp, #0
 800bf82:	f47f adb1 	bne.w	800bae8 <_dtoa_r+0x490>
 800bf86:	4621      	mov	r1, r4
 800bf88:	465b      	mov	r3, fp
 800bf8a:	2205      	movs	r2, #5
 800bf8c:	4648      	mov	r0, r9
 800bf8e:	f000 fa95 	bl	800c4bc <__multadd>
 800bf92:	4601      	mov	r1, r0
 800bf94:	4604      	mov	r4, r0
 800bf96:	9802      	ldr	r0, [sp, #8]
 800bf98:	f000 fca0 	bl	800c8dc <__mcmp>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	f77f ada3 	ble.w	800bae8 <_dtoa_r+0x490>
 800bfa2:	4656      	mov	r6, sl
 800bfa4:	2331      	movs	r3, #49	@ 0x31
 800bfa6:	f806 3b01 	strb.w	r3, [r6], #1
 800bfaa:	f108 0801 	add.w	r8, r8, #1
 800bfae:	e59f      	b.n	800baf0 <_dtoa_r+0x498>
 800bfb0:	9c03      	ldr	r4, [sp, #12]
 800bfb2:	46b8      	mov	r8, r7
 800bfb4:	4625      	mov	r5, r4
 800bfb6:	e7f4      	b.n	800bfa2 <_dtoa_r+0x94a>
 800bfb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bfbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f000 8101 	beq.w	800c1c6 <_dtoa_r+0xb6e>
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	dd05      	ble.n	800bfd4 <_dtoa_r+0x97c>
 800bfc8:	4629      	mov	r1, r5
 800bfca:	4632      	mov	r2, r6
 800bfcc:	4648      	mov	r0, r9
 800bfce:	f000 fc19 	bl	800c804 <__lshift>
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	9b08      	ldr	r3, [sp, #32]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d05c      	beq.n	800c094 <_dtoa_r+0xa3c>
 800bfda:	6869      	ldr	r1, [r5, #4]
 800bfdc:	4648      	mov	r0, r9
 800bfde:	f000 fa0b 	bl	800c3f8 <_Balloc>
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	b928      	cbnz	r0, 800bff2 <_dtoa_r+0x99a>
 800bfe6:	4b82      	ldr	r3, [pc, #520]	@ (800c1f0 <_dtoa_r+0xb98>)
 800bfe8:	4602      	mov	r2, r0
 800bfea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bfee:	f7ff bb4a 	b.w	800b686 <_dtoa_r+0x2e>
 800bff2:	692a      	ldr	r2, [r5, #16]
 800bff4:	3202      	adds	r2, #2
 800bff6:	0092      	lsls	r2, r2, #2
 800bff8:	f105 010c 	add.w	r1, r5, #12
 800bffc:	300c      	adds	r0, #12
 800bffe:	f000 ffa3 	bl	800cf48 <memcpy>
 800c002:	2201      	movs	r2, #1
 800c004:	4631      	mov	r1, r6
 800c006:	4648      	mov	r0, r9
 800c008:	f000 fbfc 	bl	800c804 <__lshift>
 800c00c:	f10a 0301 	add.w	r3, sl, #1
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	eb0a 030b 	add.w	r3, sl, fp
 800c016:	9308      	str	r3, [sp, #32]
 800c018:	9b04      	ldr	r3, [sp, #16]
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	462f      	mov	r7, r5
 800c020:	9306      	str	r3, [sp, #24]
 800c022:	4605      	mov	r5, r0
 800c024:	9b00      	ldr	r3, [sp, #0]
 800c026:	9802      	ldr	r0, [sp, #8]
 800c028:	4621      	mov	r1, r4
 800c02a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c02e:	f7ff fa88 	bl	800b542 <quorem>
 800c032:	4603      	mov	r3, r0
 800c034:	3330      	adds	r3, #48	@ 0x30
 800c036:	9003      	str	r0, [sp, #12]
 800c038:	4639      	mov	r1, r7
 800c03a:	9802      	ldr	r0, [sp, #8]
 800c03c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c03e:	f000 fc4d 	bl	800c8dc <__mcmp>
 800c042:	462a      	mov	r2, r5
 800c044:	9004      	str	r0, [sp, #16]
 800c046:	4621      	mov	r1, r4
 800c048:	4648      	mov	r0, r9
 800c04a:	f000 fc63 	bl	800c914 <__mdiff>
 800c04e:	68c2      	ldr	r2, [r0, #12]
 800c050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c052:	4606      	mov	r6, r0
 800c054:	bb02      	cbnz	r2, 800c098 <_dtoa_r+0xa40>
 800c056:	4601      	mov	r1, r0
 800c058:	9802      	ldr	r0, [sp, #8]
 800c05a:	f000 fc3f 	bl	800c8dc <__mcmp>
 800c05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c060:	4602      	mov	r2, r0
 800c062:	4631      	mov	r1, r6
 800c064:	4648      	mov	r0, r9
 800c066:	920c      	str	r2, [sp, #48]	@ 0x30
 800c068:	9309      	str	r3, [sp, #36]	@ 0x24
 800c06a:	f000 fa05 	bl	800c478 <_Bfree>
 800c06e:	9b07      	ldr	r3, [sp, #28]
 800c070:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c072:	9e00      	ldr	r6, [sp, #0]
 800c074:	ea42 0103 	orr.w	r1, r2, r3
 800c078:	9b06      	ldr	r3, [sp, #24]
 800c07a:	4319      	orrs	r1, r3
 800c07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c07e:	d10d      	bne.n	800c09c <_dtoa_r+0xa44>
 800c080:	2b39      	cmp	r3, #57	@ 0x39
 800c082:	d027      	beq.n	800c0d4 <_dtoa_r+0xa7c>
 800c084:	9a04      	ldr	r2, [sp, #16]
 800c086:	2a00      	cmp	r2, #0
 800c088:	dd01      	ble.n	800c08e <_dtoa_r+0xa36>
 800c08a:	9b03      	ldr	r3, [sp, #12]
 800c08c:	3331      	adds	r3, #49	@ 0x31
 800c08e:	f88b 3000 	strb.w	r3, [fp]
 800c092:	e52e      	b.n	800baf2 <_dtoa_r+0x49a>
 800c094:	4628      	mov	r0, r5
 800c096:	e7b9      	b.n	800c00c <_dtoa_r+0x9b4>
 800c098:	2201      	movs	r2, #1
 800c09a:	e7e2      	b.n	800c062 <_dtoa_r+0xa0a>
 800c09c:	9904      	ldr	r1, [sp, #16]
 800c09e:	2900      	cmp	r1, #0
 800c0a0:	db04      	blt.n	800c0ac <_dtoa_r+0xa54>
 800c0a2:	9807      	ldr	r0, [sp, #28]
 800c0a4:	4301      	orrs	r1, r0
 800c0a6:	9806      	ldr	r0, [sp, #24]
 800c0a8:	4301      	orrs	r1, r0
 800c0aa:	d120      	bne.n	800c0ee <_dtoa_r+0xa96>
 800c0ac:	2a00      	cmp	r2, #0
 800c0ae:	ddee      	ble.n	800c08e <_dtoa_r+0xa36>
 800c0b0:	9902      	ldr	r1, [sp, #8]
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	4648      	mov	r0, r9
 800c0b8:	f000 fba4 	bl	800c804 <__lshift>
 800c0bc:	4621      	mov	r1, r4
 800c0be:	9002      	str	r0, [sp, #8]
 800c0c0:	f000 fc0c 	bl	800c8dc <__mcmp>
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	9b00      	ldr	r3, [sp, #0]
 800c0c8:	dc02      	bgt.n	800c0d0 <_dtoa_r+0xa78>
 800c0ca:	d1e0      	bne.n	800c08e <_dtoa_r+0xa36>
 800c0cc:	07da      	lsls	r2, r3, #31
 800c0ce:	d5de      	bpl.n	800c08e <_dtoa_r+0xa36>
 800c0d0:	2b39      	cmp	r3, #57	@ 0x39
 800c0d2:	d1da      	bne.n	800c08a <_dtoa_r+0xa32>
 800c0d4:	2339      	movs	r3, #57	@ 0x39
 800c0d6:	f88b 3000 	strb.w	r3, [fp]
 800c0da:	4633      	mov	r3, r6
 800c0dc:	461e      	mov	r6, r3
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c0e4:	2a39      	cmp	r2, #57	@ 0x39
 800c0e6:	d04e      	beq.n	800c186 <_dtoa_r+0xb2e>
 800c0e8:	3201      	adds	r2, #1
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	e501      	b.n	800baf2 <_dtoa_r+0x49a>
 800c0ee:	2a00      	cmp	r2, #0
 800c0f0:	dd03      	ble.n	800c0fa <_dtoa_r+0xaa2>
 800c0f2:	2b39      	cmp	r3, #57	@ 0x39
 800c0f4:	d0ee      	beq.n	800c0d4 <_dtoa_r+0xa7c>
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	e7c9      	b.n	800c08e <_dtoa_r+0xa36>
 800c0fa:	9a00      	ldr	r2, [sp, #0]
 800c0fc:	9908      	ldr	r1, [sp, #32]
 800c0fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c102:	428a      	cmp	r2, r1
 800c104:	d028      	beq.n	800c158 <_dtoa_r+0xb00>
 800c106:	9902      	ldr	r1, [sp, #8]
 800c108:	2300      	movs	r3, #0
 800c10a:	220a      	movs	r2, #10
 800c10c:	4648      	mov	r0, r9
 800c10e:	f000 f9d5 	bl	800c4bc <__multadd>
 800c112:	42af      	cmp	r7, r5
 800c114:	9002      	str	r0, [sp, #8]
 800c116:	f04f 0300 	mov.w	r3, #0
 800c11a:	f04f 020a 	mov.w	r2, #10
 800c11e:	4639      	mov	r1, r7
 800c120:	4648      	mov	r0, r9
 800c122:	d107      	bne.n	800c134 <_dtoa_r+0xadc>
 800c124:	f000 f9ca 	bl	800c4bc <__multadd>
 800c128:	4607      	mov	r7, r0
 800c12a:	4605      	mov	r5, r0
 800c12c:	9b00      	ldr	r3, [sp, #0]
 800c12e:	3301      	adds	r3, #1
 800c130:	9300      	str	r3, [sp, #0]
 800c132:	e777      	b.n	800c024 <_dtoa_r+0x9cc>
 800c134:	f000 f9c2 	bl	800c4bc <__multadd>
 800c138:	4629      	mov	r1, r5
 800c13a:	4607      	mov	r7, r0
 800c13c:	2300      	movs	r3, #0
 800c13e:	220a      	movs	r2, #10
 800c140:	4648      	mov	r0, r9
 800c142:	f000 f9bb 	bl	800c4bc <__multadd>
 800c146:	4605      	mov	r5, r0
 800c148:	e7f0      	b.n	800c12c <_dtoa_r+0xad4>
 800c14a:	f1bb 0f00 	cmp.w	fp, #0
 800c14e:	bfcc      	ite	gt
 800c150:	465e      	movgt	r6, fp
 800c152:	2601      	movle	r6, #1
 800c154:	4456      	add	r6, sl
 800c156:	2700      	movs	r7, #0
 800c158:	9902      	ldr	r1, [sp, #8]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	2201      	movs	r2, #1
 800c15e:	4648      	mov	r0, r9
 800c160:	f000 fb50 	bl	800c804 <__lshift>
 800c164:	4621      	mov	r1, r4
 800c166:	9002      	str	r0, [sp, #8]
 800c168:	f000 fbb8 	bl	800c8dc <__mcmp>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	dcb4      	bgt.n	800c0da <_dtoa_r+0xa82>
 800c170:	d102      	bne.n	800c178 <_dtoa_r+0xb20>
 800c172:	9b00      	ldr	r3, [sp, #0]
 800c174:	07db      	lsls	r3, r3, #31
 800c176:	d4b0      	bmi.n	800c0da <_dtoa_r+0xa82>
 800c178:	4633      	mov	r3, r6
 800c17a:	461e      	mov	r6, r3
 800c17c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c180:	2a30      	cmp	r2, #48	@ 0x30
 800c182:	d0fa      	beq.n	800c17a <_dtoa_r+0xb22>
 800c184:	e4b5      	b.n	800baf2 <_dtoa_r+0x49a>
 800c186:	459a      	cmp	sl, r3
 800c188:	d1a8      	bne.n	800c0dc <_dtoa_r+0xa84>
 800c18a:	2331      	movs	r3, #49	@ 0x31
 800c18c:	f108 0801 	add.w	r8, r8, #1
 800c190:	f88a 3000 	strb.w	r3, [sl]
 800c194:	e4ad      	b.n	800baf2 <_dtoa_r+0x49a>
 800c196:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c198:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c1f4 <_dtoa_r+0xb9c>
 800c19c:	b11b      	cbz	r3, 800c1a6 <_dtoa_r+0xb4e>
 800c19e:	f10a 0308 	add.w	r3, sl, #8
 800c1a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c1a4:	6013      	str	r3, [r2, #0]
 800c1a6:	4650      	mov	r0, sl
 800c1a8:	b017      	add	sp, #92	@ 0x5c
 800c1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ae:	9b07      	ldr	r3, [sp, #28]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	f77f ae2e 	ble.w	800be12 <_dtoa_r+0x7ba>
 800c1b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1b8:	9308      	str	r3, [sp, #32]
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	e64d      	b.n	800be5a <_dtoa_r+0x802>
 800c1be:	f1bb 0f00 	cmp.w	fp, #0
 800c1c2:	f77f aed9 	ble.w	800bf78 <_dtoa_r+0x920>
 800c1c6:	4656      	mov	r6, sl
 800c1c8:	9802      	ldr	r0, [sp, #8]
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	f7ff f9b9 	bl	800b542 <quorem>
 800c1d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c1d4:	f806 3b01 	strb.w	r3, [r6], #1
 800c1d8:	eba6 020a 	sub.w	r2, r6, sl
 800c1dc:	4593      	cmp	fp, r2
 800c1de:	ddb4      	ble.n	800c14a <_dtoa_r+0xaf2>
 800c1e0:	9902      	ldr	r1, [sp, #8]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	220a      	movs	r2, #10
 800c1e6:	4648      	mov	r0, r9
 800c1e8:	f000 f968 	bl	800c4bc <__multadd>
 800c1ec:	9002      	str	r0, [sp, #8]
 800c1ee:	e7eb      	b.n	800c1c8 <_dtoa_r+0xb70>
 800c1f0:	0800df50 	.word	0x0800df50
 800c1f4:	0800ded4 	.word	0x0800ded4

0800c1f8 <_free_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4605      	mov	r5, r0
 800c1fc:	2900      	cmp	r1, #0
 800c1fe:	d041      	beq.n	800c284 <_free_r+0x8c>
 800c200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c204:	1f0c      	subs	r4, r1, #4
 800c206:	2b00      	cmp	r3, #0
 800c208:	bfb8      	it	lt
 800c20a:	18e4      	addlt	r4, r4, r3
 800c20c:	f000 f8e8 	bl	800c3e0 <__malloc_lock>
 800c210:	4a1d      	ldr	r2, [pc, #116]	@ (800c288 <_free_r+0x90>)
 800c212:	6813      	ldr	r3, [r2, #0]
 800c214:	b933      	cbnz	r3, 800c224 <_free_r+0x2c>
 800c216:	6063      	str	r3, [r4, #4]
 800c218:	6014      	str	r4, [r2, #0]
 800c21a:	4628      	mov	r0, r5
 800c21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c220:	f000 b8e4 	b.w	800c3ec <__malloc_unlock>
 800c224:	42a3      	cmp	r3, r4
 800c226:	d908      	bls.n	800c23a <_free_r+0x42>
 800c228:	6820      	ldr	r0, [r4, #0]
 800c22a:	1821      	adds	r1, r4, r0
 800c22c:	428b      	cmp	r3, r1
 800c22e:	bf01      	itttt	eq
 800c230:	6819      	ldreq	r1, [r3, #0]
 800c232:	685b      	ldreq	r3, [r3, #4]
 800c234:	1809      	addeq	r1, r1, r0
 800c236:	6021      	streq	r1, [r4, #0]
 800c238:	e7ed      	b.n	800c216 <_free_r+0x1e>
 800c23a:	461a      	mov	r2, r3
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	b10b      	cbz	r3, 800c244 <_free_r+0x4c>
 800c240:	42a3      	cmp	r3, r4
 800c242:	d9fa      	bls.n	800c23a <_free_r+0x42>
 800c244:	6811      	ldr	r1, [r2, #0]
 800c246:	1850      	adds	r0, r2, r1
 800c248:	42a0      	cmp	r0, r4
 800c24a:	d10b      	bne.n	800c264 <_free_r+0x6c>
 800c24c:	6820      	ldr	r0, [r4, #0]
 800c24e:	4401      	add	r1, r0
 800c250:	1850      	adds	r0, r2, r1
 800c252:	4283      	cmp	r3, r0
 800c254:	6011      	str	r1, [r2, #0]
 800c256:	d1e0      	bne.n	800c21a <_free_r+0x22>
 800c258:	6818      	ldr	r0, [r3, #0]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	6053      	str	r3, [r2, #4]
 800c25e:	4408      	add	r0, r1
 800c260:	6010      	str	r0, [r2, #0]
 800c262:	e7da      	b.n	800c21a <_free_r+0x22>
 800c264:	d902      	bls.n	800c26c <_free_r+0x74>
 800c266:	230c      	movs	r3, #12
 800c268:	602b      	str	r3, [r5, #0]
 800c26a:	e7d6      	b.n	800c21a <_free_r+0x22>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	1821      	adds	r1, r4, r0
 800c270:	428b      	cmp	r3, r1
 800c272:	bf04      	itt	eq
 800c274:	6819      	ldreq	r1, [r3, #0]
 800c276:	685b      	ldreq	r3, [r3, #4]
 800c278:	6063      	str	r3, [r4, #4]
 800c27a:	bf04      	itt	eq
 800c27c:	1809      	addeq	r1, r1, r0
 800c27e:	6021      	streq	r1, [r4, #0]
 800c280:	6054      	str	r4, [r2, #4]
 800c282:	e7ca      	b.n	800c21a <_free_r+0x22>
 800c284:	bd38      	pop	{r3, r4, r5, pc}
 800c286:	bf00      	nop
 800c288:	20000a64 	.word	0x20000a64

0800c28c <malloc>:
 800c28c:	4b02      	ldr	r3, [pc, #8]	@ (800c298 <malloc+0xc>)
 800c28e:	4601      	mov	r1, r0
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	f000 b825 	b.w	800c2e0 <_malloc_r>
 800c296:	bf00      	nop
 800c298:	2000001c 	.word	0x2000001c

0800c29c <sbrk_aligned>:
 800c29c:	b570      	push	{r4, r5, r6, lr}
 800c29e:	4e0f      	ldr	r6, [pc, #60]	@ (800c2dc <sbrk_aligned+0x40>)
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	6831      	ldr	r1, [r6, #0]
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	b911      	cbnz	r1, 800c2ae <sbrk_aligned+0x12>
 800c2a8:	f000 fe3e 	bl	800cf28 <_sbrk_r>
 800c2ac:	6030      	str	r0, [r6, #0]
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f000 fe39 	bl	800cf28 <_sbrk_r>
 800c2b6:	1c43      	adds	r3, r0, #1
 800c2b8:	d103      	bne.n	800c2c2 <sbrk_aligned+0x26>
 800c2ba:	f04f 34ff 	mov.w	r4, #4294967295
 800c2be:	4620      	mov	r0, r4
 800c2c0:	bd70      	pop	{r4, r5, r6, pc}
 800c2c2:	1cc4      	adds	r4, r0, #3
 800c2c4:	f024 0403 	bic.w	r4, r4, #3
 800c2c8:	42a0      	cmp	r0, r4
 800c2ca:	d0f8      	beq.n	800c2be <sbrk_aligned+0x22>
 800c2cc:	1a21      	subs	r1, r4, r0
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	f000 fe2a 	bl	800cf28 <_sbrk_r>
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	d1f2      	bne.n	800c2be <sbrk_aligned+0x22>
 800c2d8:	e7ef      	b.n	800c2ba <sbrk_aligned+0x1e>
 800c2da:	bf00      	nop
 800c2dc:	20000a60 	.word	0x20000a60

0800c2e0 <_malloc_r>:
 800c2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e4:	1ccd      	adds	r5, r1, #3
 800c2e6:	f025 0503 	bic.w	r5, r5, #3
 800c2ea:	3508      	adds	r5, #8
 800c2ec:	2d0c      	cmp	r5, #12
 800c2ee:	bf38      	it	cc
 800c2f0:	250c      	movcc	r5, #12
 800c2f2:	2d00      	cmp	r5, #0
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	db01      	blt.n	800c2fc <_malloc_r+0x1c>
 800c2f8:	42a9      	cmp	r1, r5
 800c2fa:	d904      	bls.n	800c306 <_malloc_r+0x26>
 800c2fc:	230c      	movs	r3, #12
 800c2fe:	6033      	str	r3, [r6, #0]
 800c300:	2000      	movs	r0, #0
 800c302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3dc <_malloc_r+0xfc>
 800c30a:	f000 f869 	bl	800c3e0 <__malloc_lock>
 800c30e:	f8d8 3000 	ldr.w	r3, [r8]
 800c312:	461c      	mov	r4, r3
 800c314:	bb44      	cbnz	r4, 800c368 <_malloc_r+0x88>
 800c316:	4629      	mov	r1, r5
 800c318:	4630      	mov	r0, r6
 800c31a:	f7ff ffbf 	bl	800c29c <sbrk_aligned>
 800c31e:	1c43      	adds	r3, r0, #1
 800c320:	4604      	mov	r4, r0
 800c322:	d158      	bne.n	800c3d6 <_malloc_r+0xf6>
 800c324:	f8d8 4000 	ldr.w	r4, [r8]
 800c328:	4627      	mov	r7, r4
 800c32a:	2f00      	cmp	r7, #0
 800c32c:	d143      	bne.n	800c3b6 <_malloc_r+0xd6>
 800c32e:	2c00      	cmp	r4, #0
 800c330:	d04b      	beq.n	800c3ca <_malloc_r+0xea>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	4639      	mov	r1, r7
 800c336:	4630      	mov	r0, r6
 800c338:	eb04 0903 	add.w	r9, r4, r3
 800c33c:	f000 fdf4 	bl	800cf28 <_sbrk_r>
 800c340:	4581      	cmp	r9, r0
 800c342:	d142      	bne.n	800c3ca <_malloc_r+0xea>
 800c344:	6821      	ldr	r1, [r4, #0]
 800c346:	1a6d      	subs	r5, r5, r1
 800c348:	4629      	mov	r1, r5
 800c34a:	4630      	mov	r0, r6
 800c34c:	f7ff ffa6 	bl	800c29c <sbrk_aligned>
 800c350:	3001      	adds	r0, #1
 800c352:	d03a      	beq.n	800c3ca <_malloc_r+0xea>
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	442b      	add	r3, r5
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	f8d8 3000 	ldr.w	r3, [r8]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	bb62      	cbnz	r2, 800c3bc <_malloc_r+0xdc>
 800c362:	f8c8 7000 	str.w	r7, [r8]
 800c366:	e00f      	b.n	800c388 <_malloc_r+0xa8>
 800c368:	6822      	ldr	r2, [r4, #0]
 800c36a:	1b52      	subs	r2, r2, r5
 800c36c:	d420      	bmi.n	800c3b0 <_malloc_r+0xd0>
 800c36e:	2a0b      	cmp	r2, #11
 800c370:	d917      	bls.n	800c3a2 <_malloc_r+0xc2>
 800c372:	1961      	adds	r1, r4, r5
 800c374:	42a3      	cmp	r3, r4
 800c376:	6025      	str	r5, [r4, #0]
 800c378:	bf18      	it	ne
 800c37a:	6059      	strne	r1, [r3, #4]
 800c37c:	6863      	ldr	r3, [r4, #4]
 800c37e:	bf08      	it	eq
 800c380:	f8c8 1000 	streq.w	r1, [r8]
 800c384:	5162      	str	r2, [r4, r5]
 800c386:	604b      	str	r3, [r1, #4]
 800c388:	4630      	mov	r0, r6
 800c38a:	f000 f82f 	bl	800c3ec <__malloc_unlock>
 800c38e:	f104 000b 	add.w	r0, r4, #11
 800c392:	1d23      	adds	r3, r4, #4
 800c394:	f020 0007 	bic.w	r0, r0, #7
 800c398:	1ac2      	subs	r2, r0, r3
 800c39a:	bf1c      	itt	ne
 800c39c:	1a1b      	subne	r3, r3, r0
 800c39e:	50a3      	strne	r3, [r4, r2]
 800c3a0:	e7af      	b.n	800c302 <_malloc_r+0x22>
 800c3a2:	6862      	ldr	r2, [r4, #4]
 800c3a4:	42a3      	cmp	r3, r4
 800c3a6:	bf0c      	ite	eq
 800c3a8:	f8c8 2000 	streq.w	r2, [r8]
 800c3ac:	605a      	strne	r2, [r3, #4]
 800c3ae:	e7eb      	b.n	800c388 <_malloc_r+0xa8>
 800c3b0:	4623      	mov	r3, r4
 800c3b2:	6864      	ldr	r4, [r4, #4]
 800c3b4:	e7ae      	b.n	800c314 <_malloc_r+0x34>
 800c3b6:	463c      	mov	r4, r7
 800c3b8:	687f      	ldr	r7, [r7, #4]
 800c3ba:	e7b6      	b.n	800c32a <_malloc_r+0x4a>
 800c3bc:	461a      	mov	r2, r3
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	42a3      	cmp	r3, r4
 800c3c2:	d1fb      	bne.n	800c3bc <_malloc_r+0xdc>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	6053      	str	r3, [r2, #4]
 800c3c8:	e7de      	b.n	800c388 <_malloc_r+0xa8>
 800c3ca:	230c      	movs	r3, #12
 800c3cc:	6033      	str	r3, [r6, #0]
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f000 f80c 	bl	800c3ec <__malloc_unlock>
 800c3d4:	e794      	b.n	800c300 <_malloc_r+0x20>
 800c3d6:	6005      	str	r5, [r0, #0]
 800c3d8:	e7d6      	b.n	800c388 <_malloc_r+0xa8>
 800c3da:	bf00      	nop
 800c3dc:	20000a64 	.word	0x20000a64

0800c3e0 <__malloc_lock>:
 800c3e0:	4801      	ldr	r0, [pc, #4]	@ (800c3e8 <__malloc_lock+0x8>)
 800c3e2:	f7ff b8ac 	b.w	800b53e <__retarget_lock_acquire_recursive>
 800c3e6:	bf00      	nop
 800c3e8:	20000a5c 	.word	0x20000a5c

0800c3ec <__malloc_unlock>:
 800c3ec:	4801      	ldr	r0, [pc, #4]	@ (800c3f4 <__malloc_unlock+0x8>)
 800c3ee:	f7ff b8a7 	b.w	800b540 <__retarget_lock_release_recursive>
 800c3f2:	bf00      	nop
 800c3f4:	20000a5c 	.word	0x20000a5c

0800c3f8 <_Balloc>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	69c6      	ldr	r6, [r0, #28]
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	b976      	cbnz	r6, 800c420 <_Balloc+0x28>
 800c402:	2010      	movs	r0, #16
 800c404:	f7ff ff42 	bl	800c28c <malloc>
 800c408:	4602      	mov	r2, r0
 800c40a:	61e0      	str	r0, [r4, #28]
 800c40c:	b920      	cbnz	r0, 800c418 <_Balloc+0x20>
 800c40e:	4b18      	ldr	r3, [pc, #96]	@ (800c470 <_Balloc+0x78>)
 800c410:	4818      	ldr	r0, [pc, #96]	@ (800c474 <_Balloc+0x7c>)
 800c412:	216b      	movs	r1, #107	@ 0x6b
 800c414:	f000 fda6 	bl	800cf64 <__assert_func>
 800c418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c41c:	6006      	str	r6, [r0, #0]
 800c41e:	60c6      	str	r6, [r0, #12]
 800c420:	69e6      	ldr	r6, [r4, #28]
 800c422:	68f3      	ldr	r3, [r6, #12]
 800c424:	b183      	cbz	r3, 800c448 <_Balloc+0x50>
 800c426:	69e3      	ldr	r3, [r4, #28]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c42e:	b9b8      	cbnz	r0, 800c460 <_Balloc+0x68>
 800c430:	2101      	movs	r1, #1
 800c432:	fa01 f605 	lsl.w	r6, r1, r5
 800c436:	1d72      	adds	r2, r6, #5
 800c438:	0092      	lsls	r2, r2, #2
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 fdb0 	bl	800cfa0 <_calloc_r>
 800c440:	b160      	cbz	r0, 800c45c <_Balloc+0x64>
 800c442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c446:	e00e      	b.n	800c466 <_Balloc+0x6e>
 800c448:	2221      	movs	r2, #33	@ 0x21
 800c44a:	2104      	movs	r1, #4
 800c44c:	4620      	mov	r0, r4
 800c44e:	f000 fda7 	bl	800cfa0 <_calloc_r>
 800c452:	69e3      	ldr	r3, [r4, #28]
 800c454:	60f0      	str	r0, [r6, #12]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1e4      	bne.n	800c426 <_Balloc+0x2e>
 800c45c:	2000      	movs	r0, #0
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	6802      	ldr	r2, [r0, #0]
 800c462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c466:	2300      	movs	r3, #0
 800c468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c46c:	e7f7      	b.n	800c45e <_Balloc+0x66>
 800c46e:	bf00      	nop
 800c470:	0800dee1 	.word	0x0800dee1
 800c474:	0800df61 	.word	0x0800df61

0800c478 <_Bfree>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	69c6      	ldr	r6, [r0, #28]
 800c47c:	4605      	mov	r5, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	b976      	cbnz	r6, 800c4a0 <_Bfree+0x28>
 800c482:	2010      	movs	r0, #16
 800c484:	f7ff ff02 	bl	800c28c <malloc>
 800c488:	4602      	mov	r2, r0
 800c48a:	61e8      	str	r0, [r5, #28]
 800c48c:	b920      	cbnz	r0, 800c498 <_Bfree+0x20>
 800c48e:	4b09      	ldr	r3, [pc, #36]	@ (800c4b4 <_Bfree+0x3c>)
 800c490:	4809      	ldr	r0, [pc, #36]	@ (800c4b8 <_Bfree+0x40>)
 800c492:	218f      	movs	r1, #143	@ 0x8f
 800c494:	f000 fd66 	bl	800cf64 <__assert_func>
 800c498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c49c:	6006      	str	r6, [r0, #0]
 800c49e:	60c6      	str	r6, [r0, #12]
 800c4a0:	b13c      	cbz	r4, 800c4b2 <_Bfree+0x3a>
 800c4a2:	69eb      	ldr	r3, [r5, #28]
 800c4a4:	6862      	ldr	r2, [r4, #4]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4ac:	6021      	str	r1, [r4, #0]
 800c4ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
 800c4b4:	0800dee1 	.word	0x0800dee1
 800c4b8:	0800df61 	.word	0x0800df61

0800c4bc <__multadd>:
 800c4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c0:	690d      	ldr	r5, [r1, #16]
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	461e      	mov	r6, r3
 800c4c8:	f101 0c14 	add.w	ip, r1, #20
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	f8dc 3000 	ldr.w	r3, [ip]
 800c4d2:	b299      	uxth	r1, r3
 800c4d4:	fb02 6101 	mla	r1, r2, r1, r6
 800c4d8:	0c1e      	lsrs	r6, r3, #16
 800c4da:	0c0b      	lsrs	r3, r1, #16
 800c4dc:	fb02 3306 	mla	r3, r2, r6, r3
 800c4e0:	b289      	uxth	r1, r1
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4e8:	4285      	cmp	r5, r0
 800c4ea:	f84c 1b04 	str.w	r1, [ip], #4
 800c4ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4f2:	dcec      	bgt.n	800c4ce <__multadd+0x12>
 800c4f4:	b30e      	cbz	r6, 800c53a <__multadd+0x7e>
 800c4f6:	68a3      	ldr	r3, [r4, #8]
 800c4f8:	42ab      	cmp	r3, r5
 800c4fa:	dc19      	bgt.n	800c530 <__multadd+0x74>
 800c4fc:	6861      	ldr	r1, [r4, #4]
 800c4fe:	4638      	mov	r0, r7
 800c500:	3101      	adds	r1, #1
 800c502:	f7ff ff79 	bl	800c3f8 <_Balloc>
 800c506:	4680      	mov	r8, r0
 800c508:	b928      	cbnz	r0, 800c516 <__multadd+0x5a>
 800c50a:	4602      	mov	r2, r0
 800c50c:	4b0c      	ldr	r3, [pc, #48]	@ (800c540 <__multadd+0x84>)
 800c50e:	480d      	ldr	r0, [pc, #52]	@ (800c544 <__multadd+0x88>)
 800c510:	21ba      	movs	r1, #186	@ 0xba
 800c512:	f000 fd27 	bl	800cf64 <__assert_func>
 800c516:	6922      	ldr	r2, [r4, #16]
 800c518:	3202      	adds	r2, #2
 800c51a:	f104 010c 	add.w	r1, r4, #12
 800c51e:	0092      	lsls	r2, r2, #2
 800c520:	300c      	adds	r0, #12
 800c522:	f000 fd11 	bl	800cf48 <memcpy>
 800c526:	4621      	mov	r1, r4
 800c528:	4638      	mov	r0, r7
 800c52a:	f7ff ffa5 	bl	800c478 <_Bfree>
 800c52e:	4644      	mov	r4, r8
 800c530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c534:	3501      	adds	r5, #1
 800c536:	615e      	str	r6, [r3, #20]
 800c538:	6125      	str	r5, [r4, #16]
 800c53a:	4620      	mov	r0, r4
 800c53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c540:	0800df50 	.word	0x0800df50
 800c544:	0800df61 	.word	0x0800df61

0800c548 <__hi0bits>:
 800c548:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c54c:	4603      	mov	r3, r0
 800c54e:	bf36      	itet	cc
 800c550:	0403      	lslcc	r3, r0, #16
 800c552:	2000      	movcs	r0, #0
 800c554:	2010      	movcc	r0, #16
 800c556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c55a:	bf3c      	itt	cc
 800c55c:	021b      	lslcc	r3, r3, #8
 800c55e:	3008      	addcc	r0, #8
 800c560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c564:	bf3c      	itt	cc
 800c566:	011b      	lslcc	r3, r3, #4
 800c568:	3004      	addcc	r0, #4
 800c56a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c56e:	bf3c      	itt	cc
 800c570:	009b      	lslcc	r3, r3, #2
 800c572:	3002      	addcc	r0, #2
 800c574:	2b00      	cmp	r3, #0
 800c576:	db05      	blt.n	800c584 <__hi0bits+0x3c>
 800c578:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c57c:	f100 0001 	add.w	r0, r0, #1
 800c580:	bf08      	it	eq
 800c582:	2020      	moveq	r0, #32
 800c584:	4770      	bx	lr

0800c586 <__lo0bits>:
 800c586:	6803      	ldr	r3, [r0, #0]
 800c588:	4602      	mov	r2, r0
 800c58a:	f013 0007 	ands.w	r0, r3, #7
 800c58e:	d00b      	beq.n	800c5a8 <__lo0bits+0x22>
 800c590:	07d9      	lsls	r1, r3, #31
 800c592:	d421      	bmi.n	800c5d8 <__lo0bits+0x52>
 800c594:	0798      	lsls	r0, r3, #30
 800c596:	bf49      	itett	mi
 800c598:	085b      	lsrmi	r3, r3, #1
 800c59a:	089b      	lsrpl	r3, r3, #2
 800c59c:	2001      	movmi	r0, #1
 800c59e:	6013      	strmi	r3, [r2, #0]
 800c5a0:	bf5c      	itt	pl
 800c5a2:	6013      	strpl	r3, [r2, #0]
 800c5a4:	2002      	movpl	r0, #2
 800c5a6:	4770      	bx	lr
 800c5a8:	b299      	uxth	r1, r3
 800c5aa:	b909      	cbnz	r1, 800c5b0 <__lo0bits+0x2a>
 800c5ac:	0c1b      	lsrs	r3, r3, #16
 800c5ae:	2010      	movs	r0, #16
 800c5b0:	b2d9      	uxtb	r1, r3
 800c5b2:	b909      	cbnz	r1, 800c5b8 <__lo0bits+0x32>
 800c5b4:	3008      	adds	r0, #8
 800c5b6:	0a1b      	lsrs	r3, r3, #8
 800c5b8:	0719      	lsls	r1, r3, #28
 800c5ba:	bf04      	itt	eq
 800c5bc:	091b      	lsreq	r3, r3, #4
 800c5be:	3004      	addeq	r0, #4
 800c5c0:	0799      	lsls	r1, r3, #30
 800c5c2:	bf04      	itt	eq
 800c5c4:	089b      	lsreq	r3, r3, #2
 800c5c6:	3002      	addeq	r0, #2
 800c5c8:	07d9      	lsls	r1, r3, #31
 800c5ca:	d403      	bmi.n	800c5d4 <__lo0bits+0x4e>
 800c5cc:	085b      	lsrs	r3, r3, #1
 800c5ce:	f100 0001 	add.w	r0, r0, #1
 800c5d2:	d003      	beq.n	800c5dc <__lo0bits+0x56>
 800c5d4:	6013      	str	r3, [r2, #0]
 800c5d6:	4770      	bx	lr
 800c5d8:	2000      	movs	r0, #0
 800c5da:	4770      	bx	lr
 800c5dc:	2020      	movs	r0, #32
 800c5de:	4770      	bx	lr

0800c5e0 <__i2b>:
 800c5e0:	b510      	push	{r4, lr}
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	f7ff ff07 	bl	800c3f8 <_Balloc>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	b928      	cbnz	r0, 800c5fa <__i2b+0x1a>
 800c5ee:	4b05      	ldr	r3, [pc, #20]	@ (800c604 <__i2b+0x24>)
 800c5f0:	4805      	ldr	r0, [pc, #20]	@ (800c608 <__i2b+0x28>)
 800c5f2:	f240 1145 	movw	r1, #325	@ 0x145
 800c5f6:	f000 fcb5 	bl	800cf64 <__assert_func>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	6144      	str	r4, [r0, #20]
 800c5fe:	6103      	str	r3, [r0, #16]
 800c600:	bd10      	pop	{r4, pc}
 800c602:	bf00      	nop
 800c604:	0800df50 	.word	0x0800df50
 800c608:	0800df61 	.word	0x0800df61

0800c60c <__multiply>:
 800c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c610:	4617      	mov	r7, r2
 800c612:	690a      	ldr	r2, [r1, #16]
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	429a      	cmp	r2, r3
 800c618:	bfa8      	it	ge
 800c61a:	463b      	movge	r3, r7
 800c61c:	4689      	mov	r9, r1
 800c61e:	bfa4      	itt	ge
 800c620:	460f      	movge	r7, r1
 800c622:	4699      	movge	r9, r3
 800c624:	693d      	ldr	r5, [r7, #16]
 800c626:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	6879      	ldr	r1, [r7, #4]
 800c62e:	eb05 060a 	add.w	r6, r5, sl
 800c632:	42b3      	cmp	r3, r6
 800c634:	b085      	sub	sp, #20
 800c636:	bfb8      	it	lt
 800c638:	3101      	addlt	r1, #1
 800c63a:	f7ff fedd 	bl	800c3f8 <_Balloc>
 800c63e:	b930      	cbnz	r0, 800c64e <__multiply+0x42>
 800c640:	4602      	mov	r2, r0
 800c642:	4b41      	ldr	r3, [pc, #260]	@ (800c748 <__multiply+0x13c>)
 800c644:	4841      	ldr	r0, [pc, #260]	@ (800c74c <__multiply+0x140>)
 800c646:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c64a:	f000 fc8b 	bl	800cf64 <__assert_func>
 800c64e:	f100 0414 	add.w	r4, r0, #20
 800c652:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c656:	4623      	mov	r3, r4
 800c658:	2200      	movs	r2, #0
 800c65a:	4573      	cmp	r3, lr
 800c65c:	d320      	bcc.n	800c6a0 <__multiply+0x94>
 800c65e:	f107 0814 	add.w	r8, r7, #20
 800c662:	f109 0114 	add.w	r1, r9, #20
 800c666:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c66a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c66e:	9302      	str	r3, [sp, #8]
 800c670:	1beb      	subs	r3, r5, r7
 800c672:	3b15      	subs	r3, #21
 800c674:	f023 0303 	bic.w	r3, r3, #3
 800c678:	3304      	adds	r3, #4
 800c67a:	3715      	adds	r7, #21
 800c67c:	42bd      	cmp	r5, r7
 800c67e:	bf38      	it	cc
 800c680:	2304      	movcc	r3, #4
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	9b02      	ldr	r3, [sp, #8]
 800c686:	9103      	str	r1, [sp, #12]
 800c688:	428b      	cmp	r3, r1
 800c68a:	d80c      	bhi.n	800c6a6 <__multiply+0x9a>
 800c68c:	2e00      	cmp	r6, #0
 800c68e:	dd03      	ble.n	800c698 <__multiply+0x8c>
 800c690:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c694:	2b00      	cmp	r3, #0
 800c696:	d055      	beq.n	800c744 <__multiply+0x138>
 800c698:	6106      	str	r6, [r0, #16]
 800c69a:	b005      	add	sp, #20
 800c69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a0:	f843 2b04 	str.w	r2, [r3], #4
 800c6a4:	e7d9      	b.n	800c65a <__multiply+0x4e>
 800c6a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c6aa:	f1ba 0f00 	cmp.w	sl, #0
 800c6ae:	d01f      	beq.n	800c6f0 <__multiply+0xe4>
 800c6b0:	46c4      	mov	ip, r8
 800c6b2:	46a1      	mov	r9, r4
 800c6b4:	2700      	movs	r7, #0
 800c6b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6ba:	f8d9 3000 	ldr.w	r3, [r9]
 800c6be:	fa1f fb82 	uxth.w	fp, r2
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c6c8:	443b      	add	r3, r7
 800c6ca:	f8d9 7000 	ldr.w	r7, [r9]
 800c6ce:	0c12      	lsrs	r2, r2, #16
 800c6d0:	0c3f      	lsrs	r7, r7, #16
 800c6d2:	fb0a 7202 	mla	r2, sl, r2, r7
 800c6d6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6e0:	4565      	cmp	r5, ip
 800c6e2:	f849 3b04 	str.w	r3, [r9], #4
 800c6e6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c6ea:	d8e4      	bhi.n	800c6b6 <__multiply+0xaa>
 800c6ec:	9b01      	ldr	r3, [sp, #4]
 800c6ee:	50e7      	str	r7, [r4, r3]
 800c6f0:	9b03      	ldr	r3, [sp, #12]
 800c6f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6f6:	3104      	adds	r1, #4
 800c6f8:	f1b9 0f00 	cmp.w	r9, #0
 800c6fc:	d020      	beq.n	800c740 <__multiply+0x134>
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	4647      	mov	r7, r8
 800c702:	46a4      	mov	ip, r4
 800c704:	f04f 0a00 	mov.w	sl, #0
 800c708:	f8b7 b000 	ldrh.w	fp, [r7]
 800c70c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c710:	fb09 220b 	mla	r2, r9, fp, r2
 800c714:	4452      	add	r2, sl
 800c716:	b29b      	uxth	r3, r3
 800c718:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c71c:	f84c 3b04 	str.w	r3, [ip], #4
 800c720:	f857 3b04 	ldr.w	r3, [r7], #4
 800c724:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c728:	f8bc 3000 	ldrh.w	r3, [ip]
 800c72c:	fb09 330a 	mla	r3, r9, sl, r3
 800c730:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c734:	42bd      	cmp	r5, r7
 800c736:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c73a:	d8e5      	bhi.n	800c708 <__multiply+0xfc>
 800c73c:	9a01      	ldr	r2, [sp, #4]
 800c73e:	50a3      	str	r3, [r4, r2]
 800c740:	3404      	adds	r4, #4
 800c742:	e79f      	b.n	800c684 <__multiply+0x78>
 800c744:	3e01      	subs	r6, #1
 800c746:	e7a1      	b.n	800c68c <__multiply+0x80>
 800c748:	0800df50 	.word	0x0800df50
 800c74c:	0800df61 	.word	0x0800df61

0800c750 <__pow5mult>:
 800c750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c754:	4615      	mov	r5, r2
 800c756:	f012 0203 	ands.w	r2, r2, #3
 800c75a:	4607      	mov	r7, r0
 800c75c:	460e      	mov	r6, r1
 800c75e:	d007      	beq.n	800c770 <__pow5mult+0x20>
 800c760:	4c25      	ldr	r4, [pc, #148]	@ (800c7f8 <__pow5mult+0xa8>)
 800c762:	3a01      	subs	r2, #1
 800c764:	2300      	movs	r3, #0
 800c766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c76a:	f7ff fea7 	bl	800c4bc <__multadd>
 800c76e:	4606      	mov	r6, r0
 800c770:	10ad      	asrs	r5, r5, #2
 800c772:	d03d      	beq.n	800c7f0 <__pow5mult+0xa0>
 800c774:	69fc      	ldr	r4, [r7, #28]
 800c776:	b97c      	cbnz	r4, 800c798 <__pow5mult+0x48>
 800c778:	2010      	movs	r0, #16
 800c77a:	f7ff fd87 	bl	800c28c <malloc>
 800c77e:	4602      	mov	r2, r0
 800c780:	61f8      	str	r0, [r7, #28]
 800c782:	b928      	cbnz	r0, 800c790 <__pow5mult+0x40>
 800c784:	4b1d      	ldr	r3, [pc, #116]	@ (800c7fc <__pow5mult+0xac>)
 800c786:	481e      	ldr	r0, [pc, #120]	@ (800c800 <__pow5mult+0xb0>)
 800c788:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c78c:	f000 fbea 	bl	800cf64 <__assert_func>
 800c790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c794:	6004      	str	r4, [r0, #0]
 800c796:	60c4      	str	r4, [r0, #12]
 800c798:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c79c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7a0:	b94c      	cbnz	r4, 800c7b6 <__pow5mult+0x66>
 800c7a2:	f240 2171 	movw	r1, #625	@ 0x271
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	f7ff ff1a 	bl	800c5e0 <__i2b>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	6003      	str	r3, [r0, #0]
 800c7b6:	f04f 0900 	mov.w	r9, #0
 800c7ba:	07eb      	lsls	r3, r5, #31
 800c7bc:	d50a      	bpl.n	800c7d4 <__pow5mult+0x84>
 800c7be:	4631      	mov	r1, r6
 800c7c0:	4622      	mov	r2, r4
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	f7ff ff22 	bl	800c60c <__multiply>
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4680      	mov	r8, r0
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f7ff fe53 	bl	800c478 <_Bfree>
 800c7d2:	4646      	mov	r6, r8
 800c7d4:	106d      	asrs	r5, r5, #1
 800c7d6:	d00b      	beq.n	800c7f0 <__pow5mult+0xa0>
 800c7d8:	6820      	ldr	r0, [r4, #0]
 800c7da:	b938      	cbnz	r0, 800c7ec <__pow5mult+0x9c>
 800c7dc:	4622      	mov	r2, r4
 800c7de:	4621      	mov	r1, r4
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	f7ff ff13 	bl	800c60c <__multiply>
 800c7e6:	6020      	str	r0, [r4, #0]
 800c7e8:	f8c0 9000 	str.w	r9, [r0]
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	e7e4      	b.n	800c7ba <__pow5mult+0x6a>
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f6:	bf00      	nop
 800c7f8:	0800e014 	.word	0x0800e014
 800c7fc:	0800dee1 	.word	0x0800dee1
 800c800:	0800df61 	.word	0x0800df61

0800c804 <__lshift>:
 800c804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c808:	460c      	mov	r4, r1
 800c80a:	6849      	ldr	r1, [r1, #4]
 800c80c:	6923      	ldr	r3, [r4, #16]
 800c80e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c812:	68a3      	ldr	r3, [r4, #8]
 800c814:	4607      	mov	r7, r0
 800c816:	4691      	mov	r9, r2
 800c818:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c81c:	f108 0601 	add.w	r6, r8, #1
 800c820:	42b3      	cmp	r3, r6
 800c822:	db0b      	blt.n	800c83c <__lshift+0x38>
 800c824:	4638      	mov	r0, r7
 800c826:	f7ff fde7 	bl	800c3f8 <_Balloc>
 800c82a:	4605      	mov	r5, r0
 800c82c:	b948      	cbnz	r0, 800c842 <__lshift+0x3e>
 800c82e:	4602      	mov	r2, r0
 800c830:	4b28      	ldr	r3, [pc, #160]	@ (800c8d4 <__lshift+0xd0>)
 800c832:	4829      	ldr	r0, [pc, #164]	@ (800c8d8 <__lshift+0xd4>)
 800c834:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c838:	f000 fb94 	bl	800cf64 <__assert_func>
 800c83c:	3101      	adds	r1, #1
 800c83e:	005b      	lsls	r3, r3, #1
 800c840:	e7ee      	b.n	800c820 <__lshift+0x1c>
 800c842:	2300      	movs	r3, #0
 800c844:	f100 0114 	add.w	r1, r0, #20
 800c848:	f100 0210 	add.w	r2, r0, #16
 800c84c:	4618      	mov	r0, r3
 800c84e:	4553      	cmp	r3, sl
 800c850:	db33      	blt.n	800c8ba <__lshift+0xb6>
 800c852:	6920      	ldr	r0, [r4, #16]
 800c854:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c858:	f104 0314 	add.w	r3, r4, #20
 800c85c:	f019 091f 	ands.w	r9, r9, #31
 800c860:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c864:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c868:	d02b      	beq.n	800c8c2 <__lshift+0xbe>
 800c86a:	f1c9 0e20 	rsb	lr, r9, #32
 800c86e:	468a      	mov	sl, r1
 800c870:	2200      	movs	r2, #0
 800c872:	6818      	ldr	r0, [r3, #0]
 800c874:	fa00 f009 	lsl.w	r0, r0, r9
 800c878:	4310      	orrs	r0, r2
 800c87a:	f84a 0b04 	str.w	r0, [sl], #4
 800c87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c882:	459c      	cmp	ip, r3
 800c884:	fa22 f20e 	lsr.w	r2, r2, lr
 800c888:	d8f3      	bhi.n	800c872 <__lshift+0x6e>
 800c88a:	ebac 0304 	sub.w	r3, ip, r4
 800c88e:	3b15      	subs	r3, #21
 800c890:	f023 0303 	bic.w	r3, r3, #3
 800c894:	3304      	adds	r3, #4
 800c896:	f104 0015 	add.w	r0, r4, #21
 800c89a:	4560      	cmp	r0, ip
 800c89c:	bf88      	it	hi
 800c89e:	2304      	movhi	r3, #4
 800c8a0:	50ca      	str	r2, [r1, r3]
 800c8a2:	b10a      	cbz	r2, 800c8a8 <__lshift+0xa4>
 800c8a4:	f108 0602 	add.w	r6, r8, #2
 800c8a8:	3e01      	subs	r6, #1
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	612e      	str	r6, [r5, #16]
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	f7ff fde2 	bl	800c478 <_Bfree>
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8be:	3301      	adds	r3, #1
 800c8c0:	e7c5      	b.n	800c84e <__lshift+0x4a>
 800c8c2:	3904      	subs	r1, #4
 800c8c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8cc:	459c      	cmp	ip, r3
 800c8ce:	d8f9      	bhi.n	800c8c4 <__lshift+0xc0>
 800c8d0:	e7ea      	b.n	800c8a8 <__lshift+0xa4>
 800c8d2:	bf00      	nop
 800c8d4:	0800df50 	.word	0x0800df50
 800c8d8:	0800df61 	.word	0x0800df61

0800c8dc <__mcmp>:
 800c8dc:	690a      	ldr	r2, [r1, #16]
 800c8de:	4603      	mov	r3, r0
 800c8e0:	6900      	ldr	r0, [r0, #16]
 800c8e2:	1a80      	subs	r0, r0, r2
 800c8e4:	b530      	push	{r4, r5, lr}
 800c8e6:	d10e      	bne.n	800c906 <__mcmp+0x2a>
 800c8e8:	3314      	adds	r3, #20
 800c8ea:	3114      	adds	r1, #20
 800c8ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8fc:	4295      	cmp	r5, r2
 800c8fe:	d003      	beq.n	800c908 <__mcmp+0x2c>
 800c900:	d205      	bcs.n	800c90e <__mcmp+0x32>
 800c902:	f04f 30ff 	mov.w	r0, #4294967295
 800c906:	bd30      	pop	{r4, r5, pc}
 800c908:	42a3      	cmp	r3, r4
 800c90a:	d3f3      	bcc.n	800c8f4 <__mcmp+0x18>
 800c90c:	e7fb      	b.n	800c906 <__mcmp+0x2a>
 800c90e:	2001      	movs	r0, #1
 800c910:	e7f9      	b.n	800c906 <__mcmp+0x2a>
	...

0800c914 <__mdiff>:
 800c914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c918:	4689      	mov	r9, r1
 800c91a:	4606      	mov	r6, r0
 800c91c:	4611      	mov	r1, r2
 800c91e:	4648      	mov	r0, r9
 800c920:	4614      	mov	r4, r2
 800c922:	f7ff ffdb 	bl	800c8dc <__mcmp>
 800c926:	1e05      	subs	r5, r0, #0
 800c928:	d112      	bne.n	800c950 <__mdiff+0x3c>
 800c92a:	4629      	mov	r1, r5
 800c92c:	4630      	mov	r0, r6
 800c92e:	f7ff fd63 	bl	800c3f8 <_Balloc>
 800c932:	4602      	mov	r2, r0
 800c934:	b928      	cbnz	r0, 800c942 <__mdiff+0x2e>
 800c936:	4b3f      	ldr	r3, [pc, #252]	@ (800ca34 <__mdiff+0x120>)
 800c938:	f240 2137 	movw	r1, #567	@ 0x237
 800c93c:	483e      	ldr	r0, [pc, #248]	@ (800ca38 <__mdiff+0x124>)
 800c93e:	f000 fb11 	bl	800cf64 <__assert_func>
 800c942:	2301      	movs	r3, #1
 800c944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c948:	4610      	mov	r0, r2
 800c94a:	b003      	add	sp, #12
 800c94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c950:	bfbc      	itt	lt
 800c952:	464b      	movlt	r3, r9
 800c954:	46a1      	movlt	r9, r4
 800c956:	4630      	mov	r0, r6
 800c958:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c95c:	bfba      	itte	lt
 800c95e:	461c      	movlt	r4, r3
 800c960:	2501      	movlt	r5, #1
 800c962:	2500      	movge	r5, #0
 800c964:	f7ff fd48 	bl	800c3f8 <_Balloc>
 800c968:	4602      	mov	r2, r0
 800c96a:	b918      	cbnz	r0, 800c974 <__mdiff+0x60>
 800c96c:	4b31      	ldr	r3, [pc, #196]	@ (800ca34 <__mdiff+0x120>)
 800c96e:	f240 2145 	movw	r1, #581	@ 0x245
 800c972:	e7e3      	b.n	800c93c <__mdiff+0x28>
 800c974:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c978:	6926      	ldr	r6, [r4, #16]
 800c97a:	60c5      	str	r5, [r0, #12]
 800c97c:	f109 0310 	add.w	r3, r9, #16
 800c980:	f109 0514 	add.w	r5, r9, #20
 800c984:	f104 0e14 	add.w	lr, r4, #20
 800c988:	f100 0b14 	add.w	fp, r0, #20
 800c98c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c990:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	46d9      	mov	r9, fp
 800c998:	f04f 0c00 	mov.w	ip, #0
 800c99c:	9b01      	ldr	r3, [sp, #4]
 800c99e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c9a6:	9301      	str	r3, [sp, #4]
 800c9a8:	fa1f f38a 	uxth.w	r3, sl
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	b283      	uxth	r3, r0
 800c9b0:	1acb      	subs	r3, r1, r3
 800c9b2:	0c00      	lsrs	r0, r0, #16
 800c9b4:	4463      	add	r3, ip
 800c9b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c9ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9c4:	4576      	cmp	r6, lr
 800c9c6:	f849 3b04 	str.w	r3, [r9], #4
 800c9ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9ce:	d8e5      	bhi.n	800c99c <__mdiff+0x88>
 800c9d0:	1b33      	subs	r3, r6, r4
 800c9d2:	3b15      	subs	r3, #21
 800c9d4:	f023 0303 	bic.w	r3, r3, #3
 800c9d8:	3415      	adds	r4, #21
 800c9da:	3304      	adds	r3, #4
 800c9dc:	42a6      	cmp	r6, r4
 800c9de:	bf38      	it	cc
 800c9e0:	2304      	movcc	r3, #4
 800c9e2:	441d      	add	r5, r3
 800c9e4:	445b      	add	r3, fp
 800c9e6:	461e      	mov	r6, r3
 800c9e8:	462c      	mov	r4, r5
 800c9ea:	4544      	cmp	r4, r8
 800c9ec:	d30e      	bcc.n	800ca0c <__mdiff+0xf8>
 800c9ee:	f108 0103 	add.w	r1, r8, #3
 800c9f2:	1b49      	subs	r1, r1, r5
 800c9f4:	f021 0103 	bic.w	r1, r1, #3
 800c9f8:	3d03      	subs	r5, #3
 800c9fa:	45a8      	cmp	r8, r5
 800c9fc:	bf38      	it	cc
 800c9fe:	2100      	movcc	r1, #0
 800ca00:	440b      	add	r3, r1
 800ca02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca06:	b191      	cbz	r1, 800ca2e <__mdiff+0x11a>
 800ca08:	6117      	str	r7, [r2, #16]
 800ca0a:	e79d      	b.n	800c948 <__mdiff+0x34>
 800ca0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca10:	46e6      	mov	lr, ip
 800ca12:	0c08      	lsrs	r0, r1, #16
 800ca14:	fa1c fc81 	uxtah	ip, ip, r1
 800ca18:	4471      	add	r1, lr
 800ca1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca1e:	b289      	uxth	r1, r1
 800ca20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca24:	f846 1b04 	str.w	r1, [r6], #4
 800ca28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca2c:	e7dd      	b.n	800c9ea <__mdiff+0xd6>
 800ca2e:	3f01      	subs	r7, #1
 800ca30:	e7e7      	b.n	800ca02 <__mdiff+0xee>
 800ca32:	bf00      	nop
 800ca34:	0800df50 	.word	0x0800df50
 800ca38:	0800df61 	.word	0x0800df61

0800ca3c <__d2b>:
 800ca3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca40:	460f      	mov	r7, r1
 800ca42:	2101      	movs	r1, #1
 800ca44:	ec59 8b10 	vmov	r8, r9, d0
 800ca48:	4616      	mov	r6, r2
 800ca4a:	f7ff fcd5 	bl	800c3f8 <_Balloc>
 800ca4e:	4604      	mov	r4, r0
 800ca50:	b930      	cbnz	r0, 800ca60 <__d2b+0x24>
 800ca52:	4602      	mov	r2, r0
 800ca54:	4b23      	ldr	r3, [pc, #140]	@ (800cae4 <__d2b+0xa8>)
 800ca56:	4824      	ldr	r0, [pc, #144]	@ (800cae8 <__d2b+0xac>)
 800ca58:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca5c:	f000 fa82 	bl	800cf64 <__assert_func>
 800ca60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca68:	b10d      	cbz	r5, 800ca6e <__d2b+0x32>
 800ca6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca6e:	9301      	str	r3, [sp, #4]
 800ca70:	f1b8 0300 	subs.w	r3, r8, #0
 800ca74:	d023      	beq.n	800cabe <__d2b+0x82>
 800ca76:	4668      	mov	r0, sp
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	f7ff fd84 	bl	800c586 <__lo0bits>
 800ca7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca82:	b1d0      	cbz	r0, 800caba <__d2b+0x7e>
 800ca84:	f1c0 0320 	rsb	r3, r0, #32
 800ca88:	fa02 f303 	lsl.w	r3, r2, r3
 800ca8c:	430b      	orrs	r3, r1
 800ca8e:	40c2      	lsrs	r2, r0
 800ca90:	6163      	str	r3, [r4, #20]
 800ca92:	9201      	str	r2, [sp, #4]
 800ca94:	9b01      	ldr	r3, [sp, #4]
 800ca96:	61a3      	str	r3, [r4, #24]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	bf0c      	ite	eq
 800ca9c:	2201      	moveq	r2, #1
 800ca9e:	2202      	movne	r2, #2
 800caa0:	6122      	str	r2, [r4, #16]
 800caa2:	b1a5      	cbz	r5, 800cace <__d2b+0x92>
 800caa4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800caa8:	4405      	add	r5, r0
 800caaa:	603d      	str	r5, [r7, #0]
 800caac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cab0:	6030      	str	r0, [r6, #0]
 800cab2:	4620      	mov	r0, r4
 800cab4:	b003      	add	sp, #12
 800cab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caba:	6161      	str	r1, [r4, #20]
 800cabc:	e7ea      	b.n	800ca94 <__d2b+0x58>
 800cabe:	a801      	add	r0, sp, #4
 800cac0:	f7ff fd61 	bl	800c586 <__lo0bits>
 800cac4:	9b01      	ldr	r3, [sp, #4]
 800cac6:	6163      	str	r3, [r4, #20]
 800cac8:	3020      	adds	r0, #32
 800caca:	2201      	movs	r2, #1
 800cacc:	e7e8      	b.n	800caa0 <__d2b+0x64>
 800cace:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cad2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cad6:	6038      	str	r0, [r7, #0]
 800cad8:	6918      	ldr	r0, [r3, #16]
 800cada:	f7ff fd35 	bl	800c548 <__hi0bits>
 800cade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cae2:	e7e5      	b.n	800cab0 <__d2b+0x74>
 800cae4:	0800df50 	.word	0x0800df50
 800cae8:	0800df61 	.word	0x0800df61

0800caec <__ssputs_r>:
 800caec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf0:	688e      	ldr	r6, [r1, #8]
 800caf2:	461f      	mov	r7, r3
 800caf4:	42be      	cmp	r6, r7
 800caf6:	680b      	ldr	r3, [r1, #0]
 800caf8:	4682      	mov	sl, r0
 800cafa:	460c      	mov	r4, r1
 800cafc:	4690      	mov	r8, r2
 800cafe:	d82d      	bhi.n	800cb5c <__ssputs_r+0x70>
 800cb00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb08:	d026      	beq.n	800cb58 <__ssputs_r+0x6c>
 800cb0a:	6965      	ldr	r5, [r4, #20]
 800cb0c:	6909      	ldr	r1, [r1, #16]
 800cb0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb12:	eba3 0901 	sub.w	r9, r3, r1
 800cb16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb1a:	1c7b      	adds	r3, r7, #1
 800cb1c:	444b      	add	r3, r9
 800cb1e:	106d      	asrs	r5, r5, #1
 800cb20:	429d      	cmp	r5, r3
 800cb22:	bf38      	it	cc
 800cb24:	461d      	movcc	r5, r3
 800cb26:	0553      	lsls	r3, r2, #21
 800cb28:	d527      	bpl.n	800cb7a <__ssputs_r+0x8e>
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	f7ff fbd8 	bl	800c2e0 <_malloc_r>
 800cb30:	4606      	mov	r6, r0
 800cb32:	b360      	cbz	r0, 800cb8e <__ssputs_r+0xa2>
 800cb34:	6921      	ldr	r1, [r4, #16]
 800cb36:	464a      	mov	r2, r9
 800cb38:	f000 fa06 	bl	800cf48 <memcpy>
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb46:	81a3      	strh	r3, [r4, #12]
 800cb48:	6126      	str	r6, [r4, #16]
 800cb4a:	6165      	str	r5, [r4, #20]
 800cb4c:	444e      	add	r6, r9
 800cb4e:	eba5 0509 	sub.w	r5, r5, r9
 800cb52:	6026      	str	r6, [r4, #0]
 800cb54:	60a5      	str	r5, [r4, #8]
 800cb56:	463e      	mov	r6, r7
 800cb58:	42be      	cmp	r6, r7
 800cb5a:	d900      	bls.n	800cb5e <__ssputs_r+0x72>
 800cb5c:	463e      	mov	r6, r7
 800cb5e:	6820      	ldr	r0, [r4, #0]
 800cb60:	4632      	mov	r2, r6
 800cb62:	4641      	mov	r1, r8
 800cb64:	f000 f9c6 	bl	800cef4 <memmove>
 800cb68:	68a3      	ldr	r3, [r4, #8]
 800cb6a:	1b9b      	subs	r3, r3, r6
 800cb6c:	60a3      	str	r3, [r4, #8]
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	4433      	add	r3, r6
 800cb72:	6023      	str	r3, [r4, #0]
 800cb74:	2000      	movs	r0, #0
 800cb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7a:	462a      	mov	r2, r5
 800cb7c:	f000 fa36 	bl	800cfec <_realloc_r>
 800cb80:	4606      	mov	r6, r0
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d1e0      	bne.n	800cb48 <__ssputs_r+0x5c>
 800cb86:	6921      	ldr	r1, [r4, #16]
 800cb88:	4650      	mov	r0, sl
 800cb8a:	f7ff fb35 	bl	800c1f8 <_free_r>
 800cb8e:	230c      	movs	r3, #12
 800cb90:	f8ca 3000 	str.w	r3, [sl]
 800cb94:	89a3      	ldrh	r3, [r4, #12]
 800cb96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb9a:	81a3      	strh	r3, [r4, #12]
 800cb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cba0:	e7e9      	b.n	800cb76 <__ssputs_r+0x8a>
	...

0800cba4 <_svfiprintf_r>:
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	4698      	mov	r8, r3
 800cbaa:	898b      	ldrh	r3, [r1, #12]
 800cbac:	061b      	lsls	r3, r3, #24
 800cbae:	b09d      	sub	sp, #116	@ 0x74
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	d510      	bpl.n	800cbda <_svfiprintf_r+0x36>
 800cbb8:	690b      	ldr	r3, [r1, #16]
 800cbba:	b973      	cbnz	r3, 800cbda <_svfiprintf_r+0x36>
 800cbbc:	2140      	movs	r1, #64	@ 0x40
 800cbbe:	f7ff fb8f 	bl	800c2e0 <_malloc_r>
 800cbc2:	6028      	str	r0, [r5, #0]
 800cbc4:	6128      	str	r0, [r5, #16]
 800cbc6:	b930      	cbnz	r0, 800cbd6 <_svfiprintf_r+0x32>
 800cbc8:	230c      	movs	r3, #12
 800cbca:	603b      	str	r3, [r7, #0]
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd0:	b01d      	add	sp, #116	@ 0x74
 800cbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd6:	2340      	movs	r3, #64	@ 0x40
 800cbd8:	616b      	str	r3, [r5, #20]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbde:	2320      	movs	r3, #32
 800cbe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbe4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbe8:	2330      	movs	r3, #48	@ 0x30
 800cbea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd88 <_svfiprintf_r+0x1e4>
 800cbee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbf2:	f04f 0901 	mov.w	r9, #1
 800cbf6:	4623      	mov	r3, r4
 800cbf8:	469a      	mov	sl, r3
 800cbfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbfe:	b10a      	cbz	r2, 800cc04 <_svfiprintf_r+0x60>
 800cc00:	2a25      	cmp	r2, #37	@ 0x25
 800cc02:	d1f9      	bne.n	800cbf8 <_svfiprintf_r+0x54>
 800cc04:	ebba 0b04 	subs.w	fp, sl, r4
 800cc08:	d00b      	beq.n	800cc22 <_svfiprintf_r+0x7e>
 800cc0a:	465b      	mov	r3, fp
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4638      	mov	r0, r7
 800cc12:	f7ff ff6b 	bl	800caec <__ssputs_r>
 800cc16:	3001      	adds	r0, #1
 800cc18:	f000 80a7 	beq.w	800cd6a <_svfiprintf_r+0x1c6>
 800cc1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc1e:	445a      	add	r2, fp
 800cc20:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc22:	f89a 3000 	ldrb.w	r3, [sl]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 809f 	beq.w	800cd6a <_svfiprintf_r+0x1c6>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc36:	f10a 0a01 	add.w	sl, sl, #1
 800cc3a:	9304      	str	r3, [sp, #16]
 800cc3c:	9307      	str	r3, [sp, #28]
 800cc3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc42:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc44:	4654      	mov	r4, sl
 800cc46:	2205      	movs	r2, #5
 800cc48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc4c:	484e      	ldr	r0, [pc, #312]	@ (800cd88 <_svfiprintf_r+0x1e4>)
 800cc4e:	f7f3 fabf 	bl	80001d0 <memchr>
 800cc52:	9a04      	ldr	r2, [sp, #16]
 800cc54:	b9d8      	cbnz	r0, 800cc8e <_svfiprintf_r+0xea>
 800cc56:	06d0      	lsls	r0, r2, #27
 800cc58:	bf44      	itt	mi
 800cc5a:	2320      	movmi	r3, #32
 800cc5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc60:	0711      	lsls	r1, r2, #28
 800cc62:	bf44      	itt	mi
 800cc64:	232b      	movmi	r3, #43	@ 0x2b
 800cc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc70:	d015      	beq.n	800cc9e <_svfiprintf_r+0xfa>
 800cc72:	9a07      	ldr	r2, [sp, #28]
 800cc74:	4654      	mov	r4, sl
 800cc76:	2000      	movs	r0, #0
 800cc78:	f04f 0c0a 	mov.w	ip, #10
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc82:	3b30      	subs	r3, #48	@ 0x30
 800cc84:	2b09      	cmp	r3, #9
 800cc86:	d94b      	bls.n	800cd20 <_svfiprintf_r+0x17c>
 800cc88:	b1b0      	cbz	r0, 800ccb8 <_svfiprintf_r+0x114>
 800cc8a:	9207      	str	r2, [sp, #28]
 800cc8c:	e014      	b.n	800ccb8 <_svfiprintf_r+0x114>
 800cc8e:	eba0 0308 	sub.w	r3, r0, r8
 800cc92:	fa09 f303 	lsl.w	r3, r9, r3
 800cc96:	4313      	orrs	r3, r2
 800cc98:	9304      	str	r3, [sp, #16]
 800cc9a:	46a2      	mov	sl, r4
 800cc9c:	e7d2      	b.n	800cc44 <_svfiprintf_r+0xa0>
 800cc9e:	9b03      	ldr	r3, [sp, #12]
 800cca0:	1d19      	adds	r1, r3, #4
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	9103      	str	r1, [sp, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	bfbb      	ittet	lt
 800ccaa:	425b      	neglt	r3, r3
 800ccac:	f042 0202 	orrlt.w	r2, r2, #2
 800ccb0:	9307      	strge	r3, [sp, #28]
 800ccb2:	9307      	strlt	r3, [sp, #28]
 800ccb4:	bfb8      	it	lt
 800ccb6:	9204      	strlt	r2, [sp, #16]
 800ccb8:	7823      	ldrb	r3, [r4, #0]
 800ccba:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccbc:	d10a      	bne.n	800ccd4 <_svfiprintf_r+0x130>
 800ccbe:	7863      	ldrb	r3, [r4, #1]
 800ccc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccc2:	d132      	bne.n	800cd2a <_svfiprintf_r+0x186>
 800ccc4:	9b03      	ldr	r3, [sp, #12]
 800ccc6:	1d1a      	adds	r2, r3, #4
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	9203      	str	r2, [sp, #12]
 800cccc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccd0:	3402      	adds	r4, #2
 800ccd2:	9305      	str	r3, [sp, #20]
 800ccd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd98 <_svfiprintf_r+0x1f4>
 800ccd8:	7821      	ldrb	r1, [r4, #0]
 800ccda:	2203      	movs	r2, #3
 800ccdc:	4650      	mov	r0, sl
 800ccde:	f7f3 fa77 	bl	80001d0 <memchr>
 800cce2:	b138      	cbz	r0, 800ccf4 <_svfiprintf_r+0x150>
 800cce4:	9b04      	ldr	r3, [sp, #16]
 800cce6:	eba0 000a 	sub.w	r0, r0, sl
 800ccea:	2240      	movs	r2, #64	@ 0x40
 800ccec:	4082      	lsls	r2, r0
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	3401      	adds	r4, #1
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf8:	4824      	ldr	r0, [pc, #144]	@ (800cd8c <_svfiprintf_r+0x1e8>)
 800ccfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccfe:	2206      	movs	r2, #6
 800cd00:	f7f3 fa66 	bl	80001d0 <memchr>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d036      	beq.n	800cd76 <_svfiprintf_r+0x1d2>
 800cd08:	4b21      	ldr	r3, [pc, #132]	@ (800cd90 <_svfiprintf_r+0x1ec>)
 800cd0a:	bb1b      	cbnz	r3, 800cd54 <_svfiprintf_r+0x1b0>
 800cd0c:	9b03      	ldr	r3, [sp, #12]
 800cd0e:	3307      	adds	r3, #7
 800cd10:	f023 0307 	bic.w	r3, r3, #7
 800cd14:	3308      	adds	r3, #8
 800cd16:	9303      	str	r3, [sp, #12]
 800cd18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd1a:	4433      	add	r3, r6
 800cd1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd1e:	e76a      	b.n	800cbf6 <_svfiprintf_r+0x52>
 800cd20:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd24:	460c      	mov	r4, r1
 800cd26:	2001      	movs	r0, #1
 800cd28:	e7a8      	b.n	800cc7c <_svfiprintf_r+0xd8>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	3401      	adds	r4, #1
 800cd2e:	9305      	str	r3, [sp, #20]
 800cd30:	4619      	mov	r1, r3
 800cd32:	f04f 0c0a 	mov.w	ip, #10
 800cd36:	4620      	mov	r0, r4
 800cd38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd3c:	3a30      	subs	r2, #48	@ 0x30
 800cd3e:	2a09      	cmp	r2, #9
 800cd40:	d903      	bls.n	800cd4a <_svfiprintf_r+0x1a6>
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d0c6      	beq.n	800ccd4 <_svfiprintf_r+0x130>
 800cd46:	9105      	str	r1, [sp, #20]
 800cd48:	e7c4      	b.n	800ccd4 <_svfiprintf_r+0x130>
 800cd4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd4e:	4604      	mov	r4, r0
 800cd50:	2301      	movs	r3, #1
 800cd52:	e7f0      	b.n	800cd36 <_svfiprintf_r+0x192>
 800cd54:	ab03      	add	r3, sp, #12
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	462a      	mov	r2, r5
 800cd5a:	4b0e      	ldr	r3, [pc, #56]	@ (800cd94 <_svfiprintf_r+0x1f0>)
 800cd5c:	a904      	add	r1, sp, #16
 800cd5e:	4638      	mov	r0, r7
 800cd60:	f7fd fe7e 	bl	800aa60 <_printf_float>
 800cd64:	1c42      	adds	r2, r0, #1
 800cd66:	4606      	mov	r6, r0
 800cd68:	d1d6      	bne.n	800cd18 <_svfiprintf_r+0x174>
 800cd6a:	89ab      	ldrh	r3, [r5, #12]
 800cd6c:	065b      	lsls	r3, r3, #25
 800cd6e:	f53f af2d 	bmi.w	800cbcc <_svfiprintf_r+0x28>
 800cd72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd74:	e72c      	b.n	800cbd0 <_svfiprintf_r+0x2c>
 800cd76:	ab03      	add	r3, sp, #12
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	4b05      	ldr	r3, [pc, #20]	@ (800cd94 <_svfiprintf_r+0x1f0>)
 800cd7e:	a904      	add	r1, sp, #16
 800cd80:	4638      	mov	r0, r7
 800cd82:	f7fe f905 	bl	800af90 <_printf_i>
 800cd86:	e7ed      	b.n	800cd64 <_svfiprintf_r+0x1c0>
 800cd88:	0800dfba 	.word	0x0800dfba
 800cd8c:	0800dfc4 	.word	0x0800dfc4
 800cd90:	0800aa61 	.word	0x0800aa61
 800cd94:	0800caed 	.word	0x0800caed
 800cd98:	0800dfc0 	.word	0x0800dfc0

0800cd9c <__sflush_r>:
 800cd9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda4:	0716      	lsls	r6, r2, #28
 800cda6:	4605      	mov	r5, r0
 800cda8:	460c      	mov	r4, r1
 800cdaa:	d454      	bmi.n	800ce56 <__sflush_r+0xba>
 800cdac:	684b      	ldr	r3, [r1, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dc02      	bgt.n	800cdb8 <__sflush_r+0x1c>
 800cdb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	dd48      	ble.n	800ce4a <__sflush_r+0xae>
 800cdb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdba:	2e00      	cmp	r6, #0
 800cdbc:	d045      	beq.n	800ce4a <__sflush_r+0xae>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cdc4:	682f      	ldr	r7, [r5, #0]
 800cdc6:	6a21      	ldr	r1, [r4, #32]
 800cdc8:	602b      	str	r3, [r5, #0]
 800cdca:	d030      	beq.n	800ce2e <__sflush_r+0x92>
 800cdcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cdce:	89a3      	ldrh	r3, [r4, #12]
 800cdd0:	0759      	lsls	r1, r3, #29
 800cdd2:	d505      	bpl.n	800cde0 <__sflush_r+0x44>
 800cdd4:	6863      	ldr	r3, [r4, #4]
 800cdd6:	1ad2      	subs	r2, r2, r3
 800cdd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cdda:	b10b      	cbz	r3, 800cde0 <__sflush_r+0x44>
 800cddc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cdde:	1ad2      	subs	r2, r2, r3
 800cde0:	2300      	movs	r3, #0
 800cde2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cde4:	6a21      	ldr	r1, [r4, #32]
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b0      	blx	r6
 800cdea:	1c43      	adds	r3, r0, #1
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	d106      	bne.n	800cdfe <__sflush_r+0x62>
 800cdf0:	6829      	ldr	r1, [r5, #0]
 800cdf2:	291d      	cmp	r1, #29
 800cdf4:	d82b      	bhi.n	800ce4e <__sflush_r+0xb2>
 800cdf6:	4a2a      	ldr	r2, [pc, #168]	@ (800cea0 <__sflush_r+0x104>)
 800cdf8:	40ca      	lsrs	r2, r1
 800cdfa:	07d6      	lsls	r6, r2, #31
 800cdfc:	d527      	bpl.n	800ce4e <__sflush_r+0xb2>
 800cdfe:	2200      	movs	r2, #0
 800ce00:	6062      	str	r2, [r4, #4]
 800ce02:	04d9      	lsls	r1, r3, #19
 800ce04:	6922      	ldr	r2, [r4, #16]
 800ce06:	6022      	str	r2, [r4, #0]
 800ce08:	d504      	bpl.n	800ce14 <__sflush_r+0x78>
 800ce0a:	1c42      	adds	r2, r0, #1
 800ce0c:	d101      	bne.n	800ce12 <__sflush_r+0x76>
 800ce0e:	682b      	ldr	r3, [r5, #0]
 800ce10:	b903      	cbnz	r3, 800ce14 <__sflush_r+0x78>
 800ce12:	6560      	str	r0, [r4, #84]	@ 0x54
 800ce14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce16:	602f      	str	r7, [r5, #0]
 800ce18:	b1b9      	cbz	r1, 800ce4a <__sflush_r+0xae>
 800ce1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce1e:	4299      	cmp	r1, r3
 800ce20:	d002      	beq.n	800ce28 <__sflush_r+0x8c>
 800ce22:	4628      	mov	r0, r5
 800ce24:	f7ff f9e8 	bl	800c1f8 <_free_r>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce2c:	e00d      	b.n	800ce4a <__sflush_r+0xae>
 800ce2e:	2301      	movs	r3, #1
 800ce30:	4628      	mov	r0, r5
 800ce32:	47b0      	blx	r6
 800ce34:	4602      	mov	r2, r0
 800ce36:	1c50      	adds	r0, r2, #1
 800ce38:	d1c9      	bne.n	800cdce <__sflush_r+0x32>
 800ce3a:	682b      	ldr	r3, [r5, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d0c6      	beq.n	800cdce <__sflush_r+0x32>
 800ce40:	2b1d      	cmp	r3, #29
 800ce42:	d001      	beq.n	800ce48 <__sflush_r+0xac>
 800ce44:	2b16      	cmp	r3, #22
 800ce46:	d11e      	bne.n	800ce86 <__sflush_r+0xea>
 800ce48:	602f      	str	r7, [r5, #0]
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	e022      	b.n	800ce94 <__sflush_r+0xf8>
 800ce4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce52:	b21b      	sxth	r3, r3
 800ce54:	e01b      	b.n	800ce8e <__sflush_r+0xf2>
 800ce56:	690f      	ldr	r7, [r1, #16]
 800ce58:	2f00      	cmp	r7, #0
 800ce5a:	d0f6      	beq.n	800ce4a <__sflush_r+0xae>
 800ce5c:	0793      	lsls	r3, r2, #30
 800ce5e:	680e      	ldr	r6, [r1, #0]
 800ce60:	bf08      	it	eq
 800ce62:	694b      	ldreq	r3, [r1, #20]
 800ce64:	600f      	str	r7, [r1, #0]
 800ce66:	bf18      	it	ne
 800ce68:	2300      	movne	r3, #0
 800ce6a:	eba6 0807 	sub.w	r8, r6, r7
 800ce6e:	608b      	str	r3, [r1, #8]
 800ce70:	f1b8 0f00 	cmp.w	r8, #0
 800ce74:	dde9      	ble.n	800ce4a <__sflush_r+0xae>
 800ce76:	6a21      	ldr	r1, [r4, #32]
 800ce78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce7a:	4643      	mov	r3, r8
 800ce7c:	463a      	mov	r2, r7
 800ce7e:	4628      	mov	r0, r5
 800ce80:	47b0      	blx	r6
 800ce82:	2800      	cmp	r0, #0
 800ce84:	dc08      	bgt.n	800ce98 <__sflush_r+0xfc>
 800ce86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce8e:	81a3      	strh	r3, [r4, #12]
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce98:	4407      	add	r7, r0
 800ce9a:	eba8 0800 	sub.w	r8, r8, r0
 800ce9e:	e7e7      	b.n	800ce70 <__sflush_r+0xd4>
 800cea0:	20400001 	.word	0x20400001

0800cea4 <_fflush_r>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	690b      	ldr	r3, [r1, #16]
 800cea8:	4605      	mov	r5, r0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	b913      	cbnz	r3, 800ceb4 <_fflush_r+0x10>
 800ceae:	2500      	movs	r5, #0
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	bd38      	pop	{r3, r4, r5, pc}
 800ceb4:	b118      	cbz	r0, 800cebe <_fflush_r+0x1a>
 800ceb6:	6a03      	ldr	r3, [r0, #32]
 800ceb8:	b90b      	cbnz	r3, 800cebe <_fflush_r+0x1a>
 800ceba:	f7fe fa13 	bl	800b2e4 <__sinit>
 800cebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d0f3      	beq.n	800ceae <_fflush_r+0xa>
 800cec6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cec8:	07d0      	lsls	r0, r2, #31
 800ceca:	d404      	bmi.n	800ced6 <_fflush_r+0x32>
 800cecc:	0599      	lsls	r1, r3, #22
 800cece:	d402      	bmi.n	800ced6 <_fflush_r+0x32>
 800ced0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ced2:	f7fe fb34 	bl	800b53e <__retarget_lock_acquire_recursive>
 800ced6:	4628      	mov	r0, r5
 800ced8:	4621      	mov	r1, r4
 800ceda:	f7ff ff5f 	bl	800cd9c <__sflush_r>
 800cede:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cee0:	07da      	lsls	r2, r3, #31
 800cee2:	4605      	mov	r5, r0
 800cee4:	d4e4      	bmi.n	800ceb0 <_fflush_r+0xc>
 800cee6:	89a3      	ldrh	r3, [r4, #12]
 800cee8:	059b      	lsls	r3, r3, #22
 800ceea:	d4e1      	bmi.n	800ceb0 <_fflush_r+0xc>
 800ceec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceee:	f7fe fb27 	bl	800b540 <__retarget_lock_release_recursive>
 800cef2:	e7dd      	b.n	800ceb0 <_fflush_r+0xc>

0800cef4 <memmove>:
 800cef4:	4288      	cmp	r0, r1
 800cef6:	b510      	push	{r4, lr}
 800cef8:	eb01 0402 	add.w	r4, r1, r2
 800cefc:	d902      	bls.n	800cf04 <memmove+0x10>
 800cefe:	4284      	cmp	r4, r0
 800cf00:	4623      	mov	r3, r4
 800cf02:	d807      	bhi.n	800cf14 <memmove+0x20>
 800cf04:	1e43      	subs	r3, r0, #1
 800cf06:	42a1      	cmp	r1, r4
 800cf08:	d008      	beq.n	800cf1c <memmove+0x28>
 800cf0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf12:	e7f8      	b.n	800cf06 <memmove+0x12>
 800cf14:	4402      	add	r2, r0
 800cf16:	4601      	mov	r1, r0
 800cf18:	428a      	cmp	r2, r1
 800cf1a:	d100      	bne.n	800cf1e <memmove+0x2a>
 800cf1c:	bd10      	pop	{r4, pc}
 800cf1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf26:	e7f7      	b.n	800cf18 <memmove+0x24>

0800cf28 <_sbrk_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4d06      	ldr	r5, [pc, #24]	@ (800cf44 <_sbrk_r+0x1c>)
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	4604      	mov	r4, r0
 800cf30:	4608      	mov	r0, r1
 800cf32:	602b      	str	r3, [r5, #0]
 800cf34:	f7f6 fa02 	bl	800333c <_sbrk>
 800cf38:	1c43      	adds	r3, r0, #1
 800cf3a:	d102      	bne.n	800cf42 <_sbrk_r+0x1a>
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	b103      	cbz	r3, 800cf42 <_sbrk_r+0x1a>
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	20000a58 	.word	0x20000a58

0800cf48 <memcpy>:
 800cf48:	440a      	add	r2, r1
 800cf4a:	4291      	cmp	r1, r2
 800cf4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf50:	d100      	bne.n	800cf54 <memcpy+0xc>
 800cf52:	4770      	bx	lr
 800cf54:	b510      	push	{r4, lr}
 800cf56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf5e:	4291      	cmp	r1, r2
 800cf60:	d1f9      	bne.n	800cf56 <memcpy+0xe>
 800cf62:	bd10      	pop	{r4, pc}

0800cf64 <__assert_func>:
 800cf64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf66:	4614      	mov	r4, r2
 800cf68:	461a      	mov	r2, r3
 800cf6a:	4b09      	ldr	r3, [pc, #36]	@ (800cf90 <__assert_func+0x2c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4605      	mov	r5, r0
 800cf70:	68d8      	ldr	r0, [r3, #12]
 800cf72:	b14c      	cbz	r4, 800cf88 <__assert_func+0x24>
 800cf74:	4b07      	ldr	r3, [pc, #28]	@ (800cf94 <__assert_func+0x30>)
 800cf76:	9100      	str	r1, [sp, #0]
 800cf78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf7c:	4906      	ldr	r1, [pc, #24]	@ (800cf98 <__assert_func+0x34>)
 800cf7e:	462b      	mov	r3, r5
 800cf80:	f000 f870 	bl	800d064 <fiprintf>
 800cf84:	f000 f880 	bl	800d088 <abort>
 800cf88:	4b04      	ldr	r3, [pc, #16]	@ (800cf9c <__assert_func+0x38>)
 800cf8a:	461c      	mov	r4, r3
 800cf8c:	e7f3      	b.n	800cf76 <__assert_func+0x12>
 800cf8e:	bf00      	nop
 800cf90:	2000001c 	.word	0x2000001c
 800cf94:	0800dfd5 	.word	0x0800dfd5
 800cf98:	0800dfe2 	.word	0x0800dfe2
 800cf9c:	0800e010 	.word	0x0800e010

0800cfa0 <_calloc_r>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	fba1 5402 	umull	r5, r4, r1, r2
 800cfa6:	b934      	cbnz	r4, 800cfb6 <_calloc_r+0x16>
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	f7ff f999 	bl	800c2e0 <_malloc_r>
 800cfae:	4606      	mov	r6, r0
 800cfb0:	b928      	cbnz	r0, 800cfbe <_calloc_r+0x1e>
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	bd70      	pop	{r4, r5, r6, pc}
 800cfb6:	220c      	movs	r2, #12
 800cfb8:	6002      	str	r2, [r0, #0]
 800cfba:	2600      	movs	r6, #0
 800cfbc:	e7f9      	b.n	800cfb2 <_calloc_r+0x12>
 800cfbe:	462a      	mov	r2, r5
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	f7fe fa3e 	bl	800b442 <memset>
 800cfc6:	e7f4      	b.n	800cfb2 <_calloc_r+0x12>

0800cfc8 <__ascii_mbtowc>:
 800cfc8:	b082      	sub	sp, #8
 800cfca:	b901      	cbnz	r1, 800cfce <__ascii_mbtowc+0x6>
 800cfcc:	a901      	add	r1, sp, #4
 800cfce:	b142      	cbz	r2, 800cfe2 <__ascii_mbtowc+0x1a>
 800cfd0:	b14b      	cbz	r3, 800cfe6 <__ascii_mbtowc+0x1e>
 800cfd2:	7813      	ldrb	r3, [r2, #0]
 800cfd4:	600b      	str	r3, [r1, #0]
 800cfd6:	7812      	ldrb	r2, [r2, #0]
 800cfd8:	1e10      	subs	r0, r2, #0
 800cfda:	bf18      	it	ne
 800cfdc:	2001      	movne	r0, #1
 800cfde:	b002      	add	sp, #8
 800cfe0:	4770      	bx	lr
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	e7fb      	b.n	800cfde <__ascii_mbtowc+0x16>
 800cfe6:	f06f 0001 	mvn.w	r0, #1
 800cfea:	e7f8      	b.n	800cfde <__ascii_mbtowc+0x16>

0800cfec <_realloc_r>:
 800cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff0:	4607      	mov	r7, r0
 800cff2:	4614      	mov	r4, r2
 800cff4:	460d      	mov	r5, r1
 800cff6:	b921      	cbnz	r1, 800d002 <_realloc_r+0x16>
 800cff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cffc:	4611      	mov	r1, r2
 800cffe:	f7ff b96f 	b.w	800c2e0 <_malloc_r>
 800d002:	b92a      	cbnz	r2, 800d010 <_realloc_r+0x24>
 800d004:	f7ff f8f8 	bl	800c1f8 <_free_r>
 800d008:	4625      	mov	r5, r4
 800d00a:	4628      	mov	r0, r5
 800d00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d010:	f000 f841 	bl	800d096 <_malloc_usable_size_r>
 800d014:	4284      	cmp	r4, r0
 800d016:	4606      	mov	r6, r0
 800d018:	d802      	bhi.n	800d020 <_realloc_r+0x34>
 800d01a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d01e:	d8f4      	bhi.n	800d00a <_realloc_r+0x1e>
 800d020:	4621      	mov	r1, r4
 800d022:	4638      	mov	r0, r7
 800d024:	f7ff f95c 	bl	800c2e0 <_malloc_r>
 800d028:	4680      	mov	r8, r0
 800d02a:	b908      	cbnz	r0, 800d030 <_realloc_r+0x44>
 800d02c:	4645      	mov	r5, r8
 800d02e:	e7ec      	b.n	800d00a <_realloc_r+0x1e>
 800d030:	42b4      	cmp	r4, r6
 800d032:	4622      	mov	r2, r4
 800d034:	4629      	mov	r1, r5
 800d036:	bf28      	it	cs
 800d038:	4632      	movcs	r2, r6
 800d03a:	f7ff ff85 	bl	800cf48 <memcpy>
 800d03e:	4629      	mov	r1, r5
 800d040:	4638      	mov	r0, r7
 800d042:	f7ff f8d9 	bl	800c1f8 <_free_r>
 800d046:	e7f1      	b.n	800d02c <_realloc_r+0x40>

0800d048 <__ascii_wctomb>:
 800d048:	4603      	mov	r3, r0
 800d04a:	4608      	mov	r0, r1
 800d04c:	b141      	cbz	r1, 800d060 <__ascii_wctomb+0x18>
 800d04e:	2aff      	cmp	r2, #255	@ 0xff
 800d050:	d904      	bls.n	800d05c <__ascii_wctomb+0x14>
 800d052:	228a      	movs	r2, #138	@ 0x8a
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	f04f 30ff 	mov.w	r0, #4294967295
 800d05a:	4770      	bx	lr
 800d05c:	700a      	strb	r2, [r1, #0]
 800d05e:	2001      	movs	r0, #1
 800d060:	4770      	bx	lr
	...

0800d064 <fiprintf>:
 800d064:	b40e      	push	{r1, r2, r3}
 800d066:	b503      	push	{r0, r1, lr}
 800d068:	4601      	mov	r1, r0
 800d06a:	ab03      	add	r3, sp, #12
 800d06c:	4805      	ldr	r0, [pc, #20]	@ (800d084 <fiprintf+0x20>)
 800d06e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d072:	6800      	ldr	r0, [r0, #0]
 800d074:	9301      	str	r3, [sp, #4]
 800d076:	f000 f83f 	bl	800d0f8 <_vfiprintf_r>
 800d07a:	b002      	add	sp, #8
 800d07c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d080:	b003      	add	sp, #12
 800d082:	4770      	bx	lr
 800d084:	2000001c 	.word	0x2000001c

0800d088 <abort>:
 800d088:	b508      	push	{r3, lr}
 800d08a:	2006      	movs	r0, #6
 800d08c:	f000 fa08 	bl	800d4a0 <raise>
 800d090:	2001      	movs	r0, #1
 800d092:	f7f6 f8db 	bl	800324c <_exit>

0800d096 <_malloc_usable_size_r>:
 800d096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d09a:	1f18      	subs	r0, r3, #4
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	bfbc      	itt	lt
 800d0a0:	580b      	ldrlt	r3, [r1, r0]
 800d0a2:	18c0      	addlt	r0, r0, r3
 800d0a4:	4770      	bx	lr

0800d0a6 <__sfputc_r>:
 800d0a6:	6893      	ldr	r3, [r2, #8]
 800d0a8:	3b01      	subs	r3, #1
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	b410      	push	{r4}
 800d0ae:	6093      	str	r3, [r2, #8]
 800d0b0:	da08      	bge.n	800d0c4 <__sfputc_r+0x1e>
 800d0b2:	6994      	ldr	r4, [r2, #24]
 800d0b4:	42a3      	cmp	r3, r4
 800d0b6:	db01      	blt.n	800d0bc <__sfputc_r+0x16>
 800d0b8:	290a      	cmp	r1, #10
 800d0ba:	d103      	bne.n	800d0c4 <__sfputc_r+0x1e>
 800d0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0c0:	f000 b932 	b.w	800d328 <__swbuf_r>
 800d0c4:	6813      	ldr	r3, [r2, #0]
 800d0c6:	1c58      	adds	r0, r3, #1
 800d0c8:	6010      	str	r0, [r2, #0]
 800d0ca:	7019      	strb	r1, [r3, #0]
 800d0cc:	4608      	mov	r0, r1
 800d0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <__sfputs_r>:
 800d0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d6:	4606      	mov	r6, r0
 800d0d8:	460f      	mov	r7, r1
 800d0da:	4614      	mov	r4, r2
 800d0dc:	18d5      	adds	r5, r2, r3
 800d0de:	42ac      	cmp	r4, r5
 800d0e0:	d101      	bne.n	800d0e6 <__sfputs_r+0x12>
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	e007      	b.n	800d0f6 <__sfputs_r+0x22>
 800d0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ea:	463a      	mov	r2, r7
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7ff ffda 	bl	800d0a6 <__sfputc_r>
 800d0f2:	1c43      	adds	r3, r0, #1
 800d0f4:	d1f3      	bne.n	800d0de <__sfputs_r+0xa>
 800d0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0f8 <_vfiprintf_r>:
 800d0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fc:	460d      	mov	r5, r1
 800d0fe:	b09d      	sub	sp, #116	@ 0x74
 800d100:	4614      	mov	r4, r2
 800d102:	4698      	mov	r8, r3
 800d104:	4606      	mov	r6, r0
 800d106:	b118      	cbz	r0, 800d110 <_vfiprintf_r+0x18>
 800d108:	6a03      	ldr	r3, [r0, #32]
 800d10a:	b90b      	cbnz	r3, 800d110 <_vfiprintf_r+0x18>
 800d10c:	f7fe f8ea 	bl	800b2e4 <__sinit>
 800d110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d112:	07d9      	lsls	r1, r3, #31
 800d114:	d405      	bmi.n	800d122 <_vfiprintf_r+0x2a>
 800d116:	89ab      	ldrh	r3, [r5, #12]
 800d118:	059a      	lsls	r2, r3, #22
 800d11a:	d402      	bmi.n	800d122 <_vfiprintf_r+0x2a>
 800d11c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d11e:	f7fe fa0e 	bl	800b53e <__retarget_lock_acquire_recursive>
 800d122:	89ab      	ldrh	r3, [r5, #12]
 800d124:	071b      	lsls	r3, r3, #28
 800d126:	d501      	bpl.n	800d12c <_vfiprintf_r+0x34>
 800d128:	692b      	ldr	r3, [r5, #16]
 800d12a:	b99b      	cbnz	r3, 800d154 <_vfiprintf_r+0x5c>
 800d12c:	4629      	mov	r1, r5
 800d12e:	4630      	mov	r0, r6
 800d130:	f000 f938 	bl	800d3a4 <__swsetup_r>
 800d134:	b170      	cbz	r0, 800d154 <_vfiprintf_r+0x5c>
 800d136:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d138:	07dc      	lsls	r4, r3, #31
 800d13a:	d504      	bpl.n	800d146 <_vfiprintf_r+0x4e>
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
 800d140:	b01d      	add	sp, #116	@ 0x74
 800d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d146:	89ab      	ldrh	r3, [r5, #12]
 800d148:	0598      	lsls	r0, r3, #22
 800d14a:	d4f7      	bmi.n	800d13c <_vfiprintf_r+0x44>
 800d14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d14e:	f7fe f9f7 	bl	800b540 <__retarget_lock_release_recursive>
 800d152:	e7f3      	b.n	800d13c <_vfiprintf_r+0x44>
 800d154:	2300      	movs	r3, #0
 800d156:	9309      	str	r3, [sp, #36]	@ 0x24
 800d158:	2320      	movs	r3, #32
 800d15a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d15e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d162:	2330      	movs	r3, #48	@ 0x30
 800d164:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d314 <_vfiprintf_r+0x21c>
 800d168:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d16c:	f04f 0901 	mov.w	r9, #1
 800d170:	4623      	mov	r3, r4
 800d172:	469a      	mov	sl, r3
 800d174:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d178:	b10a      	cbz	r2, 800d17e <_vfiprintf_r+0x86>
 800d17a:	2a25      	cmp	r2, #37	@ 0x25
 800d17c:	d1f9      	bne.n	800d172 <_vfiprintf_r+0x7a>
 800d17e:	ebba 0b04 	subs.w	fp, sl, r4
 800d182:	d00b      	beq.n	800d19c <_vfiprintf_r+0xa4>
 800d184:	465b      	mov	r3, fp
 800d186:	4622      	mov	r2, r4
 800d188:	4629      	mov	r1, r5
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7ff ffa2 	bl	800d0d4 <__sfputs_r>
 800d190:	3001      	adds	r0, #1
 800d192:	f000 80a7 	beq.w	800d2e4 <_vfiprintf_r+0x1ec>
 800d196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d198:	445a      	add	r2, fp
 800d19a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d19c:	f89a 3000 	ldrb.w	r3, [sl]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 809f 	beq.w	800d2e4 <_vfiprintf_r+0x1ec>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1b0:	f10a 0a01 	add.w	sl, sl, #1
 800d1b4:	9304      	str	r3, [sp, #16]
 800d1b6:	9307      	str	r3, [sp, #28]
 800d1b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1be:	4654      	mov	r4, sl
 800d1c0:	2205      	movs	r2, #5
 800d1c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c6:	4853      	ldr	r0, [pc, #332]	@ (800d314 <_vfiprintf_r+0x21c>)
 800d1c8:	f7f3 f802 	bl	80001d0 <memchr>
 800d1cc:	9a04      	ldr	r2, [sp, #16]
 800d1ce:	b9d8      	cbnz	r0, 800d208 <_vfiprintf_r+0x110>
 800d1d0:	06d1      	lsls	r1, r2, #27
 800d1d2:	bf44      	itt	mi
 800d1d4:	2320      	movmi	r3, #32
 800d1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1da:	0713      	lsls	r3, r2, #28
 800d1dc:	bf44      	itt	mi
 800d1de:	232b      	movmi	r3, #43	@ 0x2b
 800d1e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1ea:	d015      	beq.n	800d218 <_vfiprintf_r+0x120>
 800d1ec:	9a07      	ldr	r2, [sp, #28]
 800d1ee:	4654      	mov	r4, sl
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	f04f 0c0a 	mov.w	ip, #10
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1fc:	3b30      	subs	r3, #48	@ 0x30
 800d1fe:	2b09      	cmp	r3, #9
 800d200:	d94b      	bls.n	800d29a <_vfiprintf_r+0x1a2>
 800d202:	b1b0      	cbz	r0, 800d232 <_vfiprintf_r+0x13a>
 800d204:	9207      	str	r2, [sp, #28]
 800d206:	e014      	b.n	800d232 <_vfiprintf_r+0x13a>
 800d208:	eba0 0308 	sub.w	r3, r0, r8
 800d20c:	fa09 f303 	lsl.w	r3, r9, r3
 800d210:	4313      	orrs	r3, r2
 800d212:	9304      	str	r3, [sp, #16]
 800d214:	46a2      	mov	sl, r4
 800d216:	e7d2      	b.n	800d1be <_vfiprintf_r+0xc6>
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	1d19      	adds	r1, r3, #4
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	9103      	str	r1, [sp, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	bfbb      	ittet	lt
 800d224:	425b      	neglt	r3, r3
 800d226:	f042 0202 	orrlt.w	r2, r2, #2
 800d22a:	9307      	strge	r3, [sp, #28]
 800d22c:	9307      	strlt	r3, [sp, #28]
 800d22e:	bfb8      	it	lt
 800d230:	9204      	strlt	r2, [sp, #16]
 800d232:	7823      	ldrb	r3, [r4, #0]
 800d234:	2b2e      	cmp	r3, #46	@ 0x2e
 800d236:	d10a      	bne.n	800d24e <_vfiprintf_r+0x156>
 800d238:	7863      	ldrb	r3, [r4, #1]
 800d23a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d23c:	d132      	bne.n	800d2a4 <_vfiprintf_r+0x1ac>
 800d23e:	9b03      	ldr	r3, [sp, #12]
 800d240:	1d1a      	adds	r2, r3, #4
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	9203      	str	r2, [sp, #12]
 800d246:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d24a:	3402      	adds	r4, #2
 800d24c:	9305      	str	r3, [sp, #20]
 800d24e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d324 <_vfiprintf_r+0x22c>
 800d252:	7821      	ldrb	r1, [r4, #0]
 800d254:	2203      	movs	r2, #3
 800d256:	4650      	mov	r0, sl
 800d258:	f7f2 ffba 	bl	80001d0 <memchr>
 800d25c:	b138      	cbz	r0, 800d26e <_vfiprintf_r+0x176>
 800d25e:	9b04      	ldr	r3, [sp, #16]
 800d260:	eba0 000a 	sub.w	r0, r0, sl
 800d264:	2240      	movs	r2, #64	@ 0x40
 800d266:	4082      	lsls	r2, r0
 800d268:	4313      	orrs	r3, r2
 800d26a:	3401      	adds	r4, #1
 800d26c:	9304      	str	r3, [sp, #16]
 800d26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d272:	4829      	ldr	r0, [pc, #164]	@ (800d318 <_vfiprintf_r+0x220>)
 800d274:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d278:	2206      	movs	r2, #6
 800d27a:	f7f2 ffa9 	bl	80001d0 <memchr>
 800d27e:	2800      	cmp	r0, #0
 800d280:	d03f      	beq.n	800d302 <_vfiprintf_r+0x20a>
 800d282:	4b26      	ldr	r3, [pc, #152]	@ (800d31c <_vfiprintf_r+0x224>)
 800d284:	bb1b      	cbnz	r3, 800d2ce <_vfiprintf_r+0x1d6>
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	3307      	adds	r3, #7
 800d28a:	f023 0307 	bic.w	r3, r3, #7
 800d28e:	3308      	adds	r3, #8
 800d290:	9303      	str	r3, [sp, #12]
 800d292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d294:	443b      	add	r3, r7
 800d296:	9309      	str	r3, [sp, #36]	@ 0x24
 800d298:	e76a      	b.n	800d170 <_vfiprintf_r+0x78>
 800d29a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d29e:	460c      	mov	r4, r1
 800d2a0:	2001      	movs	r0, #1
 800d2a2:	e7a8      	b.n	800d1f6 <_vfiprintf_r+0xfe>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	3401      	adds	r4, #1
 800d2a8:	9305      	str	r3, [sp, #20]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	f04f 0c0a 	mov.w	ip, #10
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2b6:	3a30      	subs	r2, #48	@ 0x30
 800d2b8:	2a09      	cmp	r2, #9
 800d2ba:	d903      	bls.n	800d2c4 <_vfiprintf_r+0x1cc>
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d0c6      	beq.n	800d24e <_vfiprintf_r+0x156>
 800d2c0:	9105      	str	r1, [sp, #20]
 800d2c2:	e7c4      	b.n	800d24e <_vfiprintf_r+0x156>
 800d2c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e7f0      	b.n	800d2b0 <_vfiprintf_r+0x1b8>
 800d2ce:	ab03      	add	r3, sp, #12
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	462a      	mov	r2, r5
 800d2d4:	4b12      	ldr	r3, [pc, #72]	@ (800d320 <_vfiprintf_r+0x228>)
 800d2d6:	a904      	add	r1, sp, #16
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f7fd fbc1 	bl	800aa60 <_printf_float>
 800d2de:	4607      	mov	r7, r0
 800d2e0:	1c78      	adds	r0, r7, #1
 800d2e2:	d1d6      	bne.n	800d292 <_vfiprintf_r+0x19a>
 800d2e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2e6:	07d9      	lsls	r1, r3, #31
 800d2e8:	d405      	bmi.n	800d2f6 <_vfiprintf_r+0x1fe>
 800d2ea:	89ab      	ldrh	r3, [r5, #12]
 800d2ec:	059a      	lsls	r2, r3, #22
 800d2ee:	d402      	bmi.n	800d2f6 <_vfiprintf_r+0x1fe>
 800d2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2f2:	f7fe f925 	bl	800b540 <__retarget_lock_release_recursive>
 800d2f6:	89ab      	ldrh	r3, [r5, #12]
 800d2f8:	065b      	lsls	r3, r3, #25
 800d2fa:	f53f af1f 	bmi.w	800d13c <_vfiprintf_r+0x44>
 800d2fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d300:	e71e      	b.n	800d140 <_vfiprintf_r+0x48>
 800d302:	ab03      	add	r3, sp, #12
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	462a      	mov	r2, r5
 800d308:	4b05      	ldr	r3, [pc, #20]	@ (800d320 <_vfiprintf_r+0x228>)
 800d30a:	a904      	add	r1, sp, #16
 800d30c:	4630      	mov	r0, r6
 800d30e:	f7fd fe3f 	bl	800af90 <_printf_i>
 800d312:	e7e4      	b.n	800d2de <_vfiprintf_r+0x1e6>
 800d314:	0800dfba 	.word	0x0800dfba
 800d318:	0800dfc4 	.word	0x0800dfc4
 800d31c:	0800aa61 	.word	0x0800aa61
 800d320:	0800d0d5 	.word	0x0800d0d5
 800d324:	0800dfc0 	.word	0x0800dfc0

0800d328 <__swbuf_r>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	460e      	mov	r6, r1
 800d32c:	4614      	mov	r4, r2
 800d32e:	4605      	mov	r5, r0
 800d330:	b118      	cbz	r0, 800d33a <__swbuf_r+0x12>
 800d332:	6a03      	ldr	r3, [r0, #32]
 800d334:	b90b      	cbnz	r3, 800d33a <__swbuf_r+0x12>
 800d336:	f7fd ffd5 	bl	800b2e4 <__sinit>
 800d33a:	69a3      	ldr	r3, [r4, #24]
 800d33c:	60a3      	str	r3, [r4, #8]
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	071a      	lsls	r2, r3, #28
 800d342:	d501      	bpl.n	800d348 <__swbuf_r+0x20>
 800d344:	6923      	ldr	r3, [r4, #16]
 800d346:	b943      	cbnz	r3, 800d35a <__swbuf_r+0x32>
 800d348:	4621      	mov	r1, r4
 800d34a:	4628      	mov	r0, r5
 800d34c:	f000 f82a 	bl	800d3a4 <__swsetup_r>
 800d350:	b118      	cbz	r0, 800d35a <__swbuf_r+0x32>
 800d352:	f04f 37ff 	mov.w	r7, #4294967295
 800d356:	4638      	mov	r0, r7
 800d358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	6922      	ldr	r2, [r4, #16]
 800d35e:	1a98      	subs	r0, r3, r2
 800d360:	6963      	ldr	r3, [r4, #20]
 800d362:	b2f6      	uxtb	r6, r6
 800d364:	4283      	cmp	r3, r0
 800d366:	4637      	mov	r7, r6
 800d368:	dc05      	bgt.n	800d376 <__swbuf_r+0x4e>
 800d36a:	4621      	mov	r1, r4
 800d36c:	4628      	mov	r0, r5
 800d36e:	f7ff fd99 	bl	800cea4 <_fflush_r>
 800d372:	2800      	cmp	r0, #0
 800d374:	d1ed      	bne.n	800d352 <__swbuf_r+0x2a>
 800d376:	68a3      	ldr	r3, [r4, #8]
 800d378:	3b01      	subs	r3, #1
 800d37a:	60a3      	str	r3, [r4, #8]
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	1c5a      	adds	r2, r3, #1
 800d380:	6022      	str	r2, [r4, #0]
 800d382:	701e      	strb	r6, [r3, #0]
 800d384:	6962      	ldr	r2, [r4, #20]
 800d386:	1c43      	adds	r3, r0, #1
 800d388:	429a      	cmp	r2, r3
 800d38a:	d004      	beq.n	800d396 <__swbuf_r+0x6e>
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	07db      	lsls	r3, r3, #31
 800d390:	d5e1      	bpl.n	800d356 <__swbuf_r+0x2e>
 800d392:	2e0a      	cmp	r6, #10
 800d394:	d1df      	bne.n	800d356 <__swbuf_r+0x2e>
 800d396:	4621      	mov	r1, r4
 800d398:	4628      	mov	r0, r5
 800d39a:	f7ff fd83 	bl	800cea4 <_fflush_r>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d0d9      	beq.n	800d356 <__swbuf_r+0x2e>
 800d3a2:	e7d6      	b.n	800d352 <__swbuf_r+0x2a>

0800d3a4 <__swsetup_r>:
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	4b29      	ldr	r3, [pc, #164]	@ (800d44c <__swsetup_r+0xa8>)
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	6818      	ldr	r0, [r3, #0]
 800d3ac:	460c      	mov	r4, r1
 800d3ae:	b118      	cbz	r0, 800d3b8 <__swsetup_r+0x14>
 800d3b0:	6a03      	ldr	r3, [r0, #32]
 800d3b2:	b90b      	cbnz	r3, 800d3b8 <__swsetup_r+0x14>
 800d3b4:	f7fd ff96 	bl	800b2e4 <__sinit>
 800d3b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3bc:	0719      	lsls	r1, r3, #28
 800d3be:	d422      	bmi.n	800d406 <__swsetup_r+0x62>
 800d3c0:	06da      	lsls	r2, r3, #27
 800d3c2:	d407      	bmi.n	800d3d4 <__swsetup_r+0x30>
 800d3c4:	2209      	movs	r2, #9
 800d3c6:	602a      	str	r2, [r5, #0]
 800d3c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3cc:	81a3      	strh	r3, [r4, #12]
 800d3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d2:	e033      	b.n	800d43c <__swsetup_r+0x98>
 800d3d4:	0758      	lsls	r0, r3, #29
 800d3d6:	d512      	bpl.n	800d3fe <__swsetup_r+0x5a>
 800d3d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3da:	b141      	cbz	r1, 800d3ee <__swsetup_r+0x4a>
 800d3dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3e0:	4299      	cmp	r1, r3
 800d3e2:	d002      	beq.n	800d3ea <__swsetup_r+0x46>
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	f7fe ff07 	bl	800c1f8 <_free_r>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d3f4:	81a3      	strh	r3, [r4, #12]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	6063      	str	r3, [r4, #4]
 800d3fa:	6923      	ldr	r3, [r4, #16]
 800d3fc:	6023      	str	r3, [r4, #0]
 800d3fe:	89a3      	ldrh	r3, [r4, #12]
 800d400:	f043 0308 	orr.w	r3, r3, #8
 800d404:	81a3      	strh	r3, [r4, #12]
 800d406:	6923      	ldr	r3, [r4, #16]
 800d408:	b94b      	cbnz	r3, 800d41e <__swsetup_r+0x7a>
 800d40a:	89a3      	ldrh	r3, [r4, #12]
 800d40c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d414:	d003      	beq.n	800d41e <__swsetup_r+0x7a>
 800d416:	4621      	mov	r1, r4
 800d418:	4628      	mov	r0, r5
 800d41a:	f000 f883 	bl	800d524 <__smakebuf_r>
 800d41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d422:	f013 0201 	ands.w	r2, r3, #1
 800d426:	d00a      	beq.n	800d43e <__swsetup_r+0x9a>
 800d428:	2200      	movs	r2, #0
 800d42a:	60a2      	str	r2, [r4, #8]
 800d42c:	6962      	ldr	r2, [r4, #20]
 800d42e:	4252      	negs	r2, r2
 800d430:	61a2      	str	r2, [r4, #24]
 800d432:	6922      	ldr	r2, [r4, #16]
 800d434:	b942      	cbnz	r2, 800d448 <__swsetup_r+0xa4>
 800d436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d43a:	d1c5      	bne.n	800d3c8 <__swsetup_r+0x24>
 800d43c:	bd38      	pop	{r3, r4, r5, pc}
 800d43e:	0799      	lsls	r1, r3, #30
 800d440:	bf58      	it	pl
 800d442:	6962      	ldrpl	r2, [r4, #20]
 800d444:	60a2      	str	r2, [r4, #8]
 800d446:	e7f4      	b.n	800d432 <__swsetup_r+0x8e>
 800d448:	2000      	movs	r0, #0
 800d44a:	e7f7      	b.n	800d43c <__swsetup_r+0x98>
 800d44c:	2000001c 	.word	0x2000001c

0800d450 <_raise_r>:
 800d450:	291f      	cmp	r1, #31
 800d452:	b538      	push	{r3, r4, r5, lr}
 800d454:	4605      	mov	r5, r0
 800d456:	460c      	mov	r4, r1
 800d458:	d904      	bls.n	800d464 <_raise_r+0x14>
 800d45a:	2316      	movs	r3, #22
 800d45c:	6003      	str	r3, [r0, #0]
 800d45e:	f04f 30ff 	mov.w	r0, #4294967295
 800d462:	bd38      	pop	{r3, r4, r5, pc}
 800d464:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d466:	b112      	cbz	r2, 800d46e <_raise_r+0x1e>
 800d468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d46c:	b94b      	cbnz	r3, 800d482 <_raise_r+0x32>
 800d46e:	4628      	mov	r0, r5
 800d470:	f000 f830 	bl	800d4d4 <_getpid_r>
 800d474:	4622      	mov	r2, r4
 800d476:	4601      	mov	r1, r0
 800d478:	4628      	mov	r0, r5
 800d47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d47e:	f000 b817 	b.w	800d4b0 <_kill_r>
 800d482:	2b01      	cmp	r3, #1
 800d484:	d00a      	beq.n	800d49c <_raise_r+0x4c>
 800d486:	1c59      	adds	r1, r3, #1
 800d488:	d103      	bne.n	800d492 <_raise_r+0x42>
 800d48a:	2316      	movs	r3, #22
 800d48c:	6003      	str	r3, [r0, #0]
 800d48e:	2001      	movs	r0, #1
 800d490:	e7e7      	b.n	800d462 <_raise_r+0x12>
 800d492:	2100      	movs	r1, #0
 800d494:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d498:	4620      	mov	r0, r4
 800d49a:	4798      	blx	r3
 800d49c:	2000      	movs	r0, #0
 800d49e:	e7e0      	b.n	800d462 <_raise_r+0x12>

0800d4a0 <raise>:
 800d4a0:	4b02      	ldr	r3, [pc, #8]	@ (800d4ac <raise+0xc>)
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	6818      	ldr	r0, [r3, #0]
 800d4a6:	f7ff bfd3 	b.w	800d450 <_raise_r>
 800d4aa:	bf00      	nop
 800d4ac:	2000001c 	.word	0x2000001c

0800d4b0 <_kill_r>:
 800d4b0:	b538      	push	{r3, r4, r5, lr}
 800d4b2:	4d07      	ldr	r5, [pc, #28]	@ (800d4d0 <_kill_r+0x20>)
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	4608      	mov	r0, r1
 800d4ba:	4611      	mov	r1, r2
 800d4bc:	602b      	str	r3, [r5, #0]
 800d4be:	f7f5 feb5 	bl	800322c <_kill>
 800d4c2:	1c43      	adds	r3, r0, #1
 800d4c4:	d102      	bne.n	800d4cc <_kill_r+0x1c>
 800d4c6:	682b      	ldr	r3, [r5, #0]
 800d4c8:	b103      	cbz	r3, 800d4cc <_kill_r+0x1c>
 800d4ca:	6023      	str	r3, [r4, #0]
 800d4cc:	bd38      	pop	{r3, r4, r5, pc}
 800d4ce:	bf00      	nop
 800d4d0:	20000a58 	.word	0x20000a58

0800d4d4 <_getpid_r>:
 800d4d4:	f7f5 bea2 	b.w	800321c <_getpid>

0800d4d8 <__swhatbuf_r>:
 800d4d8:	b570      	push	{r4, r5, r6, lr}
 800d4da:	460c      	mov	r4, r1
 800d4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e0:	2900      	cmp	r1, #0
 800d4e2:	b096      	sub	sp, #88	@ 0x58
 800d4e4:	4615      	mov	r5, r2
 800d4e6:	461e      	mov	r6, r3
 800d4e8:	da0d      	bge.n	800d506 <__swhatbuf_r+0x2e>
 800d4ea:	89a3      	ldrh	r3, [r4, #12]
 800d4ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d4f0:	f04f 0100 	mov.w	r1, #0
 800d4f4:	bf14      	ite	ne
 800d4f6:	2340      	movne	r3, #64	@ 0x40
 800d4f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	6031      	str	r1, [r6, #0]
 800d500:	602b      	str	r3, [r5, #0]
 800d502:	b016      	add	sp, #88	@ 0x58
 800d504:	bd70      	pop	{r4, r5, r6, pc}
 800d506:	466a      	mov	r2, sp
 800d508:	f000 f848 	bl	800d59c <_fstat_r>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	dbec      	blt.n	800d4ea <__swhatbuf_r+0x12>
 800d510:	9901      	ldr	r1, [sp, #4]
 800d512:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d516:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d51a:	4259      	negs	r1, r3
 800d51c:	4159      	adcs	r1, r3
 800d51e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d522:	e7eb      	b.n	800d4fc <__swhatbuf_r+0x24>

0800d524 <__smakebuf_r>:
 800d524:	898b      	ldrh	r3, [r1, #12]
 800d526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d528:	079d      	lsls	r5, r3, #30
 800d52a:	4606      	mov	r6, r0
 800d52c:	460c      	mov	r4, r1
 800d52e:	d507      	bpl.n	800d540 <__smakebuf_r+0x1c>
 800d530:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	6123      	str	r3, [r4, #16]
 800d538:	2301      	movs	r3, #1
 800d53a:	6163      	str	r3, [r4, #20]
 800d53c:	b003      	add	sp, #12
 800d53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d540:	ab01      	add	r3, sp, #4
 800d542:	466a      	mov	r2, sp
 800d544:	f7ff ffc8 	bl	800d4d8 <__swhatbuf_r>
 800d548:	9f00      	ldr	r7, [sp, #0]
 800d54a:	4605      	mov	r5, r0
 800d54c:	4639      	mov	r1, r7
 800d54e:	4630      	mov	r0, r6
 800d550:	f7fe fec6 	bl	800c2e0 <_malloc_r>
 800d554:	b948      	cbnz	r0, 800d56a <__smakebuf_r+0x46>
 800d556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d55a:	059a      	lsls	r2, r3, #22
 800d55c:	d4ee      	bmi.n	800d53c <__smakebuf_r+0x18>
 800d55e:	f023 0303 	bic.w	r3, r3, #3
 800d562:	f043 0302 	orr.w	r3, r3, #2
 800d566:	81a3      	strh	r3, [r4, #12]
 800d568:	e7e2      	b.n	800d530 <__smakebuf_r+0xc>
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	6020      	str	r0, [r4, #0]
 800d56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d572:	81a3      	strh	r3, [r4, #12]
 800d574:	9b01      	ldr	r3, [sp, #4]
 800d576:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d57a:	b15b      	cbz	r3, 800d594 <__smakebuf_r+0x70>
 800d57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d580:	4630      	mov	r0, r6
 800d582:	f000 f81d 	bl	800d5c0 <_isatty_r>
 800d586:	b128      	cbz	r0, 800d594 <__smakebuf_r+0x70>
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	f023 0303 	bic.w	r3, r3, #3
 800d58e:	f043 0301 	orr.w	r3, r3, #1
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	89a3      	ldrh	r3, [r4, #12]
 800d596:	431d      	orrs	r5, r3
 800d598:	81a5      	strh	r5, [r4, #12]
 800d59a:	e7cf      	b.n	800d53c <__smakebuf_r+0x18>

0800d59c <_fstat_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4d07      	ldr	r5, [pc, #28]	@ (800d5bc <_fstat_r+0x20>)
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	602b      	str	r3, [r5, #0]
 800d5aa:	f7f5 fe9f 	bl	80032ec <_fstat>
 800d5ae:	1c43      	adds	r3, r0, #1
 800d5b0:	d102      	bne.n	800d5b8 <_fstat_r+0x1c>
 800d5b2:	682b      	ldr	r3, [r5, #0]
 800d5b4:	b103      	cbz	r3, 800d5b8 <_fstat_r+0x1c>
 800d5b6:	6023      	str	r3, [r4, #0]
 800d5b8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20000a58 	.word	0x20000a58

0800d5c0 <_isatty_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4d06      	ldr	r5, [pc, #24]	@ (800d5dc <_isatty_r+0x1c>)
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	602b      	str	r3, [r5, #0]
 800d5cc:	f7f5 fe9e 	bl	800330c <_isatty>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_isatty_r+0x1a>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_isatty_r+0x1a>
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20000a58 	.word	0x20000a58

0800d5e0 <powf>:
 800d5e0:	b508      	push	{r3, lr}
 800d5e2:	ed2d 8b04 	vpush	{d8-d9}
 800d5e6:	eeb0 8a60 	vmov.f32	s16, s1
 800d5ea:	eeb0 9a40 	vmov.f32	s18, s0
 800d5ee:	f000 f859 	bl	800d6a4 <__ieee754_powf>
 800d5f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800d5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fa:	eef0 8a40 	vmov.f32	s17, s0
 800d5fe:	d63e      	bvs.n	800d67e <powf+0x9e>
 800d600:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d608:	d112      	bne.n	800d630 <powf+0x50>
 800d60a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d612:	d039      	beq.n	800d688 <powf+0xa8>
 800d614:	eeb0 0a48 	vmov.f32	s0, s16
 800d618:	f000 f839 	bl	800d68e <finitef>
 800d61c:	b378      	cbz	r0, 800d67e <powf+0x9e>
 800d61e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d626:	d52a      	bpl.n	800d67e <powf+0x9e>
 800d628:	f7fd ff5e 	bl	800b4e8 <__errno>
 800d62c:	2322      	movs	r3, #34	@ 0x22
 800d62e:	e014      	b.n	800d65a <powf+0x7a>
 800d630:	f000 f82d 	bl	800d68e <finitef>
 800d634:	b998      	cbnz	r0, 800d65e <powf+0x7e>
 800d636:	eeb0 0a49 	vmov.f32	s0, s18
 800d63a:	f000 f828 	bl	800d68e <finitef>
 800d63e:	b170      	cbz	r0, 800d65e <powf+0x7e>
 800d640:	eeb0 0a48 	vmov.f32	s0, s16
 800d644:	f000 f823 	bl	800d68e <finitef>
 800d648:	b148      	cbz	r0, 800d65e <powf+0x7e>
 800d64a:	eef4 8a68 	vcmp.f32	s17, s17
 800d64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d652:	d7e9      	bvc.n	800d628 <powf+0x48>
 800d654:	f7fd ff48 	bl	800b4e8 <__errno>
 800d658:	2321      	movs	r3, #33	@ 0x21
 800d65a:	6003      	str	r3, [r0, #0]
 800d65c:	e00f      	b.n	800d67e <powf+0x9e>
 800d65e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800d662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d666:	d10a      	bne.n	800d67e <powf+0x9e>
 800d668:	eeb0 0a49 	vmov.f32	s0, s18
 800d66c:	f000 f80f 	bl	800d68e <finitef>
 800d670:	b128      	cbz	r0, 800d67e <powf+0x9e>
 800d672:	eeb0 0a48 	vmov.f32	s0, s16
 800d676:	f000 f80a 	bl	800d68e <finitef>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d1d4      	bne.n	800d628 <powf+0x48>
 800d67e:	eeb0 0a68 	vmov.f32	s0, s17
 800d682:	ecbd 8b04 	vpop	{d8-d9}
 800d686:	bd08      	pop	{r3, pc}
 800d688:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800d68c:	e7f7      	b.n	800d67e <powf+0x9e>

0800d68e <finitef>:
 800d68e:	ee10 3a10 	vmov	r3, s0
 800d692:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800d696:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800d69a:	bfac      	ite	ge
 800d69c:	2000      	movge	r0, #0
 800d69e:	2001      	movlt	r0, #1
 800d6a0:	4770      	bx	lr
	...

0800d6a4 <__ieee754_powf>:
 800d6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6a8:	ee10 4a90 	vmov	r4, s1
 800d6ac:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800d6b0:	ed2d 8b02 	vpush	{d8}
 800d6b4:	ee10 6a10 	vmov	r6, s0
 800d6b8:	eeb0 8a40 	vmov.f32	s16, s0
 800d6bc:	eef0 8a60 	vmov.f32	s17, s1
 800d6c0:	d10c      	bne.n	800d6dc <__ieee754_powf+0x38>
 800d6c2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800d6c6:	0076      	lsls	r6, r6, #1
 800d6c8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800d6cc:	f240 8274 	bls.w	800dbb8 <__ieee754_powf+0x514>
 800d6d0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800d6d4:	ecbd 8b02 	vpop	{d8}
 800d6d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6dc:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800d6e0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800d6e4:	d802      	bhi.n	800d6ec <__ieee754_powf+0x48>
 800d6e6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d6ea:	d908      	bls.n	800d6fe <__ieee754_powf+0x5a>
 800d6ec:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800d6f0:	d1ee      	bne.n	800d6d0 <__ieee754_powf+0x2c>
 800d6f2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800d6f6:	0064      	lsls	r4, r4, #1
 800d6f8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800d6fc:	e7e6      	b.n	800d6cc <__ieee754_powf+0x28>
 800d6fe:	2e00      	cmp	r6, #0
 800d700:	da1f      	bge.n	800d742 <__ieee754_powf+0x9e>
 800d702:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800d706:	f080 8260 	bcs.w	800dbca <__ieee754_powf+0x526>
 800d70a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800d70e:	d32f      	bcc.n	800d770 <__ieee754_powf+0xcc>
 800d710:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800d714:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d718:	fa49 f503 	asr.w	r5, r9, r3
 800d71c:	fa05 f303 	lsl.w	r3, r5, r3
 800d720:	454b      	cmp	r3, r9
 800d722:	d123      	bne.n	800d76c <__ieee754_powf+0xc8>
 800d724:	f005 0501 	and.w	r5, r5, #1
 800d728:	f1c5 0502 	rsb	r5, r5, #2
 800d72c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800d730:	d11f      	bne.n	800d772 <__ieee754_powf+0xce>
 800d732:	2c00      	cmp	r4, #0
 800d734:	f280 8246 	bge.w	800dbc4 <__ieee754_powf+0x520>
 800d738:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d73c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d740:	e7c8      	b.n	800d6d4 <__ieee754_powf+0x30>
 800d742:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d746:	d111      	bne.n	800d76c <__ieee754_powf+0xc8>
 800d748:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800d74c:	f000 8234 	beq.w	800dbb8 <__ieee754_powf+0x514>
 800d750:	d906      	bls.n	800d760 <__ieee754_powf+0xbc>
 800d752:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800da68 <__ieee754_powf+0x3c4>
 800d756:	2c00      	cmp	r4, #0
 800d758:	bfa8      	it	ge
 800d75a:	eeb0 0a68 	vmovge.f32	s0, s17
 800d75e:	e7b9      	b.n	800d6d4 <__ieee754_powf+0x30>
 800d760:	2c00      	cmp	r4, #0
 800d762:	f280 822c 	bge.w	800dbbe <__ieee754_powf+0x51a>
 800d766:	eeb1 0a68 	vneg.f32	s0, s17
 800d76a:	e7b3      	b.n	800d6d4 <__ieee754_powf+0x30>
 800d76c:	2500      	movs	r5, #0
 800d76e:	e7dd      	b.n	800d72c <__ieee754_powf+0x88>
 800d770:	2500      	movs	r5, #0
 800d772:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800d776:	d102      	bne.n	800d77e <__ieee754_powf+0xda>
 800d778:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d77c:	e7aa      	b.n	800d6d4 <__ieee754_powf+0x30>
 800d77e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800d782:	f040 8227 	bne.w	800dbd4 <__ieee754_powf+0x530>
 800d786:	2e00      	cmp	r6, #0
 800d788:	f2c0 8224 	blt.w	800dbd4 <__ieee754_powf+0x530>
 800d78c:	eeb0 0a48 	vmov.f32	s0, s16
 800d790:	ecbd 8b02 	vpop	{d8}
 800d794:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d798:	f000 bae6 	b.w	800dd68 <__ieee754_sqrtf>
 800d79c:	2d01      	cmp	r5, #1
 800d79e:	d199      	bne.n	800d6d4 <__ieee754_powf+0x30>
 800d7a0:	eeb1 0a40 	vneg.f32	s0, s0
 800d7a4:	e796      	b.n	800d6d4 <__ieee754_powf+0x30>
 800d7a6:	0ff0      	lsrs	r0, r6, #31
 800d7a8:	3801      	subs	r0, #1
 800d7aa:	ea55 0300 	orrs.w	r3, r5, r0
 800d7ae:	d104      	bne.n	800d7ba <__ieee754_powf+0x116>
 800d7b0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d7b4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d7b8:	e78c      	b.n	800d6d4 <__ieee754_powf+0x30>
 800d7ba:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800d7be:	d96d      	bls.n	800d89c <__ieee754_powf+0x1f8>
 800d7c0:	4baa      	ldr	r3, [pc, #680]	@ (800da6c <__ieee754_powf+0x3c8>)
 800d7c2:	4598      	cmp	r8, r3
 800d7c4:	d808      	bhi.n	800d7d8 <__ieee754_powf+0x134>
 800d7c6:	2c00      	cmp	r4, #0
 800d7c8:	da0b      	bge.n	800d7e2 <__ieee754_powf+0x13e>
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	ecbd 8b02 	vpop	{d8}
 800d7d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7d4:	f000 bac2 	b.w	800dd5c <__math_oflowf>
 800d7d8:	4ba5      	ldr	r3, [pc, #660]	@ (800da70 <__ieee754_powf+0x3cc>)
 800d7da:	4598      	cmp	r8, r3
 800d7dc:	d908      	bls.n	800d7f0 <__ieee754_powf+0x14c>
 800d7de:	2c00      	cmp	r4, #0
 800d7e0:	dcf3      	bgt.n	800d7ca <__ieee754_powf+0x126>
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	ecbd 8b02 	vpop	{d8}
 800d7e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7ec:	f000 bab0 	b.w	800dd50 <__math_uflowf>
 800d7f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d7f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d7f8:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800da74 <__ieee754_powf+0x3d0>
 800d7fc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800d800:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d804:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d808:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d80c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d810:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800da78 <__ieee754_powf+0x3d4>
 800d814:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d818:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800da7c <__ieee754_powf+0x3d8>
 800d81c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800d820:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800da80 <__ieee754_powf+0x3dc>
 800d824:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d828:	eeb0 7a67 	vmov.f32	s14, s15
 800d82c:	eea0 7a26 	vfma.f32	s14, s0, s13
 800d830:	ee17 3a10 	vmov	r3, s14
 800d834:	f36f 030b 	bfc	r3, #0, #12
 800d838:	ee07 3a10 	vmov	s14, r3
 800d83c:	eeb0 6a47 	vmov.f32	s12, s14
 800d840:	eea0 6a66 	vfms.f32	s12, s0, s13
 800d844:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d848:	3d01      	subs	r5, #1
 800d84a:	4305      	orrs	r5, r0
 800d84c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d850:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800d854:	f36f 040b 	bfc	r4, #0, #12
 800d858:	bf18      	it	ne
 800d85a:	eeb0 8a66 	vmovne.f32	s16, s13
 800d85e:	ee06 4a90 	vmov	s13, r4
 800d862:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d866:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800d86a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800d86e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800d872:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d876:	ee17 1a10 	vmov	r1, s14
 800d87a:	2900      	cmp	r1, #0
 800d87c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d880:	f340 80dd 	ble.w	800da3e <__ieee754_powf+0x39a>
 800d884:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800d888:	f240 80ca 	bls.w	800da20 <__ieee754_powf+0x37c>
 800d88c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d894:	bf4c      	ite	mi
 800d896:	2001      	movmi	r0, #1
 800d898:	2000      	movpl	r0, #0
 800d89a:	e797      	b.n	800d7cc <__ieee754_powf+0x128>
 800d89c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800d8a0:	bf01      	itttt	eq
 800d8a2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800da84 <__ieee754_powf+0x3e0>
 800d8a6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d8aa:	f06f 0317 	mvneq.w	r3, #23
 800d8ae:	ee17 7a90 	vmoveq	r7, s15
 800d8b2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800d8b6:	bf18      	it	ne
 800d8b8:	2300      	movne	r3, #0
 800d8ba:	3a7f      	subs	r2, #127	@ 0x7f
 800d8bc:	441a      	add	r2, r3
 800d8be:	4b72      	ldr	r3, [pc, #456]	@ (800da88 <__ieee754_powf+0x3e4>)
 800d8c0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800d8c4:	429f      	cmp	r7, r3
 800d8c6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800d8ca:	dd06      	ble.n	800d8da <__ieee754_powf+0x236>
 800d8cc:	4b6f      	ldr	r3, [pc, #444]	@ (800da8c <__ieee754_powf+0x3e8>)
 800d8ce:	429f      	cmp	r7, r3
 800d8d0:	f340 80a4 	ble.w	800da1c <__ieee754_powf+0x378>
 800d8d4:	3201      	adds	r2, #1
 800d8d6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800d8da:	2600      	movs	r6, #0
 800d8dc:	4b6c      	ldr	r3, [pc, #432]	@ (800da90 <__ieee754_powf+0x3ec>)
 800d8de:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800d8e2:	ee07 1a10 	vmov	s14, r1
 800d8e6:	edd3 5a00 	vldr	s11, [r3]
 800d8ea:	4b6a      	ldr	r3, [pc, #424]	@ (800da94 <__ieee754_powf+0x3f0>)
 800d8ec:	ee75 7a87 	vadd.f32	s15, s11, s14
 800d8f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8f4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800d8f8:	1049      	asrs	r1, r1, #1
 800d8fa:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800d8fe:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800d902:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800d906:	ee37 6a65 	vsub.f32	s12, s14, s11
 800d90a:	ee07 1a90 	vmov	s15, r1
 800d90e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800d912:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800d916:	ee15 7a10 	vmov	r7, s10
 800d91a:	401f      	ands	r7, r3
 800d91c:	ee06 7a90 	vmov	s13, r7
 800d920:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800d924:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d928:	ee65 7a05 	vmul.f32	s15, s10, s10
 800d92c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d930:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800da98 <__ieee754_powf+0x3f4>
 800d934:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800da9c <__ieee754_powf+0x3f8>
 800d938:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d93c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800daa0 <__ieee754_powf+0x3fc>
 800d940:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d944:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800da74 <__ieee754_powf+0x3d0>
 800d948:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d94c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800daa4 <__ieee754_powf+0x400>
 800d950:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d954:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800daa8 <__ieee754_powf+0x404>
 800d958:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d95c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d960:	ee35 7a26 	vadd.f32	s14, s10, s13
 800d964:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800d968:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d96c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800d970:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800d974:	eef0 5a67 	vmov.f32	s11, s15
 800d978:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800d97c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800d980:	ee15 1a90 	vmov	r1, s11
 800d984:	4019      	ands	r1, r3
 800d986:	ee05 1a90 	vmov	s11, r1
 800d98a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800d98e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800d992:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d996:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d99a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d99e:	eeb0 6a67 	vmov.f32	s12, s15
 800d9a2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800d9a6:	ee16 1a10 	vmov	r1, s12
 800d9aa:	4019      	ands	r1, r3
 800d9ac:	ee06 1a10 	vmov	s12, r1
 800d9b0:	eeb0 7a46 	vmov.f32	s14, s12
 800d9b4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800d9b8:	493c      	ldr	r1, [pc, #240]	@ (800daac <__ieee754_powf+0x408>)
 800d9ba:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800d9be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9c2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800dab0 <__ieee754_powf+0x40c>
 800d9c6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800dab4 <__ieee754_powf+0x410>
 800d9ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9ce:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800dab8 <__ieee754_powf+0x414>
 800d9d2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d9d6:	ed91 7a00 	vldr	s14, [r1]
 800d9da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9de:	ee07 2a10 	vmov	s14, r2
 800d9e2:	4a36      	ldr	r2, [pc, #216]	@ (800dabc <__ieee754_powf+0x418>)
 800d9e4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800d9e8:	eeb0 7a67 	vmov.f32	s14, s15
 800d9ec:	eea6 7a25 	vfma.f32	s14, s12, s11
 800d9f0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800d9f4:	ed92 5a00 	vldr	s10, [r2]
 800d9f8:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d9fc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800da00:	ee17 2a10 	vmov	r2, s14
 800da04:	401a      	ands	r2, r3
 800da06:	ee07 2a10 	vmov	s14, r2
 800da0a:	ee77 6a66 	vsub.f32	s13, s14, s13
 800da0e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800da12:	eee6 6a65 	vfms.f32	s13, s12, s11
 800da16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da1a:	e715      	b.n	800d848 <__ieee754_powf+0x1a4>
 800da1c:	2601      	movs	r6, #1
 800da1e:	e75d      	b.n	800d8dc <__ieee754_powf+0x238>
 800da20:	d152      	bne.n	800dac8 <__ieee754_powf+0x424>
 800da22:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800dac0 <__ieee754_powf+0x41c>
 800da26:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da2a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800da2e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800da32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da36:	f73f af29 	bgt.w	800d88c <__ieee754_powf+0x1e8>
 800da3a:	2386      	movs	r3, #134	@ 0x86
 800da3c:	e048      	b.n	800dad0 <__ieee754_powf+0x42c>
 800da3e:	4a21      	ldr	r2, [pc, #132]	@ (800dac4 <__ieee754_powf+0x420>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d907      	bls.n	800da54 <__ieee754_powf+0x3b0>
 800da44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800da48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4c:	bf4c      	ite	mi
 800da4e:	2001      	movmi	r0, #1
 800da50:	2000      	movpl	r0, #0
 800da52:	e6c7      	b.n	800d7e4 <__ieee754_powf+0x140>
 800da54:	d138      	bne.n	800dac8 <__ieee754_powf+0x424>
 800da56:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da5a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800da5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da62:	dbea      	blt.n	800da3a <__ieee754_powf+0x396>
 800da64:	e7ee      	b.n	800da44 <__ieee754_powf+0x3a0>
 800da66:	bf00      	nop
 800da68:	00000000 	.word	0x00000000
 800da6c:	3f7ffff3 	.word	0x3f7ffff3
 800da70:	3f800007 	.word	0x3f800007
 800da74:	3eaaaaab 	.word	0x3eaaaaab
 800da78:	3fb8aa00 	.word	0x3fb8aa00
 800da7c:	3fb8aa3b 	.word	0x3fb8aa3b
 800da80:	36eca570 	.word	0x36eca570
 800da84:	4b800000 	.word	0x4b800000
 800da88:	001cc471 	.word	0x001cc471
 800da8c:	005db3d6 	.word	0x005db3d6
 800da90:	0800e224 	.word	0x0800e224
 800da94:	fffff000 	.word	0xfffff000
 800da98:	3e6c3255 	.word	0x3e6c3255
 800da9c:	3e53f142 	.word	0x3e53f142
 800daa0:	3e8ba305 	.word	0x3e8ba305
 800daa4:	3edb6db7 	.word	0x3edb6db7
 800daa8:	3f19999a 	.word	0x3f19999a
 800daac:	0800e214 	.word	0x0800e214
 800dab0:	3f76384f 	.word	0x3f76384f
 800dab4:	3f763800 	.word	0x3f763800
 800dab8:	369dc3a0 	.word	0x369dc3a0
 800dabc:	0800e21c 	.word	0x0800e21c
 800dac0:	3338aa3c 	.word	0x3338aa3c
 800dac4:	43160000 	.word	0x43160000
 800dac8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800dacc:	d96f      	bls.n	800dbae <__ieee754_powf+0x50a>
 800dace:	15db      	asrs	r3, r3, #23
 800dad0:	3b7e      	subs	r3, #126	@ 0x7e
 800dad2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800dad6:	4118      	asrs	r0, r3
 800dad8:	4408      	add	r0, r1
 800dada:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dade:	4a4e      	ldr	r2, [pc, #312]	@ (800dc18 <__ieee754_powf+0x574>)
 800dae0:	3b7f      	subs	r3, #127	@ 0x7f
 800dae2:	411a      	asrs	r2, r3
 800dae4:	4002      	ands	r2, r0
 800dae6:	ee07 2a10 	vmov	s14, r2
 800daea:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800daee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800daf2:	f1c3 0317 	rsb	r3, r3, #23
 800daf6:	4118      	asrs	r0, r3
 800daf8:	2900      	cmp	r1, #0
 800dafa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dafe:	bfb8      	it	lt
 800db00:	4240      	neglt	r0, r0
 800db02:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800db06:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800dc1c <__ieee754_powf+0x578>
 800db0a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800dc20 <__ieee754_powf+0x57c>
 800db0e:	ee16 3a90 	vmov	r3, s13
 800db12:	f36f 030b 	bfc	r3, #0, #12
 800db16:	ee06 3a90 	vmov	s13, r3
 800db1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800db1e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800db22:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800db26:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800dc24 <__ieee754_powf+0x580>
 800db2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db2e:	eee0 7a87 	vfma.f32	s15, s1, s14
 800db32:	eeb0 7a67 	vmov.f32	s14, s15
 800db36:	eea6 7a86 	vfma.f32	s14, s13, s12
 800db3a:	eef0 5a47 	vmov.f32	s11, s14
 800db3e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800db42:	ee67 6a07 	vmul.f32	s13, s14, s14
 800db46:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800db4a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800dc28 <__ieee754_powf+0x584>
 800db4e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800dc2c <__ieee754_powf+0x588>
 800db52:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800db56:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800dc30 <__ieee754_powf+0x58c>
 800db5a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800db5e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800dc34 <__ieee754_powf+0x590>
 800db62:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800db66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dc38 <__ieee754_powf+0x594>
 800db6a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800db6e:	eeb0 6a47 	vmov.f32	s12, s14
 800db72:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800db76:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800db7a:	ee67 5a06 	vmul.f32	s11, s14, s12
 800db7e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800db82:	eee7 7a27 	vfma.f32	s15, s14, s15
 800db86:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800db8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800db8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db92:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db96:	ee10 3a10 	vmov	r3, s0
 800db9a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800db9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dba2:	da06      	bge.n	800dbb2 <__ieee754_powf+0x50e>
 800dba4:	f000 f854 	bl	800dc50 <scalbnf>
 800dba8:	ee20 0a08 	vmul.f32	s0, s0, s16
 800dbac:	e592      	b.n	800d6d4 <__ieee754_powf+0x30>
 800dbae:	2000      	movs	r0, #0
 800dbb0:	e7a7      	b.n	800db02 <__ieee754_powf+0x45e>
 800dbb2:	ee00 3a10 	vmov	s0, r3
 800dbb6:	e7f7      	b.n	800dba8 <__ieee754_powf+0x504>
 800dbb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dbbc:	e58a      	b.n	800d6d4 <__ieee754_powf+0x30>
 800dbbe:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800dc3c <__ieee754_powf+0x598>
 800dbc2:	e587      	b.n	800d6d4 <__ieee754_powf+0x30>
 800dbc4:	eeb0 0a48 	vmov.f32	s0, s16
 800dbc8:	e584      	b.n	800d6d4 <__ieee754_powf+0x30>
 800dbca:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800dbce:	f43f adbb 	beq.w	800d748 <__ieee754_powf+0xa4>
 800dbd2:	2502      	movs	r5, #2
 800dbd4:	eeb0 0a48 	vmov.f32	s0, s16
 800dbd8:	f000 f832 	bl	800dc40 <fabsf>
 800dbdc:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800dbe0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800dbe4:	4647      	mov	r7, r8
 800dbe6:	d003      	beq.n	800dbf0 <__ieee754_powf+0x54c>
 800dbe8:	f1b8 0f00 	cmp.w	r8, #0
 800dbec:	f47f addb 	bne.w	800d7a6 <__ieee754_powf+0x102>
 800dbf0:	2c00      	cmp	r4, #0
 800dbf2:	bfbc      	itt	lt
 800dbf4:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800dbf8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800dbfc:	2e00      	cmp	r6, #0
 800dbfe:	f6bf ad69 	bge.w	800d6d4 <__ieee754_powf+0x30>
 800dc02:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800dc06:	ea58 0805 	orrs.w	r8, r8, r5
 800dc0a:	f47f adc7 	bne.w	800d79c <__ieee754_powf+0xf8>
 800dc0e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dc12:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800dc16:	e55d      	b.n	800d6d4 <__ieee754_powf+0x30>
 800dc18:	ff800000 	.word	0xff800000
 800dc1c:	3f317218 	.word	0x3f317218
 800dc20:	3f317200 	.word	0x3f317200
 800dc24:	35bfbe8c 	.word	0x35bfbe8c
 800dc28:	b5ddea0e 	.word	0xb5ddea0e
 800dc2c:	3331bb4c 	.word	0x3331bb4c
 800dc30:	388ab355 	.word	0x388ab355
 800dc34:	bb360b61 	.word	0xbb360b61
 800dc38:	3e2aaaab 	.word	0x3e2aaaab
 800dc3c:	00000000 	.word	0x00000000

0800dc40 <fabsf>:
 800dc40:	ee10 3a10 	vmov	r3, s0
 800dc44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc48:	ee00 3a10 	vmov	s0, r3
 800dc4c:	4770      	bx	lr
	...

0800dc50 <scalbnf>:
 800dc50:	ee10 3a10 	vmov	r3, s0
 800dc54:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800dc58:	d02b      	beq.n	800dcb2 <scalbnf+0x62>
 800dc5a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800dc5e:	d302      	bcc.n	800dc66 <scalbnf+0x16>
 800dc60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dc64:	4770      	bx	lr
 800dc66:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800dc6a:	d123      	bne.n	800dcb4 <scalbnf+0x64>
 800dc6c:	4b24      	ldr	r3, [pc, #144]	@ (800dd00 <scalbnf+0xb0>)
 800dc6e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800dd04 <scalbnf+0xb4>
 800dc72:	4298      	cmp	r0, r3
 800dc74:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dc78:	db17      	blt.n	800dcaa <scalbnf+0x5a>
 800dc7a:	ee10 3a10 	vmov	r3, s0
 800dc7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dc82:	3a19      	subs	r2, #25
 800dc84:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800dc88:	4288      	cmp	r0, r1
 800dc8a:	dd15      	ble.n	800dcb8 <scalbnf+0x68>
 800dc8c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800dd08 <scalbnf+0xb8>
 800dc90:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800dd0c <scalbnf+0xbc>
 800dc94:	ee10 3a10 	vmov	r3, s0
 800dc98:	eeb0 7a67 	vmov.f32	s14, s15
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	bfb8      	it	lt
 800dca0:	eef0 7a66 	vmovlt.f32	s15, s13
 800dca4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800dca8:	4770      	bx	lr
 800dcaa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800dd10 <scalbnf+0xc0>
 800dcae:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dcb2:	4770      	bx	lr
 800dcb4:	0dd2      	lsrs	r2, r2, #23
 800dcb6:	e7e5      	b.n	800dc84 <scalbnf+0x34>
 800dcb8:	4410      	add	r0, r2
 800dcba:	28fe      	cmp	r0, #254	@ 0xfe
 800dcbc:	dce6      	bgt.n	800dc8c <scalbnf+0x3c>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	dd06      	ble.n	800dcd0 <scalbnf+0x80>
 800dcc2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dcc6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dcca:	ee00 3a10 	vmov	s0, r3
 800dcce:	4770      	bx	lr
 800dcd0:	f110 0f16 	cmn.w	r0, #22
 800dcd4:	da09      	bge.n	800dcea <scalbnf+0x9a>
 800dcd6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800dd10 <scalbnf+0xc0>
 800dcda:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800dd14 <scalbnf+0xc4>
 800dcde:	ee10 3a10 	vmov	r3, s0
 800dce2:	eeb0 7a67 	vmov.f32	s14, s15
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	e7d9      	b.n	800dc9e <scalbnf+0x4e>
 800dcea:	3019      	adds	r0, #25
 800dcec:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dcf0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dcf4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800dd18 <scalbnf+0xc8>
 800dcf8:	ee07 3a90 	vmov	s15, r3
 800dcfc:	e7d7      	b.n	800dcae <scalbnf+0x5e>
 800dcfe:	bf00      	nop
 800dd00:	ffff3cb0 	.word	0xffff3cb0
 800dd04:	4c000000 	.word	0x4c000000
 800dd08:	7149f2ca 	.word	0x7149f2ca
 800dd0c:	f149f2ca 	.word	0xf149f2ca
 800dd10:	0da24260 	.word	0x0da24260
 800dd14:	8da24260 	.word	0x8da24260
 800dd18:	33000000 	.word	0x33000000

0800dd1c <with_errnof>:
 800dd1c:	b510      	push	{r4, lr}
 800dd1e:	ed2d 8b02 	vpush	{d8}
 800dd22:	eeb0 8a40 	vmov.f32	s16, s0
 800dd26:	4604      	mov	r4, r0
 800dd28:	f7fd fbde 	bl	800b4e8 <__errno>
 800dd2c:	eeb0 0a48 	vmov.f32	s0, s16
 800dd30:	ecbd 8b02 	vpop	{d8}
 800dd34:	6004      	str	r4, [r0, #0]
 800dd36:	bd10      	pop	{r4, pc}

0800dd38 <xflowf>:
 800dd38:	b130      	cbz	r0, 800dd48 <xflowf+0x10>
 800dd3a:	eef1 7a40 	vneg.f32	s15, s0
 800dd3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dd42:	2022      	movs	r0, #34	@ 0x22
 800dd44:	f7ff bfea 	b.w	800dd1c <with_errnof>
 800dd48:	eef0 7a40 	vmov.f32	s15, s0
 800dd4c:	e7f7      	b.n	800dd3e <xflowf+0x6>
	...

0800dd50 <__math_uflowf>:
 800dd50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dd58 <__math_uflowf+0x8>
 800dd54:	f7ff bff0 	b.w	800dd38 <xflowf>
 800dd58:	10000000 	.word	0x10000000

0800dd5c <__math_oflowf>:
 800dd5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dd64 <__math_oflowf+0x8>
 800dd60:	f7ff bfea 	b.w	800dd38 <xflowf>
 800dd64:	70000000 	.word	0x70000000

0800dd68 <__ieee754_sqrtf>:
 800dd68:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dd6c:	4770      	bx	lr
	...

0800dd70 <_init>:
 800dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd72:	bf00      	nop
 800dd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd76:	bc08      	pop	{r3}
 800dd78:	469e      	mov	lr, r3
 800dd7a:	4770      	bx	lr

0800dd7c <_fini>:
 800dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7e:	bf00      	nop
 800dd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd82:	bc08      	pop	{r3}
 800dd84:	469e      	mov	lr, r3
 800dd86:	4770      	bx	lr
